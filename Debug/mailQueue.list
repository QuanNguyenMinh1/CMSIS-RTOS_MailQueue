
mailQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009600  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08009710  08009710  0000a710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c2c  08009c2c  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c34  08009c34  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c34  08009c34  0000ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c38  08009c38  0000ac38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009c3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  200001d8  08009e14  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001394  08009e14  0000b394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120db  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e87  00000000  00000000  0001d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00020168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  00021360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a223  00000000  00000000  0002214c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013771  00000000  00000000  0003c36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ed7  00000000  00000000  0004fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e49b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd8  00000000  00000000  000e49fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ea9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080096f8 	.word	0x080096f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080096f8 	.word	0x080096f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <vApplicationGetIdleTaskMemory+0x28>)
 8000be4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2280      	movs	r2, #128	@ 0x80
 8000bf0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	200001f4 	.word	0x200001f4
 8000c00:	20000248 	.word	0x20000248

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b092      	sub	sp, #72	@ 0x48
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fb9f 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f847 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f8b5 	bl	8000d80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 f889 	bl	8000d2c <MX_USART1_UART_Init>

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
//  osMessageQDef(myQueue01, 16, uint16_t);
//  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
  osMailQDef(myQueue01, 16, tDataStruct);
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c1e:	2306      	movs	r3, #6
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  myQueue01Handle = osMailCreate(osMailQ(myQueue01), NULL);
 8000c28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f852 	bl	8002cd8 <osMailCreate>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <main+0x88>)
 8000c38:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartDefaultTask, 3, 0, 128);
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <main+0x8c>)
 8000c3c:	f107 041c 	add.w	r4, r7, #28
 8000c40:	461d      	mov	r5, r3
 8000c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fee0 	bl	8002a1a <osThreadCreate>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <main+0x90>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
//  osThreadDef(myTask02, StartTask02, 2, 0, 128);
  osThreadDef(myTask02, StartTask02, 2, 0, 256);
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <main+0x94>)
 8000c62:	463c      	mov	r4, r7
 8000c64:	461d      	mov	r5, r3
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000c72:	463b      	mov	r3, r7
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fecf 	bl	8002a1a <osThreadCreate>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <main+0x98>)
 8000c80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c82:	f001 fec3 	bl	8002a0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c86:	bf00      	nop
 8000c88:	e7fd      	b.n	8000c86 <main+0x82>
 8000c8a:	bf00      	nop
 8000c8c:	20000498 	.word	0x20000498
 8000c90:	0800971c 	.word	0x0800971c
 8000c94:	20000490 	.word	0x20000490
 8000c98:	08009744 	.word	0x08009744
 8000c9c:	20000494 	.word	0x20000494

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	@ 0x40
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	2228      	movs	r2, #40	@ 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 f953 	bl	8005f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cde:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fdc5 	bl	8001878 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f910 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f832 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d1e:	f000 f8fb 	bl	8000f18 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3740      	adds	r7, #64	@ 0x40
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART1_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f001 fc06 	bl	8002574 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f8d3 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000448 	.word	0x20000448
 8000d7c:	40013800 	.word	0x40013800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <MX_GPIO_Init+0x40>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <RxNoti>:

/* USER CODE BEGIN 4 */
void RxNoti(UART_HandleTypeDef *huart, tDataStruct *data)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a6      	sub	sp, #152	@ 0x98
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	  uint8_t rxBuff[120] = {};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2278      	movs	r2, #120	@ 0x78
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 f8bf 	bl	8005f5a <memset>
	  uint8_t *notiStr = "Queue received a message: ";
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <RxNoti+0x5c>)
 8000dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  snprintf((char*)rxBuff, sizeof(rxBuff), "Task02 is running\n% s%\n xAccel = %d\n yAccel = %d\n zAccel = %d\n", notiStr, data->xAccel, data->yAccel, data->zAccel);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	885b      	ldrh	r3, [r3, #2]
 8000dec:	4619      	mov	r1, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	f107 000c 	add.w	r0, r7, #12
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	9101      	str	r1, [sp, #4]
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e00:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <RxNoti+0x60>)
 8000e02:	2178      	movs	r1, #120	@ 0x78
 8000e04:	f005 f80e 	bl	8005e24 <sniprintf>
	  HAL_UART_Transmit(&huart1, rxBuff, sizeof(rxBuff), 1000);
 8000e08:	f107 010c 	add.w	r1, r7, #12
 8000e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e10:	2278      	movs	r2, #120	@ 0x78
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <RxNoti+0x64>)
 8000e14:	f001 fbfe 	bl	8002614 <HAL_UART_Transmit>
}
 8000e18:	bf00      	nop
 8000e1a:	3788      	adds	r7, #136	@ 0x88
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	08009760 	.word	0x08009760
 8000e24:	0800977c 	.word	0x0800977c
 8000e28:	20000448 	.word	0x20000448

08000e2c <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
uint8_t test = 0;
void StartDefaultTask(void const * argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
//	  txData->yAccel = 5678;
//	  txData->zAccel = test++;
  /* Infinite loop */
  for(;;)
  {
	  tDataStruct *txData = osMailAlloc(myQueue01Handle, 100);
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <StartDefaultTask+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2164      	movs	r1, #100	@ 0x64
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ffa4 	bl	8002d88 <osMailAlloc>
 8000e40:	60f8      	str	r0, [r7, #12]
	  txData->xAccel = 1234;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8000e48:	801a      	strh	r2, [r3, #0]
	  txData->yAccel = 5678;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f241 622e 	movw	r2, #5678	@ 0x162e
 8000e50:	805a      	strh	r2, [r3, #2]
	  txData->zAccel = test++;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <StartDefaultTask+0x64>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	b2d1      	uxtb	r1, r2
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <StartDefaultTask+0x64>)
 8000e5c:	7011      	strb	r1, [r2, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	809a      	strh	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1, "Task01 is running", sizeof ("Task01 is running"), 1000);
 8000e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e68:	2212      	movs	r2, #18
 8000e6a:	490a      	ldr	r1, [pc, #40]	@ (8000e94 <StartDefaultTask+0x68>)
 8000e6c:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <StartDefaultTask+0x6c>)
 8000e6e:	f001 fbd1 	bl	8002614 <HAL_UART_Transmit>
    osDelay(1000);
 8000e72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e76:	f001 fe1c 	bl	8002ab2 <osDelay>
    osMailPut(myQueue01Handle, txData);
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <StartDefaultTask+0x60>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68f9      	ldr	r1, [r7, #12]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 ff97 	bl	8002db4 <osMailPut>
  {
 8000e86:	bf00      	nop
 8000e88:	e7d4      	b.n	8000e34 <StartDefaultTask+0x8>
 8000e8a:	bf00      	nop
 8000e8c:	20000498 	.word	0x20000498
 8000e90:	2000049c 	.word	0x2000049c
 8000e94:	080097bc 	.word	0x080097bc
 8000e98:	20000448 	.word	0x20000448

08000e9c <StartTask02>:
*/
/* USER CODE END Header_StartTask02 */
tDataStruct *rxData;

void StartTask02(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	osEvent rxEvent;
  /* Infinite loop */
  for(;;)
  {
	  rxEvent = osMailGet(myQueue01Handle, osWaitForever);
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <StartTask02+0x4c>)
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 ffbd 	bl	8002e30 <osMailGet>
//	  rxEvent = osMailGet(myQueue01Handle, 5000);

	  if (rxEvent.status == osEventMail)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	d110      	bne.n	8000ede <StartTask02+0x42>
	  {
		  rxData = (tDataStruct*)rxEvent.value.p;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <StartTask02+0x50>)
 8000ec0:	6013      	str	r3, [r2, #0]
//		  RxNoti(&huart1, &rxData);
		  RxNoti(&huart1, rxData);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <StartTask02+0x50>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <StartTask02+0x54>)
 8000eca:	f7ff ff7b 	bl	8000dc4 <RxNoti>
		  osMailFree(myQueue01Handle, rxData);
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <StartTask02+0x4c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <StartTask02+0x50>)
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 f81d 	bl	8002f18 <osMailFree>
	  }
	  osDelay(100);
 8000ede:	2064      	movs	r0, #100	@ 0x64
 8000ee0:	f001 fde7 	bl	8002ab2 <osDelay>
	  rxEvent = osMailGet(myQueue01Handle, osWaitForever);
 8000ee4:	e7de      	b.n	8000ea4 <StartTask02+0x8>
 8000ee6:	bf00      	nop
 8000ee8:	20000498 	.word	0x20000498
 8000eec:	200004a0 	.word	0x200004a0
 8000ef0:	20000448 	.word	0x20000448

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f06:	f000 fa37 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40000800 	.word	0x40000800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f06f 0001 	mvn.w	r0, #1
 8000f62:	f000 fada 	bl	800151a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x6c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_MspInit+0x6c>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x8c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d131      	bne.n	8001018 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_UART_MspInit+0x90>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <HAL_UART_MspInit+0x94>)
 8000ffa:	f000 fab9 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_UART_MspInit+0x94>)
 8001014:	f000 faac 	bl	8001570 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40013800 	.word	0x40013800
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <HAL_InitTick+0xe8>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <HAL_InitTick+0xe8>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_InitTick+0xe8>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fff9 	bl	800205c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800106e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d103      	bne.n	800107c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001074:	f000 ffca 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8001078:	6378      	str	r0, [r7, #52]	@ 0x34
 800107a:	e004      	b.n	8001086 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800107c:	f000 ffc6 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8001080:	4603      	mov	r3, r0
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001088:	4a23      	ldr	r2, [pc, #140]	@ (8001118 <HAL_InitTick+0xec>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9b      	lsrs	r3, r3, #18
 8001090:	3b01      	subs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001094:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_InitTick+0xf0>)
 8001096:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <HAL_InitTick+0xf4>)
 8001098:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_InitTick+0xf0>)
 800109c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010a2:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <HAL_InitTick+0xf0>)
 80010a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_InitTick+0xf0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_InitTick+0xf0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_InitTick+0xf0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010ba:	4818      	ldr	r0, [pc, #96]	@ (800111c <HAL_InitTick+0xf0>)
 80010bc:	f001 f81c 	bl	80020f8 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d11b      	bne.n	8001106 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80010ce:	4813      	ldr	r0, [pc, #76]	@ (800111c <HAL_InitTick+0xf0>)
 80010d0:	f001 f86a 	bl	80021a8 <HAL_TIM_Base_Start_IT>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d111      	bne.n	8001106 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010e2:	201e      	movs	r0, #30
 80010e4:	f000 fa35 	bl	8001552 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d808      	bhi.n	8001100 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80010ee:	2200      	movs	r2, #0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	201e      	movs	r0, #30
 80010f4:	f000 fa11 	bl	800151a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_InitTick+0xf8>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e002      	b.n	8001106 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001106:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800110a:	4618      	mov	r0, r3
 800110c:	3738      	adds	r7, #56	@ 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	431bde83 	.word	0x431bde83
 800111c:	200004a4 	.word	0x200004a4
 8001120:	40000800 	.word	0x40000800
 8001124:	20000004 	.word	0x20000004

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM4_IRQHandler+0x10>)
 8001162:	f001 f873 	bl	800224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200004a4 	.word	0x200004a4

08001170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <_kill>:

int _kill(int pid, int sig)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001188:	f004 ff3a 	bl	8006000 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	2216      	movs	r2, #22
 8001190:	601a      	str	r2, [r3, #0]
  return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_exit>:

void _exit (int status)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a6:	f04f 31ff 	mov.w	r1, #4294967295
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffe7 	bl	800117e <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <_exit+0x12>

080011b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00a      	b.n	80011dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011c6:	f3af 8000 	nop.w
 80011ca:	4601      	mov	r1, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf0      	blt.n	80011c6 <_read+0x12>
  }

  return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e009      	b.n	8001214 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf1      	blt.n	8001200 <_write+0x12>
  }
  return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_close>:

int _close(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800124c:	605a      	str	r2, [r3, #4]
  return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <_isatty>:

int _isatty(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
	...

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f004 fea2 	bl	8006000 <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20005000 	.word	0x20005000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	200004ec 	.word	0x200004ec
 80012f0:	20001398 	.word	0x20001398

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff fff8 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001306:	490c      	ldr	r1, [pc, #48]	@ (8001338 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001308:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <LoopFillZerobss+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800131c:	4c09      	ldr	r4, [pc, #36]	@ (8001344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f004 fe6f 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fc69 	bl	8000c04 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800133c:	08009c3c 	.word	0x08009c3c
  ldr r2, =_sbss
 8001340:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001344:	20001394 	.word	0x20001394

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f8d1 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff fe62 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fddc 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a03      	ldr	r2, [pc, #12]	@ (8001398 <HAL_IncTick+0x20>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000008 	.word	0x20000008
 8001398:	200004f0 	.word	0x200004f0

0800139c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200004f0 	.word	0x200004f0

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4906      	ldr	r1, [pc, #24]	@ (8001448 <__NVIC_EnableIRQ+0x34>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff4f 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff64 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ffb2 	bl	80014a0 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff81 	bl	800144c <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff57 	bl	8001414 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	@ 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	e169      	b.n	8001858 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001584:	2201      	movs	r2, #1
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8158 	bne.w	8001852 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001810 <HAL_GPIO_Init+0x2a0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d05e      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015ac:	4a98      	ldr	r2, [pc, #608]	@ (8001810 <HAL_GPIO_Init+0x2a0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d875      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015b2:	4a98      	ldr	r2, [pc, #608]	@ (8001814 <HAL_GPIO_Init+0x2a4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d058      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015b8:	4a96      	ldr	r2, [pc, #600]	@ (8001814 <HAL_GPIO_Init+0x2a4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d86f      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015be:	4a96      	ldr	r2, [pc, #600]	@ (8001818 <HAL_GPIO_Init+0x2a8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d052      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015c4:	4a94      	ldr	r2, [pc, #592]	@ (8001818 <HAL_GPIO_Init+0x2a8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d869      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015ca:	4a94      	ldr	r2, [pc, #592]	@ (800181c <HAL_GPIO_Init+0x2ac>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d04c      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015d0:	4a92      	ldr	r2, [pc, #584]	@ (800181c <HAL_GPIO_Init+0x2ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d863      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015d6:	4a92      	ldr	r2, [pc, #584]	@ (8001820 <HAL_GPIO_Init+0x2b0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d046      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015dc:	4a90      	ldr	r2, [pc, #576]	@ (8001820 <HAL_GPIO_Init+0x2b0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d85d      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d82a      	bhi.n	800163c <HAL_GPIO_Init+0xcc>
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d859      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015ea:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <HAL_GPIO_Init+0x80>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	08001645 	.word	0x08001645
 80015f8:	08001657 	.word	0x08001657
 80015fc:	08001699 	.word	0x08001699
 8001600:	0800169f 	.word	0x0800169f
 8001604:	0800169f 	.word	0x0800169f
 8001608:	0800169f 	.word	0x0800169f
 800160c:	0800169f 	.word	0x0800169f
 8001610:	0800169f 	.word	0x0800169f
 8001614:	0800169f 	.word	0x0800169f
 8001618:	0800169f 	.word	0x0800169f
 800161c:	0800169f 	.word	0x0800169f
 8001620:	0800169f 	.word	0x0800169f
 8001624:	0800169f 	.word	0x0800169f
 8001628:	0800169f 	.word	0x0800169f
 800162c:	0800169f 	.word	0x0800169f
 8001630:	0800169f 	.word	0x0800169f
 8001634:	0800164d 	.word	0x0800164d
 8001638:	08001661 	.word	0x08001661
 800163c:	4a79      	ldr	r2, [pc, #484]	@ (8001824 <HAL_GPIO_Init+0x2b4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001642:	e02c      	b.n	800169e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e029      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e024      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	3308      	adds	r3, #8
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e01f      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	330c      	adds	r3, #12
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e01a      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001672:	2304      	movs	r3, #4
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e013      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001680:	2308      	movs	r3, #8
 8001682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	611a      	str	r2, [r3, #16]
          break;
 800168a:	e009      	b.n	80016a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	615a      	str	r2, [r3, #20]
          break;
 8001696:	e003      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          break;
 800169e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2bff      	cmp	r3, #255	@ 0xff
 80016a4:	d801      	bhi.n	80016aa <HAL_GPIO_Init+0x13a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	e001      	b.n	80016ae <HAL_GPIO_Init+0x13e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3304      	adds	r3, #4
 80016ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2bff      	cmp	r3, #255	@ 0xff
 80016b4:	d802      	bhi.n	80016bc <HAL_GPIO_Init+0x14c>
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x152>
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	3b08      	subs	r3, #8
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	210f      	movs	r1, #15
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
 80016d4:	6a39      	ldr	r1, [r7, #32]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80b1 	beq.w	8001852 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <HAL_GPIO_Init+0x2b8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001828 <HAL_GPIO_Init+0x2b8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <HAL_GPIO_Init+0x2b8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001708:	4a48      	ldr	r2, [pc, #288]	@ (800182c <HAL_GPIO_Init+0x2bc>)
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a40      	ldr	r2, [pc, #256]	@ (8001830 <HAL_GPIO_Init+0x2c0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_GPIO_Init+0x1ec>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <HAL_GPIO_Init+0x2c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1e8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a3e      	ldr	r2, [pc, #248]	@ (8001838 <HAL_GPIO_Init+0x2c8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1e4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3d      	ldr	r2, [pc, #244]	@ (800183c <HAL_GPIO_Init+0x2cc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1e0>
 800174c:	2303      	movs	r3, #3
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x1ee>
 8001750:	2304      	movs	r3, #4
 8001752:	e004      	b.n	800175e <HAL_GPIO_Init+0x1ee>
 8001754:	2302      	movs	r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x1ee>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_GPIO_Init+0x1ee>
 800175c:	2300      	movs	r3, #0
 800175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4093      	lsls	r3, r2
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800176e:	492f      	ldr	r1, [pc, #188]	@ (800182c <HAL_GPIO_Init+0x2bc>)
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	492c      	ldr	r1, [pc, #176]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4928      	ldr	r1, [pc, #160]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	4922      	ldr	r1, [pc, #136]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	491e      	ldr	r1, [pc, #120]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4918      	ldr	r1, [pc, #96]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4914      	ldr	r1, [pc, #80]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d021      	beq.n	8001844 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	490e      	ldr	r1, [pc, #56]	@ (8001840 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e021      	b.n	8001852 <HAL_GPIO_Init+0x2e2>
 800180e:	bf00      	nop
 8001810:	10320000 	.word	0x10320000
 8001814:	10310000 	.word	0x10310000
 8001818:	10220000 	.word	0x10220000
 800181c:	10210000 	.word	0x10210000
 8001820:	10120000 	.word	0x10120000
 8001824:	10110000 	.word	0x10110000
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000
 8001830:	40010800 	.word	0x40010800
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40011000 	.word	0x40011000
 800183c:	40011400 	.word	0x40011400
 8001840:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_GPIO_Init+0x304>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	43db      	mvns	r3, r3
 800184c:	4909      	ldr	r1, [pc, #36]	@ (8001874 <HAL_GPIO_Init+0x304>)
 800184e:	4013      	ands	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f ae8e 	bne.w	8001584 <HAL_GPIO_Init+0x14>
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	372c      	adds	r7, #44	@ 0x2c
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e272      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001898:	4b92      	ldr	r3, [pc, #584]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d00c      	beq.n	80018be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d112      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
 80018b0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b89      	ldr	r3, [pc, #548]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x12c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e24c      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x76>
 80018e0:	4b80      	ldr	r3, [pc, #512]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b78      	ldr	r3, [pc, #480]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a77      	ldr	r2, [pc, #476]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xbc>
 800191a:	4b72      	ldr	r3, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a71      	ldr	r2, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001934:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a67      	ldr	r2, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fd22 	bl	800139c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fd1e 	bl	800139c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e200      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe4>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fd0e 	bl	800139c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fd0a 	bl	800139c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1ec      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x10c>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
 80019ca:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c0      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4939      	ldr	r1, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fcc3 	bl	800139c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fcbf 	bl	800139c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4927      	ldr	r1, [pc, #156]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fca2 	bl	800139c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc9e 	bl	800139c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e180      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03a      	beq.n	8001afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fc82 	bl	800139c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc7e 	bl	800139c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e160      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fafe 	bl	80020bc <RCC_Delay>
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fc68 	bl	800139c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	e00f      	b.n	8001af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc64 	bl	800139c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e146      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	42420000 	.word	0x42420000
 8001aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	4b92      	ldr	r3, [pc, #584]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e9      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80a6 	beq.w	8001c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b88      	ldr	r3, [pc, #544]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a87      	ldr	r2, [pc, #540]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b85      	ldr	r3, [pc, #532]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b82      	ldr	r3, [pc, #520]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7e      	ldr	r2, [pc, #504]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fc25 	bl	800139c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fc21 	bl	800139c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e103      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x312>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6e      	ldr	r2, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e02d      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x334>
 8001b92:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a69      	ldr	r2, [pc, #420]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	e01c      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10c      	bne.n	8001bce <HAL_RCC_OscConfig+0x356>
 8001bb4:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bce:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b58      	ldr	r3, [pc, #352]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d015      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fbd5 	bl	800139c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fbd1 	bl	800139c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0b1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ee      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x37e>
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fbbf 	bl	800139c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fbbb 	bl	800139c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e09b      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ee      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d061      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d146      	bne.n	8001d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fb8f 	bl	800139c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fb8b 	bl	800139c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e06d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001caa:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4921      	ldr	r1, [pc, #132]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a19      	ldr	r1, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	491b      	ldr	r1, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fb5f 	bl	800139c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff fb5b 	bl	800139c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e03d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
 8001d00:	e035      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb48 	bl	800139c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fb44 	bl	800139c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e026      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x498>
 8001d2e:	e01e      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e019      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x500>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4965      	ldr	r1, [pc, #404]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff fa96 	bl	800139c <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff fa92 	bl	800139c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4922      	ldr	r1, [pc, #136]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_RCC_ClockConfig+0x1cc>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f87e 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	080097d8 	.word	0x080097d8
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7e:	e027      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e027      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0c5b      	lsrs	r3, r3, #17
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e004      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	080097f0 	.word	0x080097f0
 8001ff0:	08009800 	.word	0x08009800
 8001ff4:	003d0900 	.word	0x003d0900

08001ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000000 	.word	0x20000000

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff2 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	080097e8 	.word	0x080097e8

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0adb      	lsrs	r3, r3, #11
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	080097e8 	.word	0x080097e8

0800205c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	220f      	movs	r2, #15
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002078:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40022000 	.word	0x40022000

080020bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <RCC_Delay+0x34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <RCC_Delay+0x38>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a5b      	lsrs	r3, r3, #9
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d8:	bf00      	nop
  }
  while (Delay --);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <RCC_Delay+0x1c>
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000000 	.word	0x20000000
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e041      	b.n	800218e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f839 	bl	8002196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 f99c 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e03a      	b.n	8002236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <HAL_TIM_Base_Start_IT+0x98>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <HAL_TIM_Base_Start_IT+0x9c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a13      	ldr	r2, [pc, #76]	@ (8002248 <HAL_TIM_Base_Start_IT+0xa0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d010      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	e007      	b.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800

0800224c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d020      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0202 	mvn.w	r2, #2
 8002280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8d1 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8c4 	bl	800242c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8d3 	bl	8002450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0204 	mvn.w	r2, #4
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8ab 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f89e 	bl	800242c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8ad 	bl	8002450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d020      	beq.n	8002348 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0208 	mvn.w	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f885 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f878 	bl	800242c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f887 	bl	8002450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d020      	beq.n	8002394 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0210 	mvn.w	r2, #16
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2208      	movs	r2, #8
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f85f 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f852 	bl	800242c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f861 	bl	8002450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0201 	mvn.w	r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fd9e 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8c3 	bl	8002562 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f831 	bl	8002462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00c      	beq.n	8002424 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0220 	mvn.w	r2, #32
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f896 	bl	8002550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <TIM_Base_SetConfig+0xd0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00b      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002492:	d007      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a2c      	ldr	r2, [pc, #176]	@ (8002548 <TIM_Base_SetConfig+0xd4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <TIM_Base_SetConfig+0xd8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d108      	bne.n	80024b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a22      	ldr	r2, [pc, #136]	@ (8002544 <TIM_Base_SetConfig+0xd0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c4:	d007      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <TIM_Base_SetConfig+0xd4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <TIM_Base_SetConfig+0xd8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d108      	bne.n	80024e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <TIM_Base_SetConfig+0xd0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f023 0201 	bic.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]
  }
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800

08002550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e042      	b.n	800260c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fcfa 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	@ 0x24
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f971 	bl	80028a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	@ 0x28
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d175      	bne.n	8002720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit+0x2c>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e06e      	b.n	8002722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	@ 0x21
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe fea3 	bl	800139c <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Transmit+0x6c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002688:	e02e      	b.n	80026e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f848 	bl	800272a <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e03a      	b.n	8002722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cb      	bne.n	800268a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	@ 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f814 	bl	800272a <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e006      	b.n	8002722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273a:	e03b      	b.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d037      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7fe fe2a 	bl	800139c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <UART_WaitOnFlagUntilTimeout+0x30>
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e03a      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d020      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d01d      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d116      	bne.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f81d 	bl	80027dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2208      	movs	r2, #8
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e00f      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d0b4      	beq.n	800273c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b095      	sub	sp, #84	@ 0x54
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002804:	643a      	str	r2, [r7, #64]	@ 0x40
 8002806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800280a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e5      	bne.n	80027e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	61fb      	str	r3, [r7, #28]
   return(result);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002838:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800283e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	2b01      	cmp	r3, #1
 8002852:	d119      	bne.n	8002888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	60bb      	str	r3, [r7, #8]
   return(result);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	647b      	str	r3, [r7, #68]	@ 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002874:	61ba      	str	r2, [r7, #24]
 8002876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6979      	ldr	r1, [r7, #20]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	613b      	str	r3, [r7, #16]
   return(result);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002896:	bf00      	nop
 8002898:	3754      	adds	r7, #84	@ 0x54
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028da:	f023 030c 	bic.w	r3, r3, #12
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2c      	ldr	r2, [pc, #176]	@ (80029b4 <UART_SetConfig+0x114>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002908:	f7ff fb94 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	e002      	b.n	8002916 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002910:	f7ff fb7c 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002914:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	4a22      	ldr	r2, [pc, #136]	@ (80029b8 <UART_SetConfig+0x118>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	0119      	lsls	r1, r3, #4
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb2 f2f3 	udiv	r2, r2, r3
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <UART_SetConfig+0x118>)
 800294e:	fba3 0302 	umull	r0, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2064      	movs	r0, #100	@ 0x64
 8002956:	fb00 f303 	mul.w	r3, r0, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	3332      	adds	r3, #50	@ 0x32
 8002960:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <UART_SetConfig+0x118>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800296c:	4419      	add	r1, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009a      	lsls	r2, r3, #2
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fbb2 f2f3 	udiv	r2, r2, r3
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <UART_SetConfig+0x118>)
 8002986:	fba3 0302 	umull	r0, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2064      	movs	r0, #100	@ 0x64
 800298e:	fb00 f303 	mul.w	r3, r0, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	3332      	adds	r3, #50	@ 0x32
 8002998:	4a07      	ldr	r2, [pc, #28]	@ (80029b8 <UART_SetConfig+0x118>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	440a      	add	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40013800 	.word	0x40013800
 80029b8:	51eb851f 	.word	0x51eb851f

080029bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ce:	2b84      	cmp	r3, #132	@ 0x84
 80029d0:	d005      	beq.n	80029de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	3303      	adds	r3, #3
 80029dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029f0:	f3ef 8305 	mrs	r3, IPSR
 80029f4:	607b      	str	r3, [r7, #4]
  return(result);
 80029f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a10:	f001 f9ec 	bl	8003dec <vTaskStartScheduler>
  
  return osOK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1c:	b089      	sub	sp, #36	@ 0x24
 8002a1e:	af04      	add	r7, sp, #16
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <osThreadCreate+0x54>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01c      	beq.n	8002a6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685c      	ldr	r4, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691e      	ldr	r6, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ffb8 	bl	80029bc <makeFreeRtosPriority>
 8002a4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9100      	str	r1, [sp, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4632      	mov	r2, r6
 8002a60:	4629      	mov	r1, r5
 8002a62:	4620      	mov	r0, r4
 8002a64:	f000 fff4 	bl	8003a50 <xTaskCreateStatic>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e01c      	b.n	8002aa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685c      	ldr	r4, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff9a 	bl	80029bc <makeFreeRtosPriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	4632      	mov	r2, r6
 8002a96:	4629      	mov	r1, r5
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f001 f839 	bl	8003b10 <xTaskCreate>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d001      	beq.n	8002aa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <osDelay+0x16>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	e000      	b.n	8002aca <osDelay+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 f958 	bl	8003d80 <vTaskDelay>
  
  return osOK;
 8002ad0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	f023 0303 	bic.w	r3, r3, #3
 8002aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002aee:	2014      	movs	r0, #20
 8002af0:	f002 f886 	bl	8004c00 <pvPortMalloc>
 8002af4:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d046      	beq.n	8002b8a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 f873 	bl	8004c00 <pvPortMalloc>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02b      	beq.n	8002b80 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 f864 	bl	8004c00 <pvPortMalloc>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d011      	beq.n	8002b6a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e008      	b.n	8002b5e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3f1      	bcc.n	8002b4c <osPoolCreate+0x72>
 8002b68:	e00f      	b.n	8002b8a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 f914 	bl	8004d9c <vPortFree>
        vPortFree(thePool);
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f002 f911 	bl	8004d9c <vPortFree>
        thePool = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e004      	b.n	8002b8a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002b80:	6978      	ldr	r0, [r7, #20]
 8002b82:	f002 f90b 	bl	8004d9c <vPortFree>
      thePool = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	@ 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002ba4:	f7ff ff21 	bl	80029ea <inHandlerMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bae:	f3ef 8211 	mrs	r2, BASEPRI
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	617a      	str	r2, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bc6:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bca:	e001      	b.n	8002bd0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002bcc:	f001 ff16 	bl	80049fc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e029      	b.n	8002c2a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002be6:	fb01 f202 	mul.w	r2, r1, r2
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	611a      	str	r2, [r3, #16]
      break;
 8002c22:	e007      	b.n	8002c34 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	3301      	adds	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3d0      	bcc.n	8002bd6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002c34:	f7ff fed9 	bl	80029ea <inHandlerMode>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c48:	e001      	b.n	8002c4e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002c4a:	f001 ff07 	bl	8004a5c <vPortExitCritical>
  }
  
  return p;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	@ 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <osPoolFree+0x14>
    return osErrorParameter;
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	e030      	b.n	8002cce <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <osPoolFree+0x1e>
    return osErrorParameter;
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	e02b      	b.n	8002cce <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d201      	bcs.n	8002c84 <osPoolFree+0x2c>
    return osErrorParameter;
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	e024      	b.n	8002cce <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c98:	fb01 f202 	mul.w	r2, r1, r2
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <osPoolFree+0x4e>
    return osErrorParameter;
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	e013      	b.n	8002cce <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d301      	bcc.n	8002cc0 <osPoolFree+0x68>
    return osErrorParameter;
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	e006      	b.n	8002cce <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689c      	ldr	r4, [r3, #8]
 8002cf6:	200c      	movs	r0, #12
 8002cf8:	f001 ff82 	bl	8004c00 <pvPortMalloc>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <osMailCreate+0x36>
    return NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e038      	b.n	8002d80 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	681c      	ldr	r4, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2104      	movs	r1, #4
 8002d26:	f000 fa25 	bl	8003174 <xQueueGenericCreate>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 f82b 	bl	8004d9c <vPortFree>
    return NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e01a      	b.n	8002d80 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	681c      	ldr	r4, [r3, #0]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fec0 	bl	8002ada <osPoolCreate>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 f813 	bl	8004d9c <vPortFree>
    return NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e002      	b.n	8002d80 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}

08002d88 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <osMailAlloc+0x14>
    return NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e006      	b.n	8002daa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fef7 	bl	8002b94 <osPoolAlloc>
 8002da6:	60f8      	str	r0, [r7, #12]
  
  return p;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <osMailPut+0x14>
    return osErrorParameter;
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	e02c      	b.n	8002e22 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002dcc:	f7ff fe0d 	bl	80029ea <inHandlerMode>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6858      	ldr	r0, [r3, #4]
 8002dda:	f107 020c 	add.w	r2, r7, #12
 8002dde:	4639      	mov	r1, r7
 8002de0:	2300      	movs	r3, #0
 8002de2:	f000 fb23 	bl	800342c <xQueueGenericSendFromISR>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d001      	beq.n	8002df0 <osMailPut+0x3c>
      return osErrorOS;
 8002dec:	23ff      	movs	r3, #255	@ 0xff
 8002dee:	e018      	b.n	8002e22 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d014      	beq.n	8002e20 <osMailPut+0x6c>
 8002df6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <osMailPut+0x78>)
 8002df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	e00b      	b.n	8002e20 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6858      	ldr	r0, [r3, #4]
 8002e0c:	4639      	mov	r1, r7
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2200      	movs	r2, #0
 8002e12:	f000 fa09 	bl	8003228 <xQueueGenericSend>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <osMailPut+0x6c>
      return osErrorOS;
 8002e1c:	23ff      	movs	r3, #255	@ 0xff
 8002e1e:	e000      	b.n	8002e22 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b08b      	sub	sp, #44	@ 0x2c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	617b      	str	r3, [r7, #20]
    return event;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e5a:	e056      	b.n	8002f0a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d103      	bne.n	8002e74 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e72:	e009      	b.n	8002e88 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <osMailGet+0x58>
      ticks = 1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002e88:	f7ff fdaf 	bl	80029ea <inHandlerMode>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6858      	ldr	r0, [r3, #4]
 8002e96:	f107 0220 	add.w	r2, r7, #32
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f000 fc43 	bl	800372c <xQueueReceiveFromISR>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002eac:	2320      	movs	r3, #32
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e001      	b.n	8002eb6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01e      	beq.n	8002efa <osMailGet+0xca>
 8002ebc:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <osMailGet+0xe4>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	e015      	b.n	8002efa <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6858      	ldr	r0, [r3, #4]
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	f000 fb44 	bl	8003568 <xQueueReceive>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e006      	b.n	8002efa <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <osMailGet+0xc6>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <osMailGet+0xc8>
 8002ef6:	2340      	movs	r3, #64	@ 0x40
 8002ef8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	461c      	mov	r4, r3
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	372c      	adds	r7, #44	@ 0x2c
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <osMailFree+0x14>
    return osErrorParameter;
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	e006      	b.n	8002f3a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe90 	bl	8002c58 <osPoolFree>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f103 0208 	add.w	r2, r3, #8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 0208 	add.w	r2, r3, #8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f103 0208 	add.w	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d103      	bne.n	8002ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e00c      	b.n	8003018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3308      	adds	r3, #8
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e002      	b.n	800300c <vListInsert+0x2e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d2f6      	bcs.n	8003006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6852      	ldr	r2, [r2, #4]
 800306e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d103      	bne.n	8003082 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <xQueueGenericReset+0x2c>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60bb      	str	r3, [r7, #8]
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030cc:	f001 fc96 	bl	80049fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fc:	3b01      	subs	r3, #1
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	441a      	add	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	22ff      	movs	r2, #255	@ 0xff
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	22ff      	movs	r2, #255	@ 0xff
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d114      	bne.n	800314c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01a      	beq.n	8003160 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3310      	adds	r3, #16
 800312e:	4618      	mov	r0, r3
 8003130:	f001 f8a6 	bl	8004280 <xTaskRemoveFromEventList>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800313a:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <xQueueGenericReset+0xd0>)
 800313c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	e009      	b.n	8003160 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3310      	adds	r3, #16
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fef6 	bl	8002f42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3324      	adds	r3, #36	@ 0x24
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fef1 	bl	8002f42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003160:	f001 fc7c 	bl	8004a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003164:	2301      	movs	r3, #1
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	613b      	str	r3, [r7, #16]
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3348      	adds	r3, #72	@ 0x48
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fd26 	bl	8004c00 <pvPortMalloc>
 80031b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d011      	beq.n	80031e0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3348      	adds	r3, #72	@ 0x48
 80031c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f805 	bl	80031ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031e0:	69bb      	ldr	r3, [r7, #24]
	}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e002      	b.n	800320c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003218:	2101      	movs	r1, #1
 800321a:	69b8      	ldr	r0, [r7, #24]
 800321c:	f7ff ff40 	bl	80030a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	@ 0x38
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <xQueueGenericSend+0x34>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <xQueueGenericSend+0x42>
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueGenericSend+0x46>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSend+0x48>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <xQueueGenericSend+0x64>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x72>
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <xQueueGenericSend+0x76>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xQueueGenericSend+0x78>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <xQueueGenericSend+0x94>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	623b      	str	r3, [r7, #32]
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 f9a0 	bl	8004600 <xTaskGetSchedulerState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueGenericSend+0xa4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueGenericSend+0xa8>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueGenericSend+0xaa>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <xQueueGenericSend+0xc6>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	61fb      	str	r3, [r7, #28]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ee:	f001 fb85 	bl	80049fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <xQueueGenericSend+0xdc>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d129      	bne.n	8003358 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330a:	f000 fa91 	bl	8003830 <prvCopyDataToQueue>
 800330e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d010      	beq.n	800333a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	3324      	adds	r3, #36	@ 0x24
 800331c:	4618      	mov	r0, r3
 800331e:	f000 ffaf 	bl	8004280 <xTaskRemoveFromEventList>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003328:	4b3f      	ldr	r3, [pc, #252]	@ (8003428 <xQueueGenericSend+0x200>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	e00a      	b.n	8003350 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003340:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <xQueueGenericSend+0x200>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003350:	f001 fb84 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8003354:	2301      	movs	r3, #1
 8003356:	e063      	b.n	8003420 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800335e:	f001 fb7d 	bl	8004a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003362:	2300      	movs	r3, #0
 8003364:	e05c      	b.n	8003420 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ffe9 	bl	8004348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800337a:	f001 fb6f 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800337e:	f000 fd97 	bl	8003eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003382:	f001 fb3b 	bl	80049fc <vPortEnterCritical>
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800338c:	b25b      	sxtb	r3, r3
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d103      	bne.n	800339c <xQueueGenericSend+0x174>
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSend+0x18a>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033b2:	f001 fb53 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033b6:	1d3a      	adds	r2, r7, #4
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ffd8 	bl	8004374 <xTaskCheckForTimeOut>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d124      	bne.n	8003414 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033cc:	f000 fb28 	bl	8003a20 <prvIsQueueFull>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d018      	beq.n	8003408 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	3310      	adds	r3, #16
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ff28 	bl	8004234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e6:	f000 fab3 	bl	8003950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033ea:	f000 fd6f 	bl	8003ecc <xTaskResumeAll>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f af7c 	bne.w	80032ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <xQueueGenericSend+0x200>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	e772      	b.n	80032ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800340a:	f000 faa1 	bl	8003950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340e:	f000 fd5d 	bl	8003ecc <xTaskResumeAll>
 8003412:	e76c      	b.n	80032ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003416:	f000 fa9b 	bl	8003950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800341a:	f000 fd57 	bl	8003ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800341e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003420:	4618      	mov	r0, r3
 8003422:	3738      	adds	r7, #56	@ 0x38
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b090      	sub	sp, #64	@ 0x40
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <xQueueGenericSendFromISR+0x3e>
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueGenericSendFromISR+0x42>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueGenericSendFromISR+0x44>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <xQueueGenericSendFromISR+0x6e>
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <xQueueGenericSendFromISR+0x72>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <xQueueGenericSendFromISR+0x74>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	623b      	str	r3, [r7, #32]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034bc:	f001 fb60 	bl	8004b80 <vPortValidateInterruptPriority>
	__asm volatile
 80034c0:	f3ef 8211 	mrs	r2, BASEPRI
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80034d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <xQueueGenericSendFromISR+0xc2>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d12f      	bne.n	800354e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003504:	f000 f994 	bl	8003830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003508:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d112      	bne.n	8003538 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	3324      	adds	r3, #36	@ 0x24
 800351e:	4618      	mov	r0, r3
 8003520:	f000 feae 	bl	8004280 <xTaskRemoveFromEventList>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e007      	b.n	8003548 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003538:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800353c:	3301      	adds	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b25a      	sxtb	r2, r3
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800354c:	e001      	b.n	8003552 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800354e:	2300      	movs	r3, #0
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f383 8811 	msr	BASEPRI, r3
}
 800355c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800355e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003560:	4618      	mov	r0, r3
 8003562:	3740      	adds	r7, #64	@ 0x40
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	@ 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <xQueueReceive+0x32>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	623b      	str	r3, [r7, #32]
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	e7fd      	b.n	8003596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <xQueueReceive+0x40>
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueReceive+0x44>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueReceive+0x46>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <xQueueReceive+0x62>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61fb      	str	r3, [r7, #28]
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ca:	f001 f819 	bl	8004600 <xTaskGetSchedulerState>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <xQueueReceive+0x72>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <xQueueReceive+0x76>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueReceive+0x78>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <xQueueReceive+0x94>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	61bb      	str	r3, [r7, #24]
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035fc:	f001 f9fe 	bl	80049fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01f      	beq.n	800364c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003610:	f000 f978 	bl	8003904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00f      	beq.n	8003644 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	3310      	adds	r3, #16
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fe29 	bl	8004280 <xTaskRemoveFromEventList>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003634:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <xQueueReceive+0x1c0>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003644:	f001 fa0a 	bl	8004a5c <vPortExitCritical>
				return pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	e069      	b.n	8003720 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003652:	f001 fa03 	bl	8004a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003656:	2300      	movs	r3, #0
 8003658:	e062      	b.n	8003720 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003660:	f107 0310 	add.w	r3, r7, #16
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fe6f 	bl	8004348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800366e:	f001 f9f5 	bl	8004a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003672:	f000 fc1d 	bl	8003eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003676:	f001 f9c1 	bl	80049fc <vPortEnterCritical>
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <xQueueReceive+0x128>
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003696:	b25b      	sxtb	r3, r3
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <xQueueReceive+0x13e>
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a6:	f001 f9d9 	bl	8004a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036aa:	1d3a      	adds	r2, r7, #4
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe5e 	bl	8004374 <xTaskCheckForTimeOut>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d123      	bne.n	8003706 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c0:	f000 f998 	bl	80039f4 <prvIsQueueEmpty>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	3324      	adds	r3, #36	@ 0x24
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fdae 	bl	8004234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036da:	f000 f939 	bl	8003950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036de:	f000 fbf5 	bl	8003ecc <xTaskResumeAll>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d189      	bne.n	80035fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80036e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003728 <xQueueReceive+0x1c0>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	e780      	b.n	80035fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036fc:	f000 f928 	bl	8003950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003700:	f000 fbe4 	bl	8003ecc <xTaskResumeAll>
 8003704:	e77a      	b.n	80035fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003708:	f000 f922 	bl	8003950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800370c:	f000 fbde 	bl	8003ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003712:	f000 f96f 	bl	80039f4 <prvIsQueueEmpty>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f43f af6f 	beq.w	80035fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800371e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	@ 0x38
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	623b      	str	r3, [r7, #32]
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <xQueueReceiveFromISR+0x3c>
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <xQueueReceiveFromISR+0x40>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <xQueueReceiveFromISR+0x42>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	61fb      	str	r3, [r7, #28]
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800378a:	f001 f9f9 	bl	8004b80 <vPortValidateInterruptPriority>
	__asm volatile
 800378e:	f3ef 8211 	mrs	r2, BASEPRI
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	61ba      	str	r2, [r7, #24]
 80037a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d02f      	beq.n	8003816 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037c4:	f000 f89e 	bl	8003904 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80037d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d112      	bne.n	8003800 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	3310      	adds	r3, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd4a 	bl	8004280 <xTaskRemoveFromEventList>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e007      	b.n	8003810 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003804:	3301      	adds	r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	b25a      	sxtb	r2, r3
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003810:	2301      	movs	r3, #1
 8003812:	637b      	str	r3, [r7, #52]	@ 0x34
 8003814:	e001      	b.n	800381a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003816:	2300      	movs	r3, #0
 8003818:	637b      	str	r3, [r7, #52]	@ 0x34
 800381a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f383 8811 	msr	BASEPRI, r3
}
 8003824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003828:	4618      	mov	r0, r3
 800382a:	3738      	adds	r7, #56	@ 0x38
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d14d      	bne.n	80038f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 feee 	bl	800463c <xTaskPriorityDisinherit>
 8003860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	e043      	b.n	80038f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d119      	bne.n	80038a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6858      	ldr	r0, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	461a      	mov	r2, r3
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	f002 fbfb 	bl	8006076 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d32b      	bcc.n	80038f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e026      	b.n	80038f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68d8      	ldr	r0, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	461a      	mov	r2, r3
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	f002 fbe1 	bl	8006076 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	425b      	negs	r3, r3
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	425b      	negs	r3, r3
 80038da:	441a      	add	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d105      	bne.n	80038f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038fa:	697b      	ldr	r3, [r7, #20]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d303      	bcc.n	8003938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68d9      	ldr	r1, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	461a      	mov	r2, r3
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	f002 fb97 	bl	8006076 <memcpy>
	}
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003958:	f001 f850 	bl	80049fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003964:	e011      	b.n	800398a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3324      	adds	r3, #36	@ 0x24
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc84 	bl	8004280 <xTaskRemoveFromEventList>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800397e:	f000 fd5d 	bl	800443c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3b01      	subs	r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	dce9      	bgt.n	8003966 <prvUnlockQueue+0x16>
 8003992:	e000      	b.n	8003996 <prvUnlockQueue+0x46>
					break;
 8003994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800399e:	f001 f85d 	bl	8004a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039a2:	f001 f82b 	bl	80049fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039ae:	e011      	b.n	80039d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3310      	adds	r3, #16
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fc5f 	bl	8004280 <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039c8:	f000 fd38 	bl	800443c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dce9      	bgt.n	80039b0 <prvUnlockQueue+0x60>
 80039dc:	e000      	b.n	80039e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	22ff      	movs	r2, #255	@ 0xff
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039e8:	f001 f838 	bl	8004a5c <vPortExitCritical>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039fc:	f000 fffe 	bl	80049fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e001      	b.n	8003a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a12:	f001 f823 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a28:	f000 ffe8 	bl	80049fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d102      	bne.n	8003a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e001      	b.n	8003a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f001 f80b 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	@ 0x38
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	623b      	str	r3, [r7, #32]
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	61fb      	str	r3, [r7, #28]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a9a:	2354      	movs	r3, #84	@ 0x54
 8003a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b54      	cmp	r3, #84	@ 0x54
 8003aa2:	d00b      	beq.n	8003abc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	61bb      	str	r3, [r7, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003abc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01e      	beq.n	8003b02 <xTaskCreateStatic+0xb2>
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01b      	beq.n	8003b02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003adc:	2300      	movs	r3, #0
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f850 	bl	8003b9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003afa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003afc:	f000 f8d6 	bl	8003cac <prvAddNewTaskToReadyList>
 8003b00:	e001      	b.n	8003b06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b06:	697b      	ldr	r3, [r7, #20]
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	@ 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	@ 0x30
 8003b14:	af04      	add	r7, sp, #16
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f86b 	bl	8004c00 <pvPortMalloc>
 8003b2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b32:	2054      	movs	r0, #84	@ 0x54
 8003b34:	f001 f864 	bl	8004c00 <pvPortMalloc>
 8003b38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b46:	e005      	b.n	8003b54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b48:	6978      	ldr	r0, [r7, #20]
 8003b4a:	f001 f927 	bl	8004d9c <vPortFree>
 8003b4e:	e001      	b.n	8003b54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f80e 	bl	8003b9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7e:	69f8      	ldr	r0, [r7, #28]
 8003b80:	f000 f894 	bl	8003cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e002      	b.n	8003b90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b90:	69bb      	ldr	r3, [r7, #24]
	}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	617b      	str	r3, [r7, #20]
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01f      	beq.n	8003c2a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e012      	b.n	8003c16 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3334      	adds	r3, #52	@ 0x34
 8003c00:	460a      	mov	r2, r1
 8003c02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d9e9      	bls.n	8003bf0 <prvInitialiseNewTask+0x56>
 8003c1c:	e000      	b.n	8003c20 <prvInitialiseNewTask+0x86>
			{
				break;
 8003c1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c28:	e003      	b.n	8003c32 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d901      	bls.n	8003c3c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c38:	2306      	movs	r3, #6
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c46:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	3304      	adds	r3, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f994 	bl	8002f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff f98f 	bl	8002f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	f1c3 0207 	rsb	r2, r3, #7
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	69b8      	ldr	r0, [r7, #24]
 8003c8c:	f000 fdc4 	bl	8004818 <pxPortInitialiseStack>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cb4:	f000 fea2 	bl	80049fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a29      	ldr	r2, [pc, #164]	@ (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cc2:	4b29      	ldr	r3, [pc, #164]	@ (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cca:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd0:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cd8:	f000 fbd4 	bl	8004484 <prvInitialiseTaskLists>
 8003cdc:	e00d      	b.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cde:	4b23      	ldr	r3, [pc, #140]	@ (8003d6c <prvAddNewTaskToReadyList+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce6:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d802      	bhi.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003d24:	441a      	add	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7ff f933 	bl	8002f98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d32:	f000 fe93 	bl	8004a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <prvAddNewTaskToReadyList+0xc0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d207      	bcs.n	8003d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200005f4 	.word	0x200005f4
 8003d68:	200004f4 	.word	0x200004f4
 8003d6c:	20000600 	.word	0x20000600
 8003d70:	20000610 	.word	0x20000610
 8003d74:	200005fc 	.word	0x200005fc
 8003d78:	200004f8 	.word	0x200004f8
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d92:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <vTaskDelay+0x64>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <vTaskDelay+0x32>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	60bb      	str	r3, [r7, #8]
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003db2:	f000 f87d 	bl	8003eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003db6:	2100      	movs	r1, #0
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fcc7 	bl	800474c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dbe:	f000 f885 	bl	8003ecc <xTaskResumeAll>
 8003dc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <vTaskDelay+0x68>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000061c 	.word	0x2000061c
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	@ 0x28
 8003df0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dfa:	463a      	mov	r2, r7
 8003dfc:	1d39      	adds	r1, r7, #4
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fee6 	bl	8000bd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	9202      	str	r2, [sp, #8]
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	460a      	mov	r2, r1
 8003e1a:	491f      	ldr	r1, [pc, #124]	@ (8003e98 <vTaskStartScheduler+0xac>)
 8003e1c:	481f      	ldr	r0, [pc, #124]	@ (8003e9c <vTaskStartScheduler+0xb0>)
 8003e1e:	f7ff fe17 	bl	8003a50 <xTaskCreateStatic>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea0 <vTaskStartScheduler+0xb4>)
 8003e26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <vTaskStartScheduler+0xb4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e001      	b.n	8003e3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d116      	bne.n	8003e6e <vTaskStartScheduler+0x82>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	613b      	str	r3, [r7, #16]
}
 8003e52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <vTaskStartScheduler+0xb8>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <vTaskStartScheduler+0xbc>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <vTaskStartScheduler+0xc0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e68:	f000 fd56 	bl	8004918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e6c:	e00f      	b.n	8003e8e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d10b      	bne.n	8003e8e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60fb      	str	r3, [r7, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <vTaskStartScheduler+0x9e>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	080097d0 	.word	0x080097d0
 8003e9c:	08004455 	.word	0x08004455
 8003ea0:	20000618 	.word	0x20000618
 8003ea4:	20000614 	.word	0x20000614
 8003ea8:	20000600 	.word	0x20000600
 8003eac:	200005f8 	.word	0x200005f8

08003eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <vTaskSuspendAll+0x18>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a03      	ldr	r2, [pc, #12]	@ (8003ec8 <vTaskSuspendAll+0x18>)
 8003ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	2000061c 	.word	0x2000061c

08003ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eda:	4b42      	ldr	r3, [pc, #264]	@ (8003fe4 <xTaskResumeAll+0x118>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <xTaskResumeAll+0x2e>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	603b      	str	r3, [r7, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	e7fd      	b.n	8003ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003efa:	f000 fd7f 	bl	80049fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003efe:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <xTaskResumeAll+0x118>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	4a37      	ldr	r2, [pc, #220]	@ (8003fe4 <xTaskResumeAll+0x118>)
 8003f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f08:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <xTaskResumeAll+0x118>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d161      	bne.n	8003fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f10:	4b35      	ldr	r3, [pc, #212]	@ (8003fe8 <xTaskResumeAll+0x11c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05d      	beq.n	8003fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f18:	e02e      	b.n	8003f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <xTaskResumeAll+0x120>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3318      	adds	r3, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f891 	bl	800304e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff f88c 	bl	800304e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <xTaskResumeAll+0x124>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff0 <xTaskResumeAll+0x124>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <xTaskResumeAll+0x128>)
 8003f56:	441a      	add	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7ff f81a 	bl	8002f98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f68:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <xTaskResumeAll+0x12c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f72:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <xTaskResumeAll+0x130>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f78:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <xTaskResumeAll+0x120>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1cc      	bne.n	8003f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f86:	f000 fb1b 	bl	80045c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <xTaskResumeAll+0x134>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f96:	f000 f837 	bl	8004008 <xTaskIncrementTick>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <xTaskResumeAll+0x130>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f1      	bne.n	8003f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <xTaskResumeAll+0x134>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fb8:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <xTaskResumeAll+0x130>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <xTaskResumeAll+0x138>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd4:	f000 fd42 	bl	8004a5c <vPortExitCritical>

	return xAlreadyYielded;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000061c 	.word	0x2000061c
 8003fe8:	200005f4 	.word	0x200005f4
 8003fec:	200005b4 	.word	0x200005b4
 8003ff0:	200005fc 	.word	0x200005fc
 8003ff4:	200004f8 	.word	0x200004f8
 8003ff8:	200004f4 	.word	0x200004f4
 8003ffc:	20000608 	.word	0x20000608
 8004000:	20000604 	.word	0x20000604
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004012:	4b4f      	ldr	r3, [pc, #316]	@ (8004150 <xTaskIncrementTick+0x148>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 808f 	bne.w	800413a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800401c:	4b4d      	ldr	r3, [pc, #308]	@ (8004154 <xTaskIncrementTick+0x14c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004024:	4a4b      	ldr	r2, [pc, #300]	@ (8004154 <xTaskIncrementTick+0x14c>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d121      	bne.n	8004074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004030:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <xTaskIncrementTick+0x150>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	603b      	str	r3, [r7, #0]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <xTaskIncrementTick+0x46>
 8004052:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <xTaskIncrementTick+0x150>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	4b40      	ldr	r3, [pc, #256]	@ (800415c <xTaskIncrementTick+0x154>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3e      	ldr	r2, [pc, #248]	@ (8004158 <xTaskIncrementTick+0x150>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4a3e      	ldr	r2, [pc, #248]	@ (800415c <xTaskIncrementTick+0x154>)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <xTaskIncrementTick+0x158>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a3c      	ldr	r2, [pc, #240]	@ (8004160 <xTaskIncrementTick+0x158>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	f000 faa6 	bl	80045c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004074:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <xTaskIncrementTick+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d348      	bcc.n	8004110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407e:	4b36      	ldr	r3, [pc, #216]	@ (8004158 <xTaskIncrementTick+0x150>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004088:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <xTaskIncrementTick+0x15c>)
 800408a:	f04f 32ff 	mov.w	r2, #4294967295
 800408e:	601a      	str	r2, [r3, #0]
					break;
 8004090:	e03e      	b.n	8004110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004092:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <xTaskIncrementTick+0x150>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d203      	bcs.n	80040b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <xTaskIncrementTick+0x15c>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040b0:	e02e      	b.n	8004110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe ffc9 	bl	800304e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3318      	adds	r3, #24
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe ffc0 	bl	800304e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	2201      	movs	r2, #1
 80040d4:	409a      	lsls	r2, r3
 80040d6:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <xTaskIncrementTick+0x160>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <xTaskIncrementTick+0x160>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <xTaskIncrementTick+0x164>)
 80040ee:	441a      	add	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe ff4e 	bl	8002f98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <xTaskIncrementTick+0x168>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	429a      	cmp	r2, r3
 8004108:	d3b9      	bcc.n	800407e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410e:	e7b6      	b.n	800407e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <xTaskIncrementTick+0x168>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	4915      	ldr	r1, [pc, #84]	@ (800416c <xTaskIncrementTick+0x164>)
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d901      	bls.n	800412c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800412c:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <xTaskIncrementTick+0x16c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e004      	b.n	8004144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800413a:	4b0f      	ldr	r3, [pc, #60]	@ (8004178 <xTaskIncrementTick+0x170>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <xTaskIncrementTick+0x170>)
 8004142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004144:	697b      	ldr	r3, [r7, #20]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000061c 	.word	0x2000061c
 8004154:	200005f8 	.word	0x200005f8
 8004158:	200005ac 	.word	0x200005ac
 800415c:	200005b0 	.word	0x200005b0
 8004160:	2000060c 	.word	0x2000060c
 8004164:	20000614 	.word	0x20000614
 8004168:	200005fc 	.word	0x200005fc
 800416c:	200004f8 	.word	0x200004f8
 8004170:	200004f4 	.word	0x200004f4
 8004174:	20000608 	.word	0x20000608
 8004178:	20000604 	.word	0x20000604

0800417c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004182:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <vTaskSwitchContext+0xa4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800418a:	4b26      	ldr	r3, [pc, #152]	@ (8004224 <vTaskSwitchContext+0xa8>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004190:	e040      	b.n	8004214 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004192:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <vTaskSwitchContext+0xa8>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004198:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <vTaskSwitchContext+0xac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	f1c3 031f 	rsb	r3, r3, #31
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	491f      	ldr	r1, [pc, #124]	@ (800422c <vTaskSwitchContext+0xb0>)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <vTaskSwitchContext+0x5e>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <vTaskSwitchContext+0x5a>
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a11      	ldr	r2, [pc, #68]	@ (800422c <vTaskSwitchContext+0xb0>)
 80041e6:	4413      	add	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3308      	adds	r3, #8
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d104      	bne.n	800420a <vTaskSwitchContext+0x8e>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <vTaskSwitchContext+0xb4>)
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000061c 	.word	0x2000061c
 8004224:	20000608 	.word	0x20000608
 8004228:	200005fc 	.word	0x200005fc
 800422c:	200004f8 	.word	0x200004f8
 8004230:	200004f4 	.word	0x200004f4

08004234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800425c:	4b07      	ldr	r3, [pc, #28]	@ (800427c <vTaskPlaceOnEventList+0x48>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3318      	adds	r3, #24
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fe feba 	bl	8002fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800426a:	2101      	movs	r1, #1
 800426c:	6838      	ldr	r0, [r7, #0]
 800426e:	f000 fa6d 	bl	800474c <prvAddCurrentTaskToDelayedList>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200004f4 	.word	0x200004f4

08004280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60fb      	str	r3, [r7, #12]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3318      	adds	r3, #24
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fecb 	bl	800304e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <xTaskRemoveFromEventList+0xb0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11c      	bne.n	80042fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fec2 	bl	800304e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	2201      	movs	r2, #1
 80042d0:	409a      	lsls	r2, r3
 80042d2:	4b18      	ldr	r3, [pc, #96]	@ (8004334 <xTaskRemoveFromEventList+0xb4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <xTaskRemoveFromEventList+0xb4>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <xTaskRemoveFromEventList+0xb8>)
 80042ea:	441a      	add	r2, r3
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7fe fe50 	bl	8002f98 <vListInsertEnd>
 80042f8:	e005      	b.n	8004306 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3318      	adds	r3, #24
 80042fe:	4619      	mov	r1, r3
 8004300:	480e      	ldr	r0, [pc, #56]	@ (800433c <xTaskRemoveFromEventList+0xbc>)
 8004302:	f7fe fe49 	bl	8002f98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <xTaskRemoveFromEventList+0xc0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	429a      	cmp	r2, r3
 8004312:	d905      	bls.n	8004320 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004318:	4b0a      	ldr	r3, [pc, #40]	@ (8004344 <xTaskRemoveFromEventList+0xc4>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e001      	b.n	8004324 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	2000061c 	.word	0x2000061c
 8004334:	200005fc 	.word	0x200005fc
 8004338:	200004f8 	.word	0x200004f8
 800433c:	200005b4 	.word	0x200005b4
 8004340:	200004f4 	.word	0x200004f4
 8004344:	20000608 	.word	0x20000608

08004348 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004350:	4b06      	ldr	r3, [pc, #24]	@ (800436c <vTaskInternalSetTimeOutState+0x24>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <vTaskInternalSetTimeOutState+0x28>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	605a      	str	r2, [r3, #4]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000060c 	.word	0x2000060c
 8004370:	200005f8 	.word	0x200005f8

08004374 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	613b      	str	r3, [r7, #16]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60fb      	str	r3, [r7, #12]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80043ba:	f000 fb1f 	bl	80049fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <xTaskCheckForTimeOut+0xc0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d102      	bne.n	80043de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e023      	b.n	8004426 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <xTaskCheckForTimeOut+0xc4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d007      	beq.n	80043fa <xTaskCheckForTimeOut+0x86>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e015      	b.n	8004426 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d20b      	bcs.n	800441c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff99 	bl	8004348 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e004      	b.n	8004426 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f000 fb19 	bl	8004a5c <vPortExitCritical>

	return xReturn;
 800442a:	69fb      	ldr	r3, [r7, #28]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	200005f8 	.word	0x200005f8
 8004438:	2000060c 	.word	0x2000060c

0800443c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004440:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <vTaskMissedYield+0x14>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000608 	.word	0x20000608

08004454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800445c:	f000 f852 	bl	8004504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004460:	4b06      	ldr	r3, [pc, #24]	@ (800447c <prvIdleTask+0x28>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d9f9      	bls.n	800445c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <prvIdleTask+0x2c>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004478:	e7f0      	b.n	800445c <prvIdleTask+0x8>
 800447a:	bf00      	nop
 800447c:	200004f8 	.word	0x200004f8
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e00c      	b.n	80044aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4a12      	ldr	r2, [pc, #72]	@ (80044e4 <prvInitialiseTaskLists+0x60>)
 800449c:	4413      	add	r3, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fd4f 	bl	8002f42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3301      	adds	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d9ef      	bls.n	8004490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b0:	480d      	ldr	r0, [pc, #52]	@ (80044e8 <prvInitialiseTaskLists+0x64>)
 80044b2:	f7fe fd46 	bl	8002f42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044b6:	480d      	ldr	r0, [pc, #52]	@ (80044ec <prvInitialiseTaskLists+0x68>)
 80044b8:	f7fe fd43 	bl	8002f42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044bc:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <prvInitialiseTaskLists+0x6c>)
 80044be:	f7fe fd40 	bl	8002f42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044c2:	480c      	ldr	r0, [pc, #48]	@ (80044f4 <prvInitialiseTaskLists+0x70>)
 80044c4:	f7fe fd3d 	bl	8002f42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c8:	480b      	ldr	r0, [pc, #44]	@ (80044f8 <prvInitialiseTaskLists+0x74>)
 80044ca:	f7fe fd3a 	bl	8002f42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <prvInitialiseTaskLists+0x78>)
 80044d0:	4a05      	ldr	r2, [pc, #20]	@ (80044e8 <prvInitialiseTaskLists+0x64>)
 80044d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004500 <prvInitialiseTaskLists+0x7c>)
 80044d6:	4a05      	ldr	r2, [pc, #20]	@ (80044ec <prvInitialiseTaskLists+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200004f8 	.word	0x200004f8
 80044e8:	20000584 	.word	0x20000584
 80044ec:	20000598 	.word	0x20000598
 80044f0:	200005b4 	.word	0x200005b4
 80044f4:	200005c8 	.word	0x200005c8
 80044f8:	200005e0 	.word	0x200005e0
 80044fc:	200005ac 	.word	0x200005ac
 8004500:	200005b0 	.word	0x200005b0

08004504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800450a:	e019      	b.n	8004540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800450c:	f000 fa76 	bl	80049fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <prvCheckTasksWaitingTermination+0x50>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fd96 	bl	800304e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004522:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <prvCheckTasksWaitingTermination+0x54>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a0b      	ldr	r2, [pc, #44]	@ (8004558 <prvCheckTasksWaitingTermination+0x54>)
 800452a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <prvCheckTasksWaitingTermination+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <prvCheckTasksWaitingTermination+0x58>)
 8004534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004536:	f000 fa91 	bl	8004a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f810 	bl	8004560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <prvCheckTasksWaitingTermination+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e1      	bne.n	800450c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200005c8 	.word	0x200005c8
 8004558:	200005f4 	.word	0x200005f4
 800455c:	200005dc 	.word	0x200005dc

08004560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc10 	bl	8004d9c <vPortFree>
				vPortFree( pxTCB );
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fc0d 	bl	8004d9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004582:	e019      	b.n	80045b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800458a:	2b01      	cmp	r3, #1
 800458c:	d103      	bne.n	8004596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fc04 	bl	8004d9c <vPortFree>
	}
 8004594:	e010      	b.n	80045b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800459c:	2b02      	cmp	r3, #2
 800459e:	d00b      	beq.n	80045b8 <prvDeleteTCB+0x58>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <prvDeleteTCB+0x54>
	}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c6:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <prvResetNextTaskUnblockTime+0x38>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <prvResetNextTaskUnblockTime+0x3c>)
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d8:	e008      	b.n	80045ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <prvResetNextTaskUnblockTime+0x38>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <prvResetNextTaskUnblockTime+0x3c>)
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	200005ac 	.word	0x200005ac
 80045fc:	20000614 	.word	0x20000614

08004600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <xTaskGetSchedulerState+0x34>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800460e:	2301      	movs	r3, #1
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	e008      	b.n	8004626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <xTaskGetSchedulerState+0x38>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800461c:	2302      	movs	r3, #2
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e001      	b.n	8004626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004626:	687b      	ldr	r3, [r7, #4]
	}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000600 	.word	0x20000600
 8004638:	2000061c 	.word	0x2000061c

0800463c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d070      	beq.n	8004734 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <xTaskPriorityDisinherit+0x104>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d00b      	beq.n	8004674 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	60fb      	str	r3, [r7, #12]
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	e7fd      	b.n	8004670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60bb      	str	r3, [r7, #8]
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004698:	1e5a      	subs	r2, r3, #1
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d044      	beq.n	8004734 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d140      	bne.n	8004734 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fcc9 	bl	800304e <uxListRemove>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	491f      	ldr	r1, [pc, #124]	@ (8004744 <xTaskPriorityDisinherit+0x108>)
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xTaskPriorityDisinherit+0xb2>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	2201      	movs	r2, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43da      	mvns	r2, r3
 80046e4:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <xTaskPriorityDisinherit+0x10c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4013      	ands	r3, r2
 80046ea:	4a17      	ldr	r2, [pc, #92]	@ (8004748 <xTaskPriorityDisinherit+0x10c>)
 80046ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	f1c3 0207 	rsb	r2, r3, #7
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <xTaskPriorityDisinherit+0x10c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	4a0d      	ldr	r2, [pc, #52]	@ (8004748 <xTaskPriorityDisinherit+0x10c>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <xTaskPriorityDisinherit+0x108>)
 8004722:	441a      	add	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe fc34 	bl	8002f98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004734:	697b      	ldr	r3, [r7, #20]
	}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200004f4 	.word	0x200004f4
 8004744:	200004f8 	.word	0x200004f8
 8004748:	200005fc 	.word	0x200005fc

0800474c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004756:	4b29      	ldr	r3, [pc, #164]	@ (80047fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800475c:	4b28      	ldr	r3, [pc, #160]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3304      	adds	r3, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fc73 	bl	800304e <uxListRemove>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800476e:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	2201      	movs	r2, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <prvAddCurrentTaskToDelayedList+0xb8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4013      	ands	r3, r2
 8004782:	4a20      	ldr	r2, [pc, #128]	@ (8004804 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004784:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d10a      	bne.n	80047a4 <prvAddCurrentTaskToDelayedList+0x58>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004794:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	481a      	ldr	r0, [pc, #104]	@ (8004808 <prvAddCurrentTaskToDelayedList+0xbc>)
 800479e:	f7fe fbfb 	bl	8002f98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047a2:	e026      	b.n	80047f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047ac:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d209      	bcs.n	80047d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <prvAddCurrentTaskToDelayedList+0xc0>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe fc08 	bl	8002fde <vListInsert>
}
 80047ce:	e010      	b.n	80047f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe fbfe 	bl	8002fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d202      	bcs.n	80047f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047ec:	4a09      	ldr	r2, [pc, #36]	@ (8004814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6013      	str	r3, [r2, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200005f8 	.word	0x200005f8
 8004800:	200004f4 	.word	0x200004f4
 8004804:	200005fc 	.word	0x200005fc
 8004808:	200005e0 	.word	0x200005e0
 800480c:	200005b0 	.word	0x200005b0
 8004810:	200005ac 	.word	0x200005ac
 8004814:	20000614 	.word	0x20000614

08004818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b04      	subs	r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b04      	subs	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b04      	subs	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004848:	4a08      	ldr	r2, [pc, #32]	@ (800486c <pxPortInitialiseStack+0x54>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b14      	subs	r3, #20
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b20      	subs	r3, #32
 800485e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	08004871 	.word	0x08004871

08004870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <prvTaskExitError+0x54>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d00b      	beq.n	800489c <prvTaskExitError+0x2c>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	60fb      	str	r3, [r7, #12]
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	e7fd      	b.n	8004898 <prvTaskExitError+0x28>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60bb      	str	r3, [r7, #8]
}
 80048ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048b0:	bf00      	nop
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0fc      	beq.n	80048b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	2000000c 	.word	0x2000000c
	...

080048d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80048ee:	4770      	bx	lr

080048f0 <pxCurrentTCBConst2>:
 80048f0:	200004f4 	.word	0x200004f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048f8:	4806      	ldr	r0, [pc, #24]	@ (8004914 <prvPortStartFirstTask+0x1c>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f380 8808 	msr	MSP, r0
 8004902:	b662      	cpsie	i
 8004904:	b661      	cpsie	f
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	df00      	svc	0
 8004910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004912:	bf00      	nop
 8004914:	e000ed08 	.word	0xe000ed08

08004918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491e:	4b32      	ldr	r3, [pc, #200]	@ (80049e8 <xPortStartScheduler+0xd0>)
 8004920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	@ 0xff
 800492e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b2a      	ldr	r3, [pc, #168]	@ (80049ec <xPortStartScheduler+0xd4>)
 8004944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <xPortStartScheduler+0xd8>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494c:	e009      	b.n	8004962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800494e:	4b28      	ldr	r3, [pc, #160]	@ (80049f0 <xPortStartScheduler+0xd8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a26      	ldr	r2, [pc, #152]	@ (80049f0 <xPortStartScheduler+0xd8>)
 8004956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b80      	cmp	r3, #128	@ 0x80
 800496c:	d0ef      	beq.n	800494e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496e:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <xPortStartScheduler+0xd8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	d00b      	beq.n	8004992 <xPortStartScheduler+0x7a>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004992:	4b17      	ldr	r3, [pc, #92]	@ (80049f0 <xPortStartScheduler+0xd8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	4a15      	ldr	r2, [pc, #84]	@ (80049f0 <xPortStartScheduler+0xd8>)
 800499a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800499c:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <xPortStartScheduler+0xd8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049a4:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <xPortStartScheduler+0xd8>)
 80049a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <xPortStartScheduler+0xdc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0f      	ldr	r2, [pc, #60]	@ (80049f4 <xPortStartScheduler+0xdc>)
 80049b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <xPortStartScheduler+0xdc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <xPortStartScheduler+0xdc>)
 80049c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c8:	f000 f8b8 	bl	8004b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <xPortStartScheduler+0xe0>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049d2:	f7ff ff91 	bl	80048f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049d6:	f7ff fbd1 	bl	800417c <vTaskSwitchContext>
	prvTaskExitError();
 80049da:	f7ff ff49 	bl	8004870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	e000e400 	.word	0xe000e400
 80049ec:	20000620 	.word	0x20000620
 80049f0:	20000624 	.word	0x20000624
 80049f4:	e000ed20 	.word	0xe000ed20
 80049f8:	2000000c 	.word	0x2000000c

080049fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	607b      	str	r3, [r7, #4]
}
 8004a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <vPortEnterCritical+0x58>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004a54 <vPortEnterCritical+0x58>)
 8004a1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a20:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <vPortEnterCritical+0x58>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d110      	bne.n	8004a4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <vPortEnterCritical+0x5c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <vPortEnterCritical+0x4e>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	603b      	str	r3, [r7, #0]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <vPortEnterCritical+0x4a>
	}
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <vPortExitCritical+0x50>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <vPortExitCritical+0x26>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	607b      	str	r3, [r7, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <vPortExitCritical+0x50>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <vPortExitCritical+0x50>)
 8004a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <vPortExitCritical+0x50>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <vPortExitCritical+0x44>
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f383 8811 	msr	BASEPRI, r3
}
 8004a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ac0:	6010      	str	r0, [r2, #0]
 8004ac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ac6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004aca:	f380 8811 	msr	BASEPRI, r0
 8004ace:	f7ff fb55 	bl	800417c <vTaskSwitchContext>
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ae6:	f380 8809 	msr	PSP, r0
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	4770      	bx	lr

08004af0 <pxCurrentTCBConst>:
 8004af0:	200004f4 	.word	0x200004f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
}
 8004b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f7ff fa79 	bl	8004008 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <SysTick_Handler+0x40>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f383 8811 	msr	BASEPRI, r3
}
 8004b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <vPortSetupTimerInterrupt+0x30>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b46:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <vPortSetupTimerInterrupt+0x38>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <vPortSetupTimerInterrupt+0x3c>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a08      	ldr	r2, [pc, #32]	@ (8004b7c <vPortSetupTimerInterrupt+0x40>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <vPortSetupTimerInterrupt+0x30>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	e000e010 	.word	0xe000e010
 8004b70:	e000e018 	.word	0xe000e018
 8004b74:	20000000 	.word	0x20000000
 8004b78:	10624dd3 	.word	0x10624dd3
 8004b7c:	e000e014 	.word	0xe000e014

08004b80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b86:	f3ef 8305 	mrs	r3, IPSR
 8004b8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d915      	bls.n	8004bbe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b92:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <vPortValidateInterruptPriority+0x70>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b9c:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <vPortValidateInterruptPriority+0x74>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	7afa      	ldrb	r2, [r7, #11]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d20b      	bcs.n	8004bbe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	607b      	str	r3, [r7, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <vPortValidateInterruptPriority+0x78>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <vPortValidateInterruptPriority+0x7c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d90b      	bls.n	8004be6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vPortValidateInterruptPriority+0x62>
	}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	e000e3f0 	.word	0xe000e3f0
 8004bf4:	20000620 	.word	0x20000620
 8004bf8:	e000ed0c 	.word	0xe000ed0c
 8004bfc:	20000624 	.word	0x20000624

08004c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c0c:	f7ff f950 	bl	8003eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c10:	4b5c      	ldr	r3, [pc, #368]	@ (8004d84 <pvPortMalloc+0x184>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c18:	f000 f924 	bl	8004e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004d88 <pvPortMalloc+0x188>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 8095 	bne.w	8004d54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01e      	beq.n	8004c6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c30:	2208      	movs	r2, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d015      	beq.n	8004c6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f023 0307 	bic.w	r3, r3, #7
 8004c48:	3308      	adds	r3, #8
 8004c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <pvPortMalloc+0x6e>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	617b      	str	r3, [r7, #20]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d06f      	beq.n	8004d54 <pvPortMalloc+0x154>
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <pvPortMalloc+0x18c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d86a      	bhi.n	8004d54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c7e:	4b44      	ldr	r3, [pc, #272]	@ (8004d90 <pvPortMalloc+0x190>)
 8004c80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c82:	4b43      	ldr	r3, [pc, #268]	@ (8004d90 <pvPortMalloc+0x190>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c88:	e004      	b.n	8004c94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d903      	bls.n	8004ca6 <pvPortMalloc+0xa6>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f1      	bne.n	8004c8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ca6:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <pvPortMalloc+0x184>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d051      	beq.n	8004d54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	4413      	add	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad2      	subs	r2, r2, r3
 8004cca:	2308      	movs	r3, #8
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d920      	bls.n	8004d14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <pvPortMalloc+0xfc>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	613b      	str	r3, [r7, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	1ad2      	subs	r2, r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d0e:	69b8      	ldr	r0, [r7, #24]
 8004d10:	f000 f90a 	bl	8004f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <pvPortMalloc+0x18c>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <pvPortMalloc+0x18c>)
 8004d20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d22:	4b1a      	ldr	r3, [pc, #104]	@ (8004d8c <pvPortMalloc+0x18c>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <pvPortMalloc+0x194>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d203      	bcs.n	8004d36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d2e:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <pvPortMalloc+0x18c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <pvPortMalloc+0x194>)
 8004d34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <pvPortMalloc+0x188>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d4a:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <pvPortMalloc+0x198>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a11      	ldr	r2, [pc, #68]	@ (8004d98 <pvPortMalloc+0x198>)
 8004d52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d54:	f7ff f8ba 	bl	8003ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <pvPortMalloc+0x17a>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	60fb      	str	r3, [r7, #12]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <pvPortMalloc+0x176>
	return pvReturn;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3728      	adds	r7, #40	@ 0x28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20001230 	.word	0x20001230
 8004d88:	20001244 	.word	0x20001244
 8004d8c:	20001234 	.word	0x20001234
 8004d90:	20001228 	.word	0x20001228
 8004d94:	20001238 	.word	0x20001238
 8004d98:	2000123c 	.word	0x2000123c

08004d9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04f      	beq.n	8004e4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dae:	2308      	movs	r3, #8
 8004db0:	425b      	negs	r3, r3
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4b25      	ldr	r3, [pc, #148]	@ (8004e58 <vPortFree+0xbc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <vPortFree+0x46>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60fb      	str	r3, [r7, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <vPortFree+0x66>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60bb      	str	r3, [r7, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b14      	ldr	r3, [pc, #80]	@ (8004e58 <vPortFree+0xbc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11a      	bne.n	8004e4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <vPortFree+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e28:	f7ff f842 	bl	8003eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <vPortFree+0xc0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <vPortFree+0xc0>)
 8004e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e3a:	6938      	ldr	r0, [r7, #16]
 8004e3c:	f000 f874 	bl	8004f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <vPortFree+0xc4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a06      	ldr	r2, [pc, #24]	@ (8004e60 <vPortFree+0xc4>)
 8004e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e4a:	f7ff f83f 	bl	8003ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20001244 	.word	0x20001244
 8004e5c:	20001234 	.word	0x20001234
 8004e60:	20001240 	.word	0x20001240

08004e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e70:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <prvHeapInit+0xac>)
 8004e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3307      	adds	r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <prvHeapInit+0xac>)
 8004e94:	4413      	add	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <prvHeapInit+0xb0>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <prvHeapInit+0xb0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <prvHeapInit+0xb4>)
 8004ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <prvHeapInit+0xb4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <prvHeapInit+0xb4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <prvHeapInit+0xb4>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8004f1c <prvHeapInit+0xb8>)
 8004ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a09      	ldr	r2, [pc, #36]	@ (8004f20 <prvHeapInit+0xbc>)
 8004efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <prvHeapInit+0xc0>)
 8004efe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000628 	.word	0x20000628
 8004f14:	20001228 	.word	0x20001228
 8004f18:	20001230 	.word	0x20001230
 8004f1c:	20001238 	.word	0x20001238
 8004f20:	20001234 	.word	0x20001234
 8004f24:	20001244 	.word	0x20001244

08004f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f30:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <prvInsertBlockIntoFreeList+0xa8>)
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e002      	b.n	8004f3c <prvInsertBlockIntoFreeList+0x14>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d8f7      	bhi.n	8004f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d108      	bne.n	8004f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	441a      	add	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d118      	bne.n	8004fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <prvInsertBlockIntoFreeList+0xac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d00d      	beq.n	8004fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e008      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <prvInsertBlockIntoFreeList+0xac>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e003      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d002      	beq.n	8004fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	20001228 	.word	0x20001228
 8004fd4:	20001230 	.word	0x20001230

08004fd8 <__cvt>:
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fde:	461d      	mov	r5, r3
 8004fe0:	bfbb      	ittet	lt
 8004fe2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004fe6:	461d      	movlt	r5, r3
 8004fe8:	2300      	movge	r3, #0
 8004fea:	232d      	movlt	r3, #45	@ 0x2d
 8004fec:	b088      	sub	sp, #32
 8004fee:	4614      	mov	r4, r2
 8004ff0:	bfb8      	it	lt
 8004ff2:	4614      	movlt	r4, r2
 8004ff4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ff6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ff8:	7013      	strb	r3, [r2, #0]
 8004ffa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005000:	f023 0820 	bic.w	r8, r3, #32
 8005004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005008:	d005      	beq.n	8005016 <__cvt+0x3e>
 800500a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800500e:	d100      	bne.n	8005012 <__cvt+0x3a>
 8005010:	3601      	adds	r6, #1
 8005012:	2302      	movs	r3, #2
 8005014:	e000      	b.n	8005018 <__cvt+0x40>
 8005016:	2303      	movs	r3, #3
 8005018:	aa07      	add	r2, sp, #28
 800501a:	9204      	str	r2, [sp, #16]
 800501c:	aa06      	add	r2, sp, #24
 800501e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005022:	e9cd 3600 	strd	r3, r6, [sp]
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f001 f8c1 	bl	80061b0 <_dtoa_r>
 800502e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005032:	4607      	mov	r7, r0
 8005034:	d119      	bne.n	800506a <__cvt+0x92>
 8005036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005038:	07db      	lsls	r3, r3, #31
 800503a:	d50e      	bpl.n	800505a <__cvt+0x82>
 800503c:	eb00 0906 	add.w	r9, r0, r6
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800504c:	b108      	cbz	r0, 8005052 <__cvt+0x7a>
 800504e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005052:	2230      	movs	r2, #48	@ 0x30
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	454b      	cmp	r3, r9
 8005058:	d31e      	bcc.n	8005098 <__cvt+0xc0>
 800505a:	4638      	mov	r0, r7
 800505c:	9b07      	ldr	r3, [sp, #28]
 800505e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005060:	1bdb      	subs	r3, r3, r7
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	b008      	add	sp, #32
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800506e:	eb00 0906 	add.w	r9, r0, r6
 8005072:	d1e5      	bne.n	8005040 <__cvt+0x68>
 8005074:	7803      	ldrb	r3, [r0, #0]
 8005076:	2b30      	cmp	r3, #48	@ 0x30
 8005078:	d10a      	bne.n	8005090 <__cvt+0xb8>
 800507a:	2200      	movs	r2, #0
 800507c:	2300      	movs	r3, #0
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8005086:	b918      	cbnz	r0, 8005090 <__cvt+0xb8>
 8005088:	f1c6 0601 	rsb	r6, r6, #1
 800508c:	f8ca 6000 	str.w	r6, [sl]
 8005090:	f8da 3000 	ldr.w	r3, [sl]
 8005094:	4499      	add	r9, r3
 8005096:	e7d3      	b.n	8005040 <__cvt+0x68>
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	9107      	str	r1, [sp, #28]
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e7d9      	b.n	8005054 <__cvt+0x7c>

080050a0 <__exponent>:
 80050a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a2:	2900      	cmp	r1, #0
 80050a4:	bfb6      	itet	lt
 80050a6:	232d      	movlt	r3, #45	@ 0x2d
 80050a8:	232b      	movge	r3, #43	@ 0x2b
 80050aa:	4249      	neglt	r1, r1
 80050ac:	2909      	cmp	r1, #9
 80050ae:	7002      	strb	r2, [r0, #0]
 80050b0:	7043      	strb	r3, [r0, #1]
 80050b2:	dd29      	ble.n	8005108 <__exponent+0x68>
 80050b4:	f10d 0307 	add.w	r3, sp, #7
 80050b8:	461d      	mov	r5, r3
 80050ba:	270a      	movs	r7, #10
 80050bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80050c0:	461a      	mov	r2, r3
 80050c2:	fb07 1416 	mls	r4, r7, r6, r1
 80050c6:	3430      	adds	r4, #48	@ 0x30
 80050c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050cc:	460c      	mov	r4, r1
 80050ce:	2c63      	cmp	r4, #99	@ 0x63
 80050d0:	4631      	mov	r1, r6
 80050d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050d6:	dcf1      	bgt.n	80050bc <__exponent+0x1c>
 80050d8:	3130      	adds	r1, #48	@ 0x30
 80050da:	1e94      	subs	r4, r2, #2
 80050dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050e0:	4623      	mov	r3, r4
 80050e2:	1c41      	adds	r1, r0, #1
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	d30a      	bcc.n	80050fe <__exponent+0x5e>
 80050e8:	f10d 0309 	add.w	r3, sp, #9
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	42ac      	cmp	r4, r5
 80050f0:	bf88      	it	hi
 80050f2:	2300      	movhi	r3, #0
 80050f4:	3302      	adds	r3, #2
 80050f6:	4403      	add	r3, r0
 80050f8:	1a18      	subs	r0, r3, r0
 80050fa:	b003      	add	sp, #12
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005102:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005106:	e7ed      	b.n	80050e4 <__exponent+0x44>
 8005108:	2330      	movs	r3, #48	@ 0x30
 800510a:	3130      	adds	r1, #48	@ 0x30
 800510c:	7083      	strb	r3, [r0, #2]
 800510e:	70c1      	strb	r1, [r0, #3]
 8005110:	1d03      	adds	r3, r0, #4
 8005112:	e7f1      	b.n	80050f8 <__exponent+0x58>

08005114 <_printf_float>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	b091      	sub	sp, #68	@ 0x44
 800511a:	460c      	mov	r4, r1
 800511c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005120:	4616      	mov	r6, r2
 8005122:	461f      	mov	r7, r3
 8005124:	4605      	mov	r5, r0
 8005126:	f000 ff21 	bl	8005f6c <_localeconv_r>
 800512a:	6803      	ldr	r3, [r0, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	9308      	str	r3, [sp, #32]
 8005130:	f7fb f80e 	bl	8000150 <strlen>
 8005134:	2300      	movs	r3, #0
 8005136:	930e      	str	r3, [sp, #56]	@ 0x38
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	9009      	str	r0, [sp, #36]	@ 0x24
 800513e:	3307      	adds	r3, #7
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	f103 0208 	add.w	r2, r3, #8
 8005148:	f894 a018 	ldrb.w	sl, [r4, #24]
 800514c:	f8d4 b000 	ldr.w	fp, [r4]
 8005150:	f8c8 2000 	str.w	r2, [r8]
 8005154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005158:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800515c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800515e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005162:	f04f 32ff 	mov.w	r2, #4294967295
 8005166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800516a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800516e:	4b9c      	ldr	r3, [pc, #624]	@ (80053e0 <_printf_float+0x2cc>)
 8005170:	f7fb fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8005174:	bb70      	cbnz	r0, 80051d4 <_printf_float+0xc0>
 8005176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800517a:	f04f 32ff 	mov.w	r2, #4294967295
 800517e:	4b98      	ldr	r3, [pc, #608]	@ (80053e0 <_printf_float+0x2cc>)
 8005180:	f7fb fc26 	bl	80009d0 <__aeabi_dcmple>
 8005184:	bb30      	cbnz	r0, 80051d4 <_printf_float+0xc0>
 8005186:	2200      	movs	r2, #0
 8005188:	2300      	movs	r3, #0
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f7fb fc15 	bl	80009bc <__aeabi_dcmplt>
 8005192:	b110      	cbz	r0, 800519a <_printf_float+0x86>
 8005194:	232d      	movs	r3, #45	@ 0x2d
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800519a:	4a92      	ldr	r2, [pc, #584]	@ (80053e4 <_printf_float+0x2d0>)
 800519c:	4b92      	ldr	r3, [pc, #584]	@ (80053e8 <_printf_float+0x2d4>)
 800519e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051a2:	bf8c      	ite	hi
 80051a4:	4690      	movhi	r8, r2
 80051a6:	4698      	movls	r8, r3
 80051a8:	2303      	movs	r3, #3
 80051aa:	f04f 0900 	mov.w	r9, #0
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	f02b 0304 	bic.w	r3, fp, #4
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	4633      	mov	r3, r6
 80051b8:	4621      	mov	r1, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	9700      	str	r7, [sp, #0]
 80051be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80051c0:	f000 f9d4 	bl	800556c <_printf_common>
 80051c4:	3001      	adds	r0, #1
 80051c6:	f040 8090 	bne.w	80052ea <_printf_float+0x1d6>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	b011      	add	sp, #68	@ 0x44
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fc16 	bl	8000a0c <__aeabi_dcmpun>
 80051e0:	b148      	cbz	r0, 80051f6 <_printf_float+0xe2>
 80051e2:	464b      	mov	r3, r9
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfb8      	it	lt
 80051e8:	232d      	movlt	r3, #45	@ 0x2d
 80051ea:	4a80      	ldr	r2, [pc, #512]	@ (80053ec <_printf_float+0x2d8>)
 80051ec:	bfb8      	it	lt
 80051ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051f2:	4b7f      	ldr	r3, [pc, #508]	@ (80053f0 <_printf_float+0x2dc>)
 80051f4:	e7d3      	b.n	800519e <_printf_float+0x8a>
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	d13f      	bne.n	8005280 <_printf_float+0x16c>
 8005200:	2306      	movs	r3, #6
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	9206      	str	r2, [sp, #24]
 800520e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005210:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005214:	aa0d      	add	r2, sp, #52	@ 0x34
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800521c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	4642      	mov	r2, r8
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4628      	mov	r0, r5
 8005228:	464b      	mov	r3, r9
 800522a:	910a      	str	r1, [sp, #40]	@ 0x28
 800522c:	f7ff fed4 	bl	8004fd8 <__cvt>
 8005230:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005232:	4680      	mov	r8, r0
 8005234:	2947      	cmp	r1, #71	@ 0x47
 8005236:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005238:	d128      	bne.n	800528c <_printf_float+0x178>
 800523a:	1cc8      	adds	r0, r1, #3
 800523c:	db02      	blt.n	8005244 <_printf_float+0x130>
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	4299      	cmp	r1, r3
 8005242:	dd40      	ble.n	80052c6 <_printf_float+0x1b2>
 8005244:	f1aa 0a02 	sub.w	sl, sl, #2
 8005248:	fa5f fa8a 	uxtb.w	sl, sl
 800524c:	4652      	mov	r2, sl
 800524e:	3901      	subs	r1, #1
 8005250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005254:	910d      	str	r1, [sp, #52]	@ 0x34
 8005256:	f7ff ff23 	bl	80050a0 <__exponent>
 800525a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800525c:	4681      	mov	r9, r0
 800525e:	1813      	adds	r3, r2, r0
 8005260:	2a01      	cmp	r2, #1
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	dc02      	bgt.n	800526c <_printf_float+0x158>
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	07d2      	lsls	r2, r2, #31
 800526a:	d501      	bpl.n	8005270 <_printf_float+0x15c>
 800526c:	3301      	adds	r3, #1
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005274:	2b00      	cmp	r3, #0
 8005276:	d09e      	beq.n	80051b6 <_printf_float+0xa2>
 8005278:	232d      	movs	r3, #45	@ 0x2d
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800527e:	e79a      	b.n	80051b6 <_printf_float+0xa2>
 8005280:	2947      	cmp	r1, #71	@ 0x47
 8005282:	d1bf      	bne.n	8005204 <_printf_float+0xf0>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1bd      	bne.n	8005204 <_printf_float+0xf0>
 8005288:	2301      	movs	r3, #1
 800528a:	e7ba      	b.n	8005202 <_printf_float+0xee>
 800528c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005290:	d9dc      	bls.n	800524c <_printf_float+0x138>
 8005292:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005296:	d118      	bne.n	80052ca <_printf_float+0x1b6>
 8005298:	2900      	cmp	r1, #0
 800529a:	6863      	ldr	r3, [r4, #4]
 800529c:	dd0b      	ble.n	80052b6 <_printf_float+0x1a2>
 800529e:	6121      	str	r1, [r4, #16]
 80052a0:	b913      	cbnz	r3, 80052a8 <_printf_float+0x194>
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	07d0      	lsls	r0, r2, #31
 80052a6:	d502      	bpl.n	80052ae <_printf_float+0x19a>
 80052a8:	3301      	adds	r3, #1
 80052aa:	440b      	add	r3, r1
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	f04f 0900 	mov.w	r9, #0
 80052b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052b4:	e7dc      	b.n	8005270 <_printf_float+0x15c>
 80052b6:	b913      	cbnz	r3, 80052be <_printf_float+0x1aa>
 80052b8:	6822      	ldr	r2, [r4, #0]
 80052ba:	07d2      	lsls	r2, r2, #31
 80052bc:	d501      	bpl.n	80052c2 <_printf_float+0x1ae>
 80052be:	3302      	adds	r3, #2
 80052c0:	e7f4      	b.n	80052ac <_printf_float+0x198>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7f2      	b.n	80052ac <_printf_float+0x198>
 80052c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052cc:	4299      	cmp	r1, r3
 80052ce:	db05      	blt.n	80052dc <_printf_float+0x1c8>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	6121      	str	r1, [r4, #16]
 80052d4:	07d8      	lsls	r0, r3, #31
 80052d6:	d5ea      	bpl.n	80052ae <_printf_float+0x19a>
 80052d8:	1c4b      	adds	r3, r1, #1
 80052da:	e7e7      	b.n	80052ac <_printf_float+0x198>
 80052dc:	2900      	cmp	r1, #0
 80052de:	bfcc      	ite	gt
 80052e0:	2201      	movgt	r2, #1
 80052e2:	f1c1 0202 	rsble	r2, r1, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	e7e0      	b.n	80052ac <_printf_float+0x198>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	055a      	lsls	r2, r3, #21
 80052ee:	d407      	bmi.n	8005300 <_printf_float+0x1ec>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	4642      	mov	r2, r8
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	d12b      	bne.n	8005356 <_printf_float+0x242>
 80052fe:	e764      	b.n	80051ca <_printf_float+0xb6>
 8005300:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005304:	f240 80dc 	bls.w	80054c0 <_printf_float+0x3ac>
 8005308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	f7fb fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005314:	2800      	cmp	r0, #0
 8005316:	d033      	beq.n	8005380 <_printf_float+0x26c>
 8005318:	2301      	movs	r3, #1
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	4a35      	ldr	r2, [pc, #212]	@ (80053f4 <_printf_float+0x2e0>)
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f af51 	beq.w	80051ca <_printf_float+0xb6>
 8005328:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800532c:	4543      	cmp	r3, r8
 800532e:	db02      	blt.n	8005336 <_printf_float+0x222>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07d8      	lsls	r0, r3, #31
 8005334:	d50f      	bpl.n	8005356 <_printf_float+0x242>
 8005336:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	f43f af42 	beq.w	80051ca <_printf_float+0xb6>
 8005346:	f04f 0900 	mov.w	r9, #0
 800534a:	f108 38ff 	add.w	r8, r8, #4294967295
 800534e:	f104 0a1a 	add.w	sl, r4, #26
 8005352:	45c8      	cmp	r8, r9
 8005354:	dc09      	bgt.n	800536a <_printf_float+0x256>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	f100 8102 	bmi.w	8005562 <_printf_float+0x44e>
 800535e:	68e0      	ldr	r0, [r4, #12]
 8005360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005362:	4298      	cmp	r0, r3
 8005364:	bfb8      	it	lt
 8005366:	4618      	movlt	r0, r3
 8005368:	e731      	b.n	80051ce <_printf_float+0xba>
 800536a:	2301      	movs	r3, #1
 800536c:	4652      	mov	r2, sl
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f af28 	beq.w	80051ca <_printf_float+0xb6>
 800537a:	f109 0901 	add.w	r9, r9, #1
 800537e:	e7e8      	b.n	8005352 <_printf_float+0x23e>
 8005380:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	dc38      	bgt.n	80053f8 <_printf_float+0x2e4>
 8005386:	2301      	movs	r3, #1
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	4a19      	ldr	r2, [pc, #100]	@ (80053f4 <_printf_float+0x2e0>)
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	f43f af1a 	beq.w	80051ca <_printf_float+0xb6>
 8005396:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800539a:	ea59 0303 	orrs.w	r3, r9, r3
 800539e:	d102      	bne.n	80053a6 <_printf_float+0x292>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	07d9      	lsls	r1, r3, #31
 80053a4:	d5d7      	bpl.n	8005356 <_printf_float+0x242>
 80053a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f af0a 	beq.w	80051ca <_printf_float+0xb6>
 80053b6:	f04f 0a00 	mov.w	sl, #0
 80053ba:	f104 0b1a 	add.w	fp, r4, #26
 80053be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053c0:	425b      	negs	r3, r3
 80053c2:	4553      	cmp	r3, sl
 80053c4:	dc01      	bgt.n	80053ca <_printf_float+0x2b6>
 80053c6:	464b      	mov	r3, r9
 80053c8:	e793      	b.n	80052f2 <_printf_float+0x1de>
 80053ca:	2301      	movs	r3, #1
 80053cc:	465a      	mov	r2, fp
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	f43f aef8 	beq.w	80051ca <_printf_float+0xb6>
 80053da:	f10a 0a01 	add.w	sl, sl, #1
 80053de:	e7ee      	b.n	80053be <_printf_float+0x2aa>
 80053e0:	7fefffff 	.word	0x7fefffff
 80053e4:	08009806 	.word	0x08009806
 80053e8:	08009802 	.word	0x08009802
 80053ec:	0800980e 	.word	0x0800980e
 80053f0:	0800980a 	.word	0x0800980a
 80053f4:	08009812 	.word	0x08009812
 80053f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80053fe:	4553      	cmp	r3, sl
 8005400:	bfa8      	it	ge
 8005402:	4653      	movge	r3, sl
 8005404:	2b00      	cmp	r3, #0
 8005406:	4699      	mov	r9, r3
 8005408:	dc36      	bgt.n	8005478 <_printf_float+0x364>
 800540a:	f04f 0b00 	mov.w	fp, #0
 800540e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005412:	f104 021a 	add.w	r2, r4, #26
 8005416:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005418:	930a      	str	r3, [sp, #40]	@ 0x28
 800541a:	eba3 0309 	sub.w	r3, r3, r9
 800541e:	455b      	cmp	r3, fp
 8005420:	dc31      	bgt.n	8005486 <_printf_float+0x372>
 8005422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005424:	459a      	cmp	sl, r3
 8005426:	dc3a      	bgt.n	800549e <_printf_float+0x38a>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07da      	lsls	r2, r3, #31
 800542c:	d437      	bmi.n	800549e <_printf_float+0x38a>
 800542e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005430:	ebaa 0903 	sub.w	r9, sl, r3
 8005434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005436:	ebaa 0303 	sub.w	r3, sl, r3
 800543a:	4599      	cmp	r9, r3
 800543c:	bfa8      	it	ge
 800543e:	4699      	movge	r9, r3
 8005440:	f1b9 0f00 	cmp.w	r9, #0
 8005444:	dc33      	bgt.n	80054ae <_printf_float+0x39a>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800544e:	f104 0b1a 	add.w	fp, r4, #26
 8005452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005454:	ebaa 0303 	sub.w	r3, sl, r3
 8005458:	eba3 0309 	sub.w	r3, r3, r9
 800545c:	4543      	cmp	r3, r8
 800545e:	f77f af7a 	ble.w	8005356 <_printf_float+0x242>
 8005462:	2301      	movs	r3, #1
 8005464:	465a      	mov	r2, fp
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f aeac 	beq.w	80051ca <_printf_float+0xb6>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	e7ec      	b.n	8005452 <_printf_float+0x33e>
 8005478:	4642      	mov	r2, r8
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	d1c2      	bne.n	800540a <_printf_float+0x2f6>
 8005484:	e6a1      	b.n	80051ca <_printf_float+0xb6>
 8005486:	2301      	movs	r3, #1
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	920a      	str	r2, [sp, #40]	@ 0x28
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	f43f ae9a 	beq.w	80051ca <_printf_float+0xb6>
 8005496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005498:	f10b 0b01 	add.w	fp, fp, #1
 800549c:	e7bb      	b.n	8005416 <_printf_float+0x302>
 800549e:	4631      	mov	r1, r6
 80054a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	d1c0      	bne.n	800542e <_printf_float+0x31a>
 80054ac:	e68d      	b.n	80051ca <_printf_float+0xb6>
 80054ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054b0:	464b      	mov	r3, r9
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	4442      	add	r2, r8
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	d1c3      	bne.n	8005446 <_printf_float+0x332>
 80054be:	e684      	b.n	80051ca <_printf_float+0xb6>
 80054c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80054c4:	f1ba 0f01 	cmp.w	sl, #1
 80054c8:	dc01      	bgt.n	80054ce <_printf_float+0x3ba>
 80054ca:	07db      	lsls	r3, r3, #31
 80054cc:	d536      	bpl.n	800553c <_printf_float+0x428>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4642      	mov	r2, r8
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f ae76 	beq.w	80051ca <_printf_float+0xb6>
 80054de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae6e 	beq.w	80051ca <_printf_float+0xb6>
 80054ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054f2:	2200      	movs	r2, #0
 80054f4:	2300      	movs	r3, #0
 80054f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054fa:	f7fb fa55 	bl	80009a8 <__aeabi_dcmpeq>
 80054fe:	b9c0      	cbnz	r0, 8005532 <_printf_float+0x41e>
 8005500:	4653      	mov	r3, sl
 8005502:	f108 0201 	add.w	r2, r8, #1
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d10c      	bne.n	800552a <_printf_float+0x416>
 8005510:	e65b      	b.n	80051ca <_printf_float+0xb6>
 8005512:	2301      	movs	r3, #1
 8005514:	465a      	mov	r2, fp
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f ae54 	beq.w	80051ca <_printf_float+0xb6>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	45d0      	cmp	r8, sl
 8005528:	dbf3      	blt.n	8005512 <_printf_float+0x3fe>
 800552a:	464b      	mov	r3, r9
 800552c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005530:	e6e0      	b.n	80052f4 <_printf_float+0x1e0>
 8005532:	f04f 0800 	mov.w	r8, #0
 8005536:	f104 0b1a 	add.w	fp, r4, #26
 800553a:	e7f4      	b.n	8005526 <_printf_float+0x412>
 800553c:	2301      	movs	r3, #1
 800553e:	4642      	mov	r2, r8
 8005540:	e7e1      	b.n	8005506 <_printf_float+0x3f2>
 8005542:	2301      	movs	r3, #1
 8005544:	464a      	mov	r2, r9
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae3c 	beq.w	80051ca <_printf_float+0xb6>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	4543      	cmp	r3, r8
 800555e:	dcf0      	bgt.n	8005542 <_printf_float+0x42e>
 8005560:	e6fd      	b.n	800535e <_printf_float+0x24a>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 0919 	add.w	r9, r4, #25
 800556a:	e7f4      	b.n	8005556 <_printf_float+0x442>

0800556c <_printf_common>:
 800556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005570:	4616      	mov	r6, r2
 8005572:	4698      	mov	r8, r3
 8005574:	688a      	ldr	r2, [r1, #8]
 8005576:	690b      	ldr	r3, [r1, #16]
 8005578:	4607      	mov	r7, r0
 800557a:	4293      	cmp	r3, r2
 800557c:	bfb8      	it	lt
 800557e:	4613      	movlt	r3, r2
 8005580:	6033      	str	r3, [r6, #0]
 8005582:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800558c:	b10a      	cbz	r2, 8005592 <_printf_common+0x26>
 800558e:	3301      	adds	r3, #1
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	0699      	lsls	r1, r3, #26
 8005596:	bf42      	ittt	mi
 8005598:	6833      	ldrmi	r3, [r6, #0]
 800559a:	3302      	addmi	r3, #2
 800559c:	6033      	strmi	r3, [r6, #0]
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	f015 0506 	ands.w	r5, r5, #6
 80055a4:	d106      	bne.n	80055b4 <_printf_common+0x48>
 80055a6:	f104 0a19 	add.w	sl, r4, #25
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	6832      	ldr	r2, [r6, #0]
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dc2b      	bgt.n	800560c <_printf_common+0xa0>
 80055b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	3b00      	subs	r3, #0
 80055bc:	bf18      	it	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	0692      	lsls	r2, r2, #26
 80055c2:	d430      	bmi.n	8005626 <_printf_common+0xba>
 80055c4:	4641      	mov	r1, r8
 80055c6:	4638      	mov	r0, r7
 80055c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055cc:	47c8      	blx	r9
 80055ce:	3001      	adds	r0, #1
 80055d0:	d023      	beq.n	800561a <_printf_common+0xae>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	f003 0306 	and.w	r3, r3, #6
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf14      	ite	ne
 80055de:	2500      	movne	r5, #0
 80055e0:	6833      	ldreq	r3, [r6, #0]
 80055e2:	f04f 0600 	mov.w	r6, #0
 80055e6:	bf08      	it	eq
 80055e8:	68e5      	ldreq	r5, [r4, #12]
 80055ea:	f104 041a 	add.w	r4, r4, #26
 80055ee:	bf08      	it	eq
 80055f0:	1aed      	subeq	r5, r5, r3
 80055f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055f6:	bf08      	it	eq
 80055f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055fc:	4293      	cmp	r3, r2
 80055fe:	bfc4      	itt	gt
 8005600:	1a9b      	subgt	r3, r3, r2
 8005602:	18ed      	addgt	r5, r5, r3
 8005604:	42b5      	cmp	r5, r6
 8005606:	d11a      	bne.n	800563e <_printf_common+0xd2>
 8005608:	2000      	movs	r0, #0
 800560a:	e008      	b.n	800561e <_printf_common+0xb2>
 800560c:	2301      	movs	r3, #1
 800560e:	4652      	mov	r2, sl
 8005610:	4641      	mov	r1, r8
 8005612:	4638      	mov	r0, r7
 8005614:	47c8      	blx	r9
 8005616:	3001      	adds	r0, #1
 8005618:	d103      	bne.n	8005622 <_printf_common+0xb6>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005622:	3501      	adds	r5, #1
 8005624:	e7c1      	b.n	80055aa <_printf_common+0x3e>
 8005626:	2030      	movs	r0, #48	@ 0x30
 8005628:	18e1      	adds	r1, r4, r3
 800562a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005634:	4422      	add	r2, r4
 8005636:	3302      	adds	r3, #2
 8005638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800563c:	e7c2      	b.n	80055c4 <_printf_common+0x58>
 800563e:	2301      	movs	r3, #1
 8005640:	4622      	mov	r2, r4
 8005642:	4641      	mov	r1, r8
 8005644:	4638      	mov	r0, r7
 8005646:	47c8      	blx	r9
 8005648:	3001      	adds	r0, #1
 800564a:	d0e6      	beq.n	800561a <_printf_common+0xae>
 800564c:	3601      	adds	r6, #1
 800564e:	e7d9      	b.n	8005604 <_printf_common+0x98>

08005650 <_printf_i>:
 8005650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	7e0f      	ldrb	r7, [r1, #24]
 8005656:	4691      	mov	r9, r2
 8005658:	2f78      	cmp	r7, #120	@ 0x78
 800565a:	4680      	mov	r8, r0
 800565c:	460c      	mov	r4, r1
 800565e:	469a      	mov	sl, r3
 8005660:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005666:	d807      	bhi.n	8005678 <_printf_i+0x28>
 8005668:	2f62      	cmp	r7, #98	@ 0x62
 800566a:	d80a      	bhi.n	8005682 <_printf_i+0x32>
 800566c:	2f00      	cmp	r7, #0
 800566e:	f000 80d1 	beq.w	8005814 <_printf_i+0x1c4>
 8005672:	2f58      	cmp	r7, #88	@ 0x58
 8005674:	f000 80b8 	beq.w	80057e8 <_printf_i+0x198>
 8005678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800567c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005680:	e03a      	b.n	80056f8 <_printf_i+0xa8>
 8005682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005686:	2b15      	cmp	r3, #21
 8005688:	d8f6      	bhi.n	8005678 <_printf_i+0x28>
 800568a:	a101      	add	r1, pc, #4	@ (adr r1, 8005690 <_printf_i+0x40>)
 800568c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056fd 	.word	0x080056fd
 8005698:	08005679 	.word	0x08005679
 800569c:	08005679 	.word	0x08005679
 80056a0:	08005679 	.word	0x08005679
 80056a4:	08005679 	.word	0x08005679
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005679 	.word	0x08005679
 80056b0:	08005679 	.word	0x08005679
 80056b4:	08005679 	.word	0x08005679
 80056b8:	08005679 	.word	0x08005679
 80056bc:	080057fb 	.word	0x080057fb
 80056c0:	08005727 	.word	0x08005727
 80056c4:	080057b5 	.word	0x080057b5
 80056c8:	08005679 	.word	0x08005679
 80056cc:	08005679 	.word	0x08005679
 80056d0:	0800581d 	.word	0x0800581d
 80056d4:	08005679 	.word	0x08005679
 80056d8:	08005727 	.word	0x08005727
 80056dc:	08005679 	.word	0x08005679
 80056e0:	08005679 	.word	0x08005679
 80056e4:	080057bd 	.word	0x080057bd
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f8:	2301      	movs	r3, #1
 80056fa:	e09c      	b.n	8005836 <_printf_i+0x1e6>
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	1d19      	adds	r1, r3, #4
 8005702:	6031      	str	r1, [r6, #0]
 8005704:	0606      	lsls	r6, r0, #24
 8005706:	d501      	bpl.n	800570c <_printf_i+0xbc>
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	e003      	b.n	8005714 <_printf_i+0xc4>
 800570c:	0645      	lsls	r5, r0, #25
 800570e:	d5fb      	bpl.n	8005708 <_printf_i+0xb8>
 8005710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005714:	2d00      	cmp	r5, #0
 8005716:	da03      	bge.n	8005720 <_printf_i+0xd0>
 8005718:	232d      	movs	r3, #45	@ 0x2d
 800571a:	426d      	negs	r5, r5
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005720:	230a      	movs	r3, #10
 8005722:	4858      	ldr	r0, [pc, #352]	@ (8005884 <_printf_i+0x234>)
 8005724:	e011      	b.n	800574a <_printf_i+0xfa>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	0608      	lsls	r0, r1, #24
 800572c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005730:	d402      	bmi.n	8005738 <_printf_i+0xe8>
 8005732:	0649      	lsls	r1, r1, #25
 8005734:	bf48      	it	mi
 8005736:	b2ad      	uxthmi	r5, r5
 8005738:	2f6f      	cmp	r7, #111	@ 0x6f
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	bf14      	ite	ne
 800573e:	230a      	movne	r3, #10
 8005740:	2308      	moveq	r3, #8
 8005742:	4850      	ldr	r0, [pc, #320]	@ (8005884 <_printf_i+0x234>)
 8005744:	2100      	movs	r1, #0
 8005746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800574a:	6866      	ldr	r6, [r4, #4]
 800574c:	2e00      	cmp	r6, #0
 800574e:	60a6      	str	r6, [r4, #8]
 8005750:	db05      	blt.n	800575e <_printf_i+0x10e>
 8005752:	6821      	ldr	r1, [r4, #0]
 8005754:	432e      	orrs	r6, r5
 8005756:	f021 0104 	bic.w	r1, r1, #4
 800575a:	6021      	str	r1, [r4, #0]
 800575c:	d04b      	beq.n	80057f6 <_printf_i+0x1a6>
 800575e:	4616      	mov	r6, r2
 8005760:	fbb5 f1f3 	udiv	r1, r5, r3
 8005764:	fb03 5711 	mls	r7, r3, r1, r5
 8005768:	5dc7      	ldrb	r7, [r0, r7]
 800576a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800576e:	462f      	mov	r7, r5
 8005770:	42bb      	cmp	r3, r7
 8005772:	460d      	mov	r5, r1
 8005774:	d9f4      	bls.n	8005760 <_printf_i+0x110>
 8005776:	2b08      	cmp	r3, #8
 8005778:	d10b      	bne.n	8005792 <_printf_i+0x142>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	07df      	lsls	r7, r3, #31
 800577e:	d508      	bpl.n	8005792 <_printf_i+0x142>
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	6861      	ldr	r1, [r4, #4]
 8005784:	4299      	cmp	r1, r3
 8005786:	bfde      	ittt	le
 8005788:	2330      	movle	r3, #48	@ 0x30
 800578a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800578e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005792:	1b92      	subs	r2, r2, r6
 8005794:	6122      	str	r2, [r4, #16]
 8005796:	464b      	mov	r3, r9
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f8cd a000 	str.w	sl, [sp]
 80057a0:	aa03      	add	r2, sp, #12
 80057a2:	f7ff fee3 	bl	800556c <_printf_common>
 80057a6:	3001      	adds	r0, #1
 80057a8:	d14a      	bne.n	8005840 <_printf_i+0x1f0>
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	b004      	add	sp, #16
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f043 0320 	orr.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	2778      	movs	r7, #120	@ 0x78
 80057be:	4832      	ldr	r0, [pc, #200]	@ (8005888 <_printf_i+0x238>)
 80057c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	061f      	lsls	r7, r3, #24
 80057ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80057ce:	d402      	bmi.n	80057d6 <_printf_i+0x186>
 80057d0:	065f      	lsls	r7, r3, #25
 80057d2:	bf48      	it	mi
 80057d4:	b2ad      	uxthmi	r5, r5
 80057d6:	6031      	str	r1, [r6, #0]
 80057d8:	07d9      	lsls	r1, r3, #31
 80057da:	bf44      	itt	mi
 80057dc:	f043 0320 	orrmi.w	r3, r3, #32
 80057e0:	6023      	strmi	r3, [r4, #0]
 80057e2:	b11d      	cbz	r5, 80057ec <_printf_i+0x19c>
 80057e4:	2310      	movs	r3, #16
 80057e6:	e7ad      	b.n	8005744 <_printf_i+0xf4>
 80057e8:	4826      	ldr	r0, [pc, #152]	@ (8005884 <_printf_i+0x234>)
 80057ea:	e7e9      	b.n	80057c0 <_printf_i+0x170>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	e7f6      	b.n	80057e4 <_printf_i+0x194>
 80057f6:	4616      	mov	r6, r2
 80057f8:	e7bd      	b.n	8005776 <_printf_i+0x126>
 80057fa:	6833      	ldr	r3, [r6, #0]
 80057fc:	6825      	ldr	r5, [r4, #0]
 80057fe:	1d18      	adds	r0, r3, #4
 8005800:	6961      	ldr	r1, [r4, #20]
 8005802:	6030      	str	r0, [r6, #0]
 8005804:	062e      	lsls	r6, r5, #24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	d501      	bpl.n	800580e <_printf_i+0x1be>
 800580a:	6019      	str	r1, [r3, #0]
 800580c:	e002      	b.n	8005814 <_printf_i+0x1c4>
 800580e:	0668      	lsls	r0, r5, #25
 8005810:	d5fb      	bpl.n	800580a <_printf_i+0x1ba>
 8005812:	8019      	strh	r1, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	4616      	mov	r6, r2
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	e7bc      	b.n	8005796 <_printf_i+0x146>
 800581c:	6833      	ldr	r3, [r6, #0]
 800581e:	2100      	movs	r1, #0
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	6032      	str	r2, [r6, #0]
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	4630      	mov	r0, r6
 800582a:	f000 fc16 	bl	800605a <memchr>
 800582e:	b108      	cbz	r0, 8005834 <_printf_i+0x1e4>
 8005830:	1b80      	subs	r0, r0, r6
 8005832:	6060      	str	r0, [r4, #4]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	2300      	movs	r3, #0
 800583a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583e:	e7aa      	b.n	8005796 <_printf_i+0x146>
 8005840:	4632      	mov	r2, r6
 8005842:	4649      	mov	r1, r9
 8005844:	4640      	mov	r0, r8
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	47d0      	blx	sl
 800584a:	3001      	adds	r0, #1
 800584c:	d0ad      	beq.n	80057aa <_printf_i+0x15a>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	079b      	lsls	r3, r3, #30
 8005852:	d413      	bmi.n	800587c <_printf_i+0x22c>
 8005854:	68e0      	ldr	r0, [r4, #12]
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	4298      	cmp	r0, r3
 800585a:	bfb8      	it	lt
 800585c:	4618      	movlt	r0, r3
 800585e:	e7a6      	b.n	80057ae <_printf_i+0x15e>
 8005860:	2301      	movs	r3, #1
 8005862:	4632      	mov	r2, r6
 8005864:	4649      	mov	r1, r9
 8005866:	4640      	mov	r0, r8
 8005868:	47d0      	blx	sl
 800586a:	3001      	adds	r0, #1
 800586c:	d09d      	beq.n	80057aa <_printf_i+0x15a>
 800586e:	3501      	adds	r5, #1
 8005870:	68e3      	ldr	r3, [r4, #12]
 8005872:	9903      	ldr	r1, [sp, #12]
 8005874:	1a5b      	subs	r3, r3, r1
 8005876:	42ab      	cmp	r3, r5
 8005878:	dcf2      	bgt.n	8005860 <_printf_i+0x210>
 800587a:	e7eb      	b.n	8005854 <_printf_i+0x204>
 800587c:	2500      	movs	r5, #0
 800587e:	f104 0619 	add.w	r6, r4, #25
 8005882:	e7f5      	b.n	8005870 <_printf_i+0x220>
 8005884:	08009814 	.word	0x08009814
 8005888:	08009825 	.word	0x08009825

0800588c <_scanf_float>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	b087      	sub	sp, #28
 8005892:	9303      	str	r3, [sp, #12]
 8005894:	688b      	ldr	r3, [r1, #8]
 8005896:	4691      	mov	r9, r2
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800589e:	bf82      	ittt	hi
 80058a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80058a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80058ac:	460a      	mov	r2, r1
 80058ae:	f04f 0500 	mov.w	r5, #0
 80058b2:	bf88      	it	hi
 80058b4:	608b      	strhi	r3, [r1, #8]
 80058b6:	680b      	ldr	r3, [r1, #0]
 80058b8:	4680      	mov	r8, r0
 80058ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80058be:	f842 3b1c 	str.w	r3, [r2], #28
 80058c2:	460c      	mov	r4, r1
 80058c4:	bf98      	it	ls
 80058c6:	f04f 0b00 	movls.w	fp, #0
 80058ca:	4616      	mov	r6, r2
 80058cc:	46aa      	mov	sl, r5
 80058ce:	462f      	mov	r7, r5
 80058d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058d4:	9201      	str	r2, [sp, #4]
 80058d6:	9502      	str	r5, [sp, #8]
 80058d8:	68a2      	ldr	r2, [r4, #8]
 80058da:	b15a      	cbz	r2, 80058f4 <_scanf_float+0x68>
 80058dc:	f8d9 3000 	ldr.w	r3, [r9]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b4e      	cmp	r3, #78	@ 0x4e
 80058e4:	d862      	bhi.n	80059ac <_scanf_float+0x120>
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d83a      	bhi.n	8005960 <_scanf_float+0xd4>
 80058ea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80058ee:	b2c8      	uxtb	r0, r1
 80058f0:	280e      	cmp	r0, #14
 80058f2:	d938      	bls.n	8005966 <_scanf_float+0xda>
 80058f4:	b11f      	cbz	r7, 80058fe <_scanf_float+0x72>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005902:	f1ba 0f01 	cmp.w	sl, #1
 8005906:	f200 8114 	bhi.w	8005b32 <_scanf_float+0x2a6>
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	429e      	cmp	r6, r3
 800590e:	f200 8105 	bhi.w	8005b1c <_scanf_float+0x290>
 8005912:	2001      	movs	r0, #1
 8005914:	b007      	add	sp, #28
 8005916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800591e:	2a0d      	cmp	r2, #13
 8005920:	d8e8      	bhi.n	80058f4 <_scanf_float+0x68>
 8005922:	a101      	add	r1, pc, #4	@ (adr r1, 8005928 <_scanf_float+0x9c>)
 8005924:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005928:	08005a71 	.word	0x08005a71
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005acd 	.word	0x08005acd
 800593c:	08005aa7 	.word	0x08005aa7
 8005940:	080058f5 	.word	0x080058f5
 8005944:	080058f5 	.word	0x080058f5
 8005948:	08005a7f 	.word	0x08005a7f
 800594c:	080058f5 	.word	0x080058f5
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080058f5 	.word	0x080058f5
 8005958:	080058f5 	.word	0x080058f5
 800595c:	08005a3b 	.word	0x08005a3b
 8005960:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005964:	e7db      	b.n	800591e <_scanf_float+0x92>
 8005966:	290e      	cmp	r1, #14
 8005968:	d8c4      	bhi.n	80058f4 <_scanf_float+0x68>
 800596a:	a001      	add	r0, pc, #4	@ (adr r0, 8005970 <_scanf_float+0xe4>)
 800596c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005970:	08005a2b 	.word	0x08005a2b
 8005974:	080058f5 	.word	0x080058f5
 8005978:	08005a2b 	.word	0x08005a2b
 800597c:	08005abb 	.word	0x08005abb
 8005980:	080058f5 	.word	0x080058f5
 8005984:	080059cd 	.word	0x080059cd
 8005988:	08005a11 	.word	0x08005a11
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a11 	.word	0x08005a11
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a11 	.word	0x08005a11
 800599c:	08005a11 	.word	0x08005a11
 80059a0:	08005a11 	.word	0x08005a11
 80059a4:	08005a11 	.word	0x08005a11
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80059ae:	d809      	bhi.n	80059c4 <_scanf_float+0x138>
 80059b0:	2b60      	cmp	r3, #96	@ 0x60
 80059b2:	d8b2      	bhi.n	800591a <_scanf_float+0x8e>
 80059b4:	2b54      	cmp	r3, #84	@ 0x54
 80059b6:	d07b      	beq.n	8005ab0 <_scanf_float+0x224>
 80059b8:	2b59      	cmp	r3, #89	@ 0x59
 80059ba:	d19b      	bne.n	80058f4 <_scanf_float+0x68>
 80059bc:	2d07      	cmp	r5, #7
 80059be:	d199      	bne.n	80058f4 <_scanf_float+0x68>
 80059c0:	2508      	movs	r5, #8
 80059c2:	e02f      	b.n	8005a24 <_scanf_float+0x198>
 80059c4:	2b74      	cmp	r3, #116	@ 0x74
 80059c6:	d073      	beq.n	8005ab0 <_scanf_float+0x224>
 80059c8:	2b79      	cmp	r3, #121	@ 0x79
 80059ca:	e7f6      	b.n	80059ba <_scanf_float+0x12e>
 80059cc:	6821      	ldr	r1, [r4, #0]
 80059ce:	05c8      	lsls	r0, r1, #23
 80059d0:	d51e      	bpl.n	8005a10 <_scanf_float+0x184>
 80059d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80059d6:	6021      	str	r1, [r4, #0]
 80059d8:	3701      	adds	r7, #1
 80059da:	f1bb 0f00 	cmp.w	fp, #0
 80059de:	d003      	beq.n	80059e8 <_scanf_float+0x15c>
 80059e0:	3201      	adds	r2, #1
 80059e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059e6:	60a2      	str	r2, [r4, #8]
 80059e8:	68a3      	ldr	r3, [r4, #8]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	3301      	adds	r3, #1
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8005a00:	f340 8083 	ble.w	8005b0a <_scanf_float+0x27e>
 8005a04:	f8d9 3000 	ldr.w	r3, [r9]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f8c9 3000 	str.w	r3, [r9]
 8005a0e:	e763      	b.n	80058d8 <_scanf_float+0x4c>
 8005a10:	eb1a 0105 	adds.w	r1, sl, r5
 8005a14:	f47f af6e 	bne.w	80058f4 <_scanf_float+0x68>
 8005a18:	460d      	mov	r5, r1
 8005a1a:	468a      	mov	sl, r1
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	f806 3b01 	strb.w	r3, [r6], #1
 8005a28:	e7de      	b.n	80059e8 <_scanf_float+0x15c>
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	0610      	lsls	r0, r2, #24
 8005a2e:	f57f af61 	bpl.w	80058f4 <_scanf_float+0x68>
 8005a32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	e7f4      	b.n	8005a24 <_scanf_float+0x198>
 8005a3a:	f1ba 0f00 	cmp.w	sl, #0
 8005a3e:	d10c      	bne.n	8005a5a <_scanf_float+0x1ce>
 8005a40:	b977      	cbnz	r7, 8005a60 <_scanf_float+0x1d4>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a4c:	d108      	bne.n	8005a60 <_scanf_float+0x1d4>
 8005a4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a52:	f04f 0a01 	mov.w	sl, #1
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	e7e4      	b.n	8005a24 <_scanf_float+0x198>
 8005a5a:	f1ba 0f02 	cmp.w	sl, #2
 8005a5e:	d051      	beq.n	8005b04 <_scanf_float+0x278>
 8005a60:	2d01      	cmp	r5, #1
 8005a62:	d002      	beq.n	8005a6a <_scanf_float+0x1de>
 8005a64:	2d04      	cmp	r5, #4
 8005a66:	f47f af45 	bne.w	80058f4 <_scanf_float+0x68>
 8005a6a:	3501      	adds	r5, #1
 8005a6c:	b2ed      	uxtb	r5, r5
 8005a6e:	e7d9      	b.n	8005a24 <_scanf_float+0x198>
 8005a70:	f1ba 0f01 	cmp.w	sl, #1
 8005a74:	f47f af3e 	bne.w	80058f4 <_scanf_float+0x68>
 8005a78:	f04f 0a02 	mov.w	sl, #2
 8005a7c:	e7d2      	b.n	8005a24 <_scanf_float+0x198>
 8005a7e:	b975      	cbnz	r5, 8005a9e <_scanf_float+0x212>
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	f47f af38 	bne.w	80058f6 <_scanf_float+0x6a>
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a90:	f040 80ff 	bne.w	8005c92 <_scanf_float+0x406>
 8005a94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a98:	2501      	movs	r5, #1
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	e7c2      	b.n	8005a24 <_scanf_float+0x198>
 8005a9e:	2d03      	cmp	r5, #3
 8005aa0:	d0e3      	beq.n	8005a6a <_scanf_float+0x1de>
 8005aa2:	2d05      	cmp	r5, #5
 8005aa4:	e7df      	b.n	8005a66 <_scanf_float+0x1da>
 8005aa6:	2d02      	cmp	r5, #2
 8005aa8:	f47f af24 	bne.w	80058f4 <_scanf_float+0x68>
 8005aac:	2503      	movs	r5, #3
 8005aae:	e7b9      	b.n	8005a24 <_scanf_float+0x198>
 8005ab0:	2d06      	cmp	r5, #6
 8005ab2:	f47f af1f 	bne.w	80058f4 <_scanf_float+0x68>
 8005ab6:	2507      	movs	r5, #7
 8005ab8:	e7b4      	b.n	8005a24 <_scanf_float+0x198>
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	0591      	lsls	r1, r2, #22
 8005abe:	f57f af19 	bpl.w	80058f4 <_scanf_float+0x68>
 8005ac2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	9702      	str	r7, [sp, #8]
 8005aca:	e7ab      	b.n	8005a24 <_scanf_float+0x198>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ad2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ad6:	d005      	beq.n	8005ae4 <_scanf_float+0x258>
 8005ad8:	0550      	lsls	r0, r2, #21
 8005ada:	f57f af0b 	bpl.w	80058f4 <_scanf_float+0x68>
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	f000 80d7 	beq.w	8005c92 <_scanf_float+0x406>
 8005ae4:	0591      	lsls	r1, r2, #22
 8005ae6:	bf58      	it	pl
 8005ae8:	9902      	ldrpl	r1, [sp, #8]
 8005aea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aee:	bf58      	it	pl
 8005af0:	1a79      	subpl	r1, r7, r1
 8005af2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005af6:	f04f 0700 	mov.w	r7, #0
 8005afa:	bf58      	it	pl
 8005afc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	e78f      	b.n	8005a24 <_scanf_float+0x198>
 8005b04:	f04f 0a03 	mov.w	sl, #3
 8005b08:	e78c      	b.n	8005a24 <_scanf_float+0x198>
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b12:	4798      	blx	r3
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f43f aedf 	beq.w	80058d8 <_scanf_float+0x4c>
 8005b1a:	e6eb      	b.n	80058f4 <_scanf_float+0x68>
 8005b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b20:	464a      	mov	r2, r9
 8005b22:	4640      	mov	r0, r8
 8005b24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b28:	4798      	blx	r3
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	e6eb      	b.n	800590a <_scanf_float+0x7e>
 8005b32:	1e6b      	subs	r3, r5, #1
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d824      	bhi.n	8005b82 <_scanf_float+0x2f6>
 8005b38:	2d02      	cmp	r5, #2
 8005b3a:	d836      	bhi.n	8005baa <_scanf_float+0x31e>
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	429e      	cmp	r6, r3
 8005b40:	f67f aee7 	bls.w	8005912 <_scanf_float+0x86>
 8005b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b48:	464a      	mov	r2, r9
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b50:	4798      	blx	r3
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	e7f0      	b.n	8005b3c <_scanf_float+0x2b0>
 8005b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b5e:	464a      	mov	r2, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005b66:	4798      	blx	r3
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b72:	fa5f fa8a 	uxtb.w	sl, sl
 8005b76:	f1ba 0f02 	cmp.w	sl, #2
 8005b7a:	d1ee      	bne.n	8005b5a <_scanf_float+0x2ce>
 8005b7c:	3d03      	subs	r5, #3
 8005b7e:	b2ed      	uxtb	r5, r5
 8005b80:	1b76      	subs	r6, r6, r5
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	05da      	lsls	r2, r3, #23
 8005b86:	d530      	bpl.n	8005bea <_scanf_float+0x35e>
 8005b88:	055b      	lsls	r3, r3, #21
 8005b8a:	d511      	bpl.n	8005bb0 <_scanf_float+0x324>
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	429e      	cmp	r6, r3
 8005b90:	f67f aebf 	bls.w	8005912 <_scanf_float+0x86>
 8005b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b98:	464a      	mov	r2, r9
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ba0:	4798      	blx	r3
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	e7f0      	b.n	8005b8c <_scanf_float+0x300>
 8005baa:	46aa      	mov	sl, r5
 8005bac:	46b3      	mov	fp, r6
 8005bae:	e7de      	b.n	8005b6e <_scanf_float+0x2e2>
 8005bb0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	2965      	cmp	r1, #101	@ 0x65
 8005bb8:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bbc:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	d00c      	beq.n	8005bde <_scanf_float+0x352>
 8005bc4:	2945      	cmp	r1, #69	@ 0x45
 8005bc6:	d00a      	beq.n	8005bde <_scanf_float+0x352>
 8005bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bcc:	464a      	mov	r2, r9
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4798      	blx	r3
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	1eb5      	subs	r5, r6, #2
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	464a      	mov	r2, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005be6:	4798      	blx	r3
 8005be8:	462e      	mov	r6, r5
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	f012 0210 	ands.w	r2, r2, #16
 8005bf0:	d001      	beq.n	8005bf6 <_scanf_float+0x36a>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e68e      	b.n	8005914 <_scanf_float+0x88>
 8005bf6:	7032      	strb	r2, [r6, #0]
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c02:	d125      	bne.n	8005c50 <_scanf_float+0x3c4>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	429f      	cmp	r7, r3
 8005c08:	d00a      	beq.n	8005c20 <_scanf_float+0x394>
 8005c0a:	1bda      	subs	r2, r3, r7
 8005c0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005c10:	429e      	cmp	r6, r3
 8005c12:	bf28      	it	cs
 8005c14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005c18:	4630      	mov	r0, r6
 8005c1a:	491f      	ldr	r1, [pc, #124]	@ (8005c98 <_scanf_float+0x40c>)
 8005c1c:	f000 f938 	bl	8005e90 <siprintf>
 8005c20:	2200      	movs	r2, #0
 8005c22:	4640      	mov	r0, r8
 8005c24:	9901      	ldr	r1, [sp, #4]
 8005c26:	f002 fc2f 	bl	8008488 <_strtod_r>
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f015 0f02 	tst.w	r5, #2
 8005c34:	4606      	mov	r6, r0
 8005c36:	460f      	mov	r7, r1
 8005c38:	f103 0204 	add.w	r2, r3, #4
 8005c3c:	d015      	beq.n	8005c6a <_scanf_float+0x3de>
 8005c3e:	9903      	ldr	r1, [sp, #12]
 8005c40:	600a      	str	r2, [r1, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	e9c3 6700 	strd	r6, r7, [r3]
 8005c48:	68e3      	ldr	r3, [r4, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60e3      	str	r3, [r4, #12]
 8005c4e:	e7d0      	b.n	8005bf2 <_scanf_float+0x366>
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0e4      	beq.n	8005c20 <_scanf_float+0x394>
 8005c56:	9905      	ldr	r1, [sp, #20]
 8005c58:	230a      	movs	r3, #10
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	3101      	adds	r1, #1
 8005c5e:	f002 fc93 	bl	8008588 <_strtol_r>
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	9e05      	ldr	r6, [sp, #20]
 8005c66:	1ac2      	subs	r2, r0, r3
 8005c68:	e7d0      	b.n	8005c0c <_scanf_float+0x380>
 8005c6a:	076d      	lsls	r5, r5, #29
 8005c6c:	d4e7      	bmi.n	8005c3e <_scanf_float+0x3b2>
 8005c6e:	9d03      	ldr	r5, [sp, #12]
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	681d      	ldr	r5, [r3, #0]
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	f7fa fec8 	bl	8000a0c <__aeabi_dcmpun>
 8005c7c:	b120      	cbz	r0, 8005c88 <_scanf_float+0x3fc>
 8005c7e:	4807      	ldr	r0, [pc, #28]	@ (8005c9c <_scanf_float+0x410>)
 8005c80:	f000 fa08 	bl	8006094 <nanf>
 8005c84:	6028      	str	r0, [r5, #0]
 8005c86:	e7df      	b.n	8005c48 <_scanf_float+0x3bc>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa ff1c 	bl	8000ac8 <__aeabi_d2f>
 8005c90:	e7f8      	b.n	8005c84 <_scanf_float+0x3f8>
 8005c92:	2700      	movs	r7, #0
 8005c94:	e633      	b.n	80058fe <_scanf_float+0x72>
 8005c96:	bf00      	nop
 8005c98:	08009836 	.word	0x08009836
 8005c9c:	08009977 	.word	0x08009977

08005ca0 <std>:
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	8181      	strh	r1, [r0, #12]
 8005cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cb4:	81c2      	strh	r2, [r0, #14]
 8005cb6:	6183      	str	r3, [r0, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2208      	movs	r2, #8
 8005cbc:	305c      	adds	r0, #92	@ 0x5c
 8005cbe:	f000 f94c 	bl	8005f5a <memset>
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <std+0x58>)
 8005cc4:	6224      	str	r4, [r4, #32]
 8005cc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <std+0x5c>)
 8005cca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <std+0x60>)
 8005cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <std+0x64>)
 8005cd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <std+0x68>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d006      	beq.n	8005ce8 <std+0x48>
 8005cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cde:	4294      	cmp	r4, r2
 8005ce0:	d002      	beq.n	8005ce8 <std+0x48>
 8005ce2:	33d0      	adds	r3, #208	@ 0xd0
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d105      	bne.n	8005cf4 <std+0x54>
 8005ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f000 b9b0 	b.w	8006054 <__retarget_lock_init_recursive>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	bf00      	nop
 8005cf8:	08005ed5 	.word	0x08005ed5
 8005cfc:	08005ef7 	.word	0x08005ef7
 8005d00:	08005f2f 	.word	0x08005f2f
 8005d04:	08005f53 	.word	0x08005f53
 8005d08:	20001248 	.word	0x20001248

08005d0c <stdio_exit_handler>:
 8005d0c:	4a02      	ldr	r2, [pc, #8]	@ (8005d18 <stdio_exit_handler+0xc>)
 8005d0e:	4903      	ldr	r1, [pc, #12]	@ (8005d1c <stdio_exit_handler+0x10>)
 8005d10:	4803      	ldr	r0, [pc, #12]	@ (8005d20 <stdio_exit_handler+0x14>)
 8005d12:	f000 b869 	b.w	8005de8 <_fwalk_sglue>
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010
 8005d1c:	0800893d 	.word	0x0800893d
 8005d20:	20000020 	.word	0x20000020

08005d24 <cleanup_stdio>:
 8005d24:	6841      	ldr	r1, [r0, #4]
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <cleanup_stdio+0x34>)
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	d001      	beq.n	8005d34 <cleanup_stdio+0x10>
 8005d30:	f002 fe04 	bl	800893c <_fflush_r>
 8005d34:	68a1      	ldr	r1, [r4, #8]
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <cleanup_stdio+0x38>)
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <cleanup_stdio+0x1e>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f002 fdfd 	bl	800893c <_fflush_r>
 8005d42:	68e1      	ldr	r1, [r4, #12]
 8005d44:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <cleanup_stdio+0x3c>)
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d004      	beq.n	8005d54 <cleanup_stdio+0x30>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d50:	f002 bdf4 	b.w	800893c <_fflush_r>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	20001248 	.word	0x20001248
 8005d5c:	200012b0 	.word	0x200012b0
 8005d60:	20001318 	.word	0x20001318

08005d64 <global_stdio_init.part.0>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <global_stdio_init.part.0+0x30>)
 8005d68:	4c0b      	ldr	r4, [pc, #44]	@ (8005d98 <global_stdio_init.part.0+0x34>)
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d9c <global_stdio_init.part.0+0x38>)
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	2104      	movs	r1, #4
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7ff ff94 	bl	8005ca0 <std>
 8005d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2109      	movs	r1, #9
 8005d80:	f7ff ff8e 	bl	8005ca0 <std>
 8005d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d88:	2202      	movs	r2, #2
 8005d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff bf86 	b.w	8005ca0 <std>
 8005d94:	20001380 	.word	0x20001380
 8005d98:	20001248 	.word	0x20001248
 8005d9c:	08005d0d 	.word	0x08005d0d

08005da0 <__sfp_lock_acquire>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__sfp_lock_acquire+0x8>)
 8005da2:	f000 b958 	b.w	8006056 <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	20001389 	.word	0x20001389

08005dac <__sfp_lock_release>:
 8005dac:	4801      	ldr	r0, [pc, #4]	@ (8005db4 <__sfp_lock_release+0x8>)
 8005dae:	f000 b953 	b.w	8006058 <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	20001389 	.word	0x20001389

08005db8 <__sinit>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	f7ff fff0 	bl	8005da0 <__sfp_lock_acquire>
 8005dc0:	6a23      	ldr	r3, [r4, #32]
 8005dc2:	b11b      	cbz	r3, 8005dcc <__sinit+0x14>
 8005dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc8:	f7ff bff0 	b.w	8005dac <__sfp_lock_release>
 8005dcc:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <__sinit+0x28>)
 8005dce:	6223      	str	r3, [r4, #32]
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <__sinit+0x2c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f5      	bne.n	8005dc4 <__sinit+0xc>
 8005dd8:	f7ff ffc4 	bl	8005d64 <global_stdio_init.part.0>
 8005ddc:	e7f2      	b.n	8005dc4 <__sinit+0xc>
 8005dde:	bf00      	nop
 8005de0:	08005d25 	.word	0x08005d25
 8005de4:	20001380 	.word	0x20001380

08005de8 <_fwalk_sglue>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4607      	mov	r7, r0
 8005dee:	4688      	mov	r8, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	2600      	movs	r6, #0
 8005df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dfc:	d505      	bpl.n	8005e0a <_fwalk_sglue+0x22>
 8005dfe:	6824      	ldr	r4, [r4, #0]
 8005e00:	2c00      	cmp	r4, #0
 8005e02:	d1f7      	bne.n	8005df4 <_fwalk_sglue+0xc>
 8005e04:	4630      	mov	r0, r6
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d907      	bls.n	8005e20 <_fwalk_sglue+0x38>
 8005e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e14:	3301      	adds	r3, #1
 8005e16:	d003      	beq.n	8005e20 <_fwalk_sglue+0x38>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c0      	blx	r8
 8005e1e:	4306      	orrs	r6, r0
 8005e20:	3568      	adds	r5, #104	@ 0x68
 8005e22:	e7e9      	b.n	8005df8 <_fwalk_sglue+0x10>

08005e24 <sniprintf>:
 8005e24:	b40c      	push	{r2, r3}
 8005e26:	b530      	push	{r4, r5, lr}
 8005e28:	4b18      	ldr	r3, [pc, #96]	@ (8005e8c <sniprintf+0x68>)
 8005e2a:	1e0c      	subs	r4, r1, #0
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	b09d      	sub	sp, #116	@ 0x74
 8005e30:	da08      	bge.n	8005e44 <sniprintf+0x20>
 8005e32:	238b      	movs	r3, #139	@ 0x8b
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	b01d      	add	sp, #116	@ 0x74
 8005e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e40:	b002      	add	sp, #8
 8005e42:	4770      	bx	lr
 8005e44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005e52:	bf0c      	ite	eq
 8005e54:	4623      	moveq	r3, r4
 8005e56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	9307      	str	r3, [sp, #28]
 8005e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e62:	9002      	str	r0, [sp, #8]
 8005e64:	9006      	str	r0, [sp, #24]
 8005e66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	ab21      	add	r3, sp, #132	@ 0x84
 8005e6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e70:	a902      	add	r1, sp, #8
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f002 fbe6 	bl	8008644 <_svfiprintf_r>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	bfbc      	itt	lt
 8005e7c:	238b      	movlt	r3, #139	@ 0x8b
 8005e7e:	602b      	strlt	r3, [r5, #0]
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d0da      	beq.n	8005e3a <sniprintf+0x16>
 8005e84:	2200      	movs	r2, #0
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e7d6      	b.n	8005e3a <sniprintf+0x16>
 8005e8c:	2000001c 	.word	0x2000001c

08005e90 <siprintf>:
 8005e90:	b40e      	push	{r1, r2, r3}
 8005e92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e96:	b510      	push	{r4, lr}
 8005e98:	2400      	movs	r4, #0
 8005e9a:	b09d      	sub	sp, #116	@ 0x74
 8005e9c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e9e:	9002      	str	r0, [sp, #8]
 8005ea0:	9006      	str	r0, [sp, #24]
 8005ea2:	9107      	str	r1, [sp, #28]
 8005ea4:	9104      	str	r1, [sp, #16]
 8005ea6:	4809      	ldr	r0, [pc, #36]	@ (8005ecc <siprintf+0x3c>)
 8005ea8:	4909      	ldr	r1, [pc, #36]	@ (8005ed0 <siprintf+0x40>)
 8005eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eae:	9105      	str	r1, [sp, #20]
 8005eb0:	6800      	ldr	r0, [r0, #0]
 8005eb2:	a902      	add	r1, sp, #8
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005eb8:	f002 fbc4 	bl	8008644 <_svfiprintf_r>
 8005ebc:	9b02      	ldr	r3, [sp, #8]
 8005ebe:	701c      	strb	r4, [r3, #0]
 8005ec0:	b01d      	add	sp, #116	@ 0x74
 8005ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec6:	b003      	add	sp, #12
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	2000001c 	.word	0x2000001c
 8005ed0:	ffff0208 	.word	0xffff0208

08005ed4 <__sread>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005edc:	f000 f86c 	bl	8005fb8 <_read_r>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	bfab      	itete	ge
 8005ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee8:	181b      	addge	r3, r3, r0
 8005eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eee:	bfac      	ite	ge
 8005ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ef2:	81a3      	strhlt	r3, [r4, #12]
 8005ef4:	bd10      	pop	{r4, pc}

08005ef6 <__swrite>:
 8005ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005efa:	461f      	mov	r7, r3
 8005efc:	898b      	ldrh	r3, [r1, #12]
 8005efe:	4605      	mov	r5, r0
 8005f00:	05db      	lsls	r3, r3, #23
 8005f02:	460c      	mov	r4, r1
 8005f04:	4616      	mov	r6, r2
 8005f06:	d505      	bpl.n	8005f14 <__swrite+0x1e>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f10:	f000 f840 	bl	8005f94 <_lseek_r>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	4632      	mov	r2, r6
 8005f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	4628      	mov	r0, r5
 8005f20:	463b      	mov	r3, r7
 8005f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	f000 b857 	b.w	8005fdc <_write_r>

08005f2e <__sseek>:
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	460c      	mov	r4, r1
 8005f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f36:	f000 f82d 	bl	8005f94 <_lseek_r>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	bf15      	itete	ne
 8005f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f4a:	81a3      	strheq	r3, [r4, #12]
 8005f4c:	bf18      	it	ne
 8005f4e:	81a3      	strhne	r3, [r4, #12]
 8005f50:	bd10      	pop	{r4, pc}

08005f52 <__sclose>:
 8005f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f56:	f000 b80d 	b.w	8005f74 <_close_r>

08005f5a <memset>:
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d100      	bne.n	8005f64 <memset+0xa>
 8005f62:	4770      	bx	lr
 8005f64:	f803 1b01 	strb.w	r1, [r3], #1
 8005f68:	e7f9      	b.n	8005f5e <memset+0x4>
	...

08005f6c <_localeconv_r>:
 8005f6c:	4800      	ldr	r0, [pc, #0]	@ (8005f70 <_localeconv_r+0x4>)
 8005f6e:	4770      	bx	lr
 8005f70:	2000015c 	.word	0x2000015c

08005f74 <_close_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	2300      	movs	r3, #0
 8005f78:	4d05      	ldr	r5, [pc, #20]	@ (8005f90 <_close_r+0x1c>)
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fb f951 	bl	8001226 <_close>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_close_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_close_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20001384 	.word	0x20001384

08005f94 <_lseek_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4d05      	ldr	r5, [pc, #20]	@ (8005fb4 <_lseek_r+0x20>)
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fb f963 	bl	800126e <_lseek>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_lseek_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_lseek_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20001384 	.word	0x20001384

08005fb8 <_read_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4d05      	ldr	r5, [pc, #20]	@ (8005fd8 <_read_r+0x20>)
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb f8f4 	bl	80011b4 <_read>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_read_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_read_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	20001384 	.word	0x20001384

08005fdc <_write_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4d05      	ldr	r5, [pc, #20]	@ (8005ffc <_write_r+0x20>)
 8005fe8:	602a      	str	r2, [r5, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f7fb f8ff 	bl	80011ee <_write>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_write_r+0x1e>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_write_r+0x1e>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	20001384 	.word	0x20001384

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	@ (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	2000001c 	.word	0x2000001c

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	2600      	movs	r6, #0
 8006010:	4d0c      	ldr	r5, [pc, #48]	@ (8006044 <__libc_init_array+0x38>)
 8006012:	4c0d      	ldr	r4, [pc, #52]	@ (8006048 <__libc_init_array+0x3c>)
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	f003 fb6c 	bl	80096f8 <_init>
 8006020:	2600      	movs	r6, #0
 8006022:	4d0a      	ldr	r5, [pc, #40]	@ (800604c <__libc_init_array+0x40>)
 8006024:	4c0a      	ldr	r4, [pc, #40]	@ (8006050 <__libc_init_array+0x44>)
 8006026:	1b64      	subs	r4, r4, r5
 8006028:	10a4      	asrs	r4, r4, #2
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08009c34 	.word	0x08009c34
 8006048:	08009c34 	.word	0x08009c34
 800604c:	08009c34 	.word	0x08009c34
 8006050:	08009c38 	.word	0x08009c38

08006054 <__retarget_lock_init_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_acquire_recursive>:
 8006056:	4770      	bx	lr

08006058 <__retarget_lock_release_recursive>:
 8006058:	4770      	bx	lr

0800605a <memchr>:
 800605a:	4603      	mov	r3, r0
 800605c:	b510      	push	{r4, lr}
 800605e:	b2c9      	uxtb	r1, r1
 8006060:	4402      	add	r2, r0
 8006062:	4293      	cmp	r3, r2
 8006064:	4618      	mov	r0, r3
 8006066:	d101      	bne.n	800606c <memchr+0x12>
 8006068:	2000      	movs	r0, #0
 800606a:	e003      	b.n	8006074 <memchr+0x1a>
 800606c:	7804      	ldrb	r4, [r0, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	428c      	cmp	r4, r1
 8006072:	d1f6      	bne.n	8006062 <memchr+0x8>
 8006074:	bd10      	pop	{r4, pc}

08006076 <memcpy>:
 8006076:	440a      	add	r2, r1
 8006078:	4291      	cmp	r1, r2
 800607a:	f100 33ff 	add.w	r3, r0, #4294967295
 800607e:	d100      	bne.n	8006082 <memcpy+0xc>
 8006080:	4770      	bx	lr
 8006082:	b510      	push	{r4, lr}
 8006084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006088:	4291      	cmp	r1, r2
 800608a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608e:	d1f9      	bne.n	8006084 <memcpy+0xe>
 8006090:	bd10      	pop	{r4, pc}
	...

08006094 <nanf>:
 8006094:	4800      	ldr	r0, [pc, #0]	@ (8006098 <nanf+0x4>)
 8006096:	4770      	bx	lr
 8006098:	7fc00000 	.word	0x7fc00000

0800609c <quorem>:
 800609c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	6903      	ldr	r3, [r0, #16]
 80060a2:	690c      	ldr	r4, [r1, #16]
 80060a4:	4607      	mov	r7, r0
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	db7e      	blt.n	80061a8 <quorem+0x10c>
 80060aa:	3c01      	subs	r4, #1
 80060ac:	00a3      	lsls	r3, r4, #2
 80060ae:	f100 0514 	add.w	r5, r0, #20
 80060b2:	f101 0814 	add.w	r8, r1, #20
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c6:	3301      	adds	r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060d2:	d32e      	bcc.n	8006132 <quorem+0x96>
 80060d4:	f04f 0a00 	mov.w	sl, #0
 80060d8:	46c4      	mov	ip, r8
 80060da:	46ae      	mov	lr, r5
 80060dc:	46d3      	mov	fp, sl
 80060de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060e2:	b298      	uxth	r0, r3
 80060e4:	fb06 a000 	mla	r0, r6, r0, sl
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	0c02      	lsrs	r2, r0, #16
 80060ec:	fb06 2303 	mla	r3, r6, r3, r2
 80060f0:	f8de 2000 	ldr.w	r2, [lr]
 80060f4:	b280      	uxth	r0, r0
 80060f6:	b292      	uxth	r2, r2
 80060f8:	1a12      	subs	r2, r2, r0
 80060fa:	445a      	add	r2, fp
 80060fc:	f8de 0000 	ldr.w	r0, [lr]
 8006100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006104:	b29b      	uxth	r3, r3
 8006106:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800610a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800610e:	b292      	uxth	r2, r2
 8006110:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006114:	45e1      	cmp	r9, ip
 8006116:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800611a:	f84e 2b04 	str.w	r2, [lr], #4
 800611e:	d2de      	bcs.n	80060de <quorem+0x42>
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	58eb      	ldr	r3, [r5, r3]
 8006124:	b92b      	cbnz	r3, 8006132 <quorem+0x96>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	3b04      	subs	r3, #4
 800612a:	429d      	cmp	r5, r3
 800612c:	461a      	mov	r2, r3
 800612e:	d32f      	bcc.n	8006190 <quorem+0xf4>
 8006130:	613c      	str	r4, [r7, #16]
 8006132:	4638      	mov	r0, r7
 8006134:	f001 f9ca 	bl	80074cc <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	db25      	blt.n	8006188 <quorem+0xec>
 800613c:	4629      	mov	r1, r5
 800613e:	2000      	movs	r0, #0
 8006140:	f858 2b04 	ldr.w	r2, [r8], #4
 8006144:	f8d1 c000 	ldr.w	ip, [r1]
 8006148:	fa1f fe82 	uxth.w	lr, r2
 800614c:	fa1f f38c 	uxth.w	r3, ip
 8006150:	eba3 030e 	sub.w	r3, r3, lr
 8006154:	4403      	add	r3, r0
 8006156:	0c12      	lsrs	r2, r2, #16
 8006158:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800615c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006160:	b29b      	uxth	r3, r3
 8006162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006166:	45c1      	cmp	r9, r8
 8006168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800616c:	f841 3b04 	str.w	r3, [r1], #4
 8006170:	d2e6      	bcs.n	8006140 <quorem+0xa4>
 8006172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800617a:	b922      	cbnz	r2, 8006186 <quorem+0xea>
 800617c:	3b04      	subs	r3, #4
 800617e:	429d      	cmp	r5, r3
 8006180:	461a      	mov	r2, r3
 8006182:	d30b      	bcc.n	800619c <quorem+0x100>
 8006184:	613c      	str	r4, [r7, #16]
 8006186:	3601      	adds	r6, #1
 8006188:	4630      	mov	r0, r6
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	3b04      	subs	r3, #4
 8006194:	2a00      	cmp	r2, #0
 8006196:	d1cb      	bne.n	8006130 <quorem+0x94>
 8006198:	3c01      	subs	r4, #1
 800619a:	e7c6      	b.n	800612a <quorem+0x8e>
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	3b04      	subs	r3, #4
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	d1ef      	bne.n	8006184 <quorem+0xe8>
 80061a4:	3c01      	subs	r4, #1
 80061a6:	e7ea      	b.n	800617e <quorem+0xe2>
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7ee      	b.n	800618a <quorem+0xee>
 80061ac:	0000      	movs	r0, r0
	...

080061b0 <_dtoa_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	69c7      	ldr	r7, [r0, #28]
 80061ba:	b097      	sub	sp, #92	@ 0x5c
 80061bc:	4681      	mov	r9, r0
 80061be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80061c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061c4:	b97f      	cbnz	r7, 80061e6 <_dtoa_r+0x36>
 80061c6:	2010      	movs	r0, #16
 80061c8:	f000 fe0e 	bl	8006de8 <malloc>
 80061cc:	4602      	mov	r2, r0
 80061ce:	f8c9 001c 	str.w	r0, [r9, #28]
 80061d2:	b920      	cbnz	r0, 80061de <_dtoa_r+0x2e>
 80061d4:	21ef      	movs	r1, #239	@ 0xef
 80061d6:	4bac      	ldr	r3, [pc, #688]	@ (8006488 <_dtoa_r+0x2d8>)
 80061d8:	48ac      	ldr	r0, [pc, #688]	@ (800648c <_dtoa_r+0x2dc>)
 80061da:	f002 fc19 	bl	8008a10 <__assert_func>
 80061de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061e2:	6007      	str	r7, [r0, #0]
 80061e4:	60c7      	str	r7, [r0, #12]
 80061e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061ea:	6819      	ldr	r1, [r3, #0]
 80061ec:	b159      	cbz	r1, 8006206 <_dtoa_r+0x56>
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	2301      	movs	r3, #1
 80061f2:	4093      	lsls	r3, r2
 80061f4:	604a      	str	r2, [r1, #4]
 80061f6:	608b      	str	r3, [r1, #8]
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 feeb 	bl	8006fd4 <_Bfree>
 80061fe:	2200      	movs	r2, #0
 8006200:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	1e2b      	subs	r3, r5, #0
 8006208:	bfaf      	iteee	ge
 800620a:	2300      	movge	r3, #0
 800620c:	2201      	movlt	r2, #1
 800620e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006212:	9307      	strlt	r3, [sp, #28]
 8006214:	bfa8      	it	ge
 8006216:	6033      	strge	r3, [r6, #0]
 8006218:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800621c:	4b9c      	ldr	r3, [pc, #624]	@ (8006490 <_dtoa_r+0x2e0>)
 800621e:	bfb8      	it	lt
 8006220:	6032      	strlt	r2, [r6, #0]
 8006222:	ea33 0308 	bics.w	r3, r3, r8
 8006226:	d112      	bne.n	800624e <_dtoa_r+0x9e>
 8006228:	f242 730f 	movw	r3, #9999	@ 0x270f
 800622c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006234:	4323      	orrs	r3, r4
 8006236:	f000 855e 	beq.w	8006cf6 <_dtoa_r+0xb46>
 800623a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800623c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006494 <_dtoa_r+0x2e4>
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8560 	beq.w	8006d06 <_dtoa_r+0xb56>
 8006246:	f10a 0303 	add.w	r3, sl, #3
 800624a:	f000 bd5a 	b.w	8006d02 <_dtoa_r+0xb52>
 800624e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006252:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	f7fa fba3 	bl	80009a8 <__aeabi_dcmpeq>
 8006262:	4607      	mov	r7, r0
 8006264:	b158      	cbz	r0, 800627e <_dtoa_r+0xce>
 8006266:	2301      	movs	r3, #1
 8006268:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800626e:	b113      	cbz	r3, 8006276 <_dtoa_r+0xc6>
 8006270:	4b89      	ldr	r3, [pc, #548]	@ (8006498 <_dtoa_r+0x2e8>)
 8006272:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800649c <_dtoa_r+0x2ec>
 800627a:	f000 bd44 	b.w	8006d06 <_dtoa_r+0xb56>
 800627e:	ab14      	add	r3, sp, #80	@ 0x50
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	ab15      	add	r3, sp, #84	@ 0x54
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4648      	mov	r0, r9
 8006288:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800628c:	f001 fa36 	bl	80076fc <__d2b>
 8006290:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006294:	9003      	str	r0, [sp, #12]
 8006296:	2e00      	cmp	r6, #0
 8006298:	d078      	beq.n	800638c <_dtoa_r+0x1dc>
 800629a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800629e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062b0:	9712      	str	r7, [sp, #72]	@ 0x48
 80062b2:	4619      	mov	r1, r3
 80062b4:	2200      	movs	r2, #0
 80062b6:	4b7a      	ldr	r3, [pc, #488]	@ (80064a0 <_dtoa_r+0x2f0>)
 80062b8:	f7f9 ff56 	bl	8000168 <__aeabi_dsub>
 80062bc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006470 <_dtoa_r+0x2c0>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7fa f909 	bl	80004d8 <__aeabi_dmul>
 80062c6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006478 <_dtoa_r+0x2c8>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7f9 ff4e 	bl	800016c <__adddf3>
 80062d0:	4604      	mov	r4, r0
 80062d2:	4630      	mov	r0, r6
 80062d4:	460d      	mov	r5, r1
 80062d6:	f7fa f895 	bl	8000404 <__aeabi_i2d>
 80062da:	a369      	add	r3, pc, #420	@ (adr r3, 8006480 <_dtoa_r+0x2d0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7fa f8fa 	bl	80004d8 <__aeabi_dmul>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4620      	mov	r0, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7f9 ff3e 	bl	800016c <__adddf3>
 80062f0:	4604      	mov	r4, r0
 80062f2:	460d      	mov	r5, r1
 80062f4:	f7fa fba0 	bl	8000a38 <__aeabi_d2iz>
 80062f8:	2200      	movs	r2, #0
 80062fa:	4607      	mov	r7, r0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fb5b 	bl	80009bc <__aeabi_dcmplt>
 8006306:	b140      	cbz	r0, 800631a <_dtoa_r+0x16a>
 8006308:	4638      	mov	r0, r7
 800630a:	f7fa f87b 	bl	8000404 <__aeabi_i2d>
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	f7fa fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8006316:	b900      	cbnz	r0, 800631a <_dtoa_r+0x16a>
 8006318:	3f01      	subs	r7, #1
 800631a:	2f16      	cmp	r7, #22
 800631c:	d854      	bhi.n	80063c8 <_dtoa_r+0x218>
 800631e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006322:	4b60      	ldr	r3, [pc, #384]	@ (80064a4 <_dtoa_r+0x2f4>)
 8006324:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f7fa fb46 	bl	80009bc <__aeabi_dcmplt>
 8006330:	2800      	cmp	r0, #0
 8006332:	d04b      	beq.n	80063cc <_dtoa_r+0x21c>
 8006334:	2300      	movs	r3, #0
 8006336:	3f01      	subs	r7, #1
 8006338:	930f      	str	r3, [sp, #60]	@ 0x3c
 800633a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	bf49      	itett	mi
 8006342:	f1c3 0301 	rsbmi	r3, r3, #1
 8006346:	2300      	movpl	r3, #0
 8006348:	9304      	strmi	r3, [sp, #16]
 800634a:	2300      	movmi	r3, #0
 800634c:	9209      	str	r2, [sp, #36]	@ 0x24
 800634e:	bf54      	ite	pl
 8006350:	9304      	strpl	r3, [sp, #16]
 8006352:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006354:	2f00      	cmp	r7, #0
 8006356:	db3b      	blt.n	80063d0 <_dtoa_r+0x220>
 8006358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635a:	970e      	str	r7, [sp, #56]	@ 0x38
 800635c:	443b      	add	r3, r7
 800635e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006360:	2300      	movs	r3, #0
 8006362:	930a      	str	r3, [sp, #40]	@ 0x28
 8006364:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006366:	2b09      	cmp	r3, #9
 8006368:	d865      	bhi.n	8006436 <_dtoa_r+0x286>
 800636a:	2b05      	cmp	r3, #5
 800636c:	bfc4      	itt	gt
 800636e:	3b04      	subgt	r3, #4
 8006370:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006372:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006374:	bfc8      	it	gt
 8006376:	2400      	movgt	r4, #0
 8006378:	f1a3 0302 	sub.w	r3, r3, #2
 800637c:	bfd8      	it	le
 800637e:	2401      	movle	r4, #1
 8006380:	2b03      	cmp	r3, #3
 8006382:	d864      	bhi.n	800644e <_dtoa_r+0x29e>
 8006384:	e8df f003 	tbb	[pc, r3]
 8006388:	2c385553 	.word	0x2c385553
 800638c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006390:	441e      	add	r6, r3
 8006392:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006396:	2b20      	cmp	r3, #32
 8006398:	bfc1      	itttt	gt
 800639a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800639e:	fa08 f803 	lslgt.w	r8, r8, r3
 80063a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063aa:	bfd6      	itet	le
 80063ac:	f1c3 0320 	rsble	r3, r3, #32
 80063b0:	ea48 0003 	orrgt.w	r0, r8, r3
 80063b4:	fa04 f003 	lslle.w	r0, r4, r3
 80063b8:	f7fa f814 	bl	80003e4 <__aeabi_ui2d>
 80063bc:	2201      	movs	r2, #1
 80063be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063c2:	3e01      	subs	r6, #1
 80063c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80063c6:	e774      	b.n	80062b2 <_dtoa_r+0x102>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7b5      	b.n	8006338 <_dtoa_r+0x188>
 80063cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063ce:	e7b4      	b.n	800633a <_dtoa_r+0x18a>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	1bdb      	subs	r3, r3, r7
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	427b      	negs	r3, r7
 80063d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063da:	2300      	movs	r3, #0
 80063dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80063de:	e7c1      	b.n	8006364 <_dtoa_r+0x1b4>
 80063e0:	2301      	movs	r3, #1
 80063e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063e6:	eb07 0b03 	add.w	fp, r7, r3
 80063ea:	f10b 0301 	add.w	r3, fp, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	9308      	str	r3, [sp, #32]
 80063f2:	bfb8      	it	lt
 80063f4:	2301      	movlt	r3, #1
 80063f6:	e006      	b.n	8006406 <_dtoa_r+0x256>
 80063f8:	2301      	movs	r3, #1
 80063fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd28      	ble.n	8006454 <_dtoa_r+0x2a4>
 8006402:	469b      	mov	fp, r3
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	2100      	movs	r1, #0
 8006408:	2204      	movs	r2, #4
 800640a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800640e:	f102 0514 	add.w	r5, r2, #20
 8006412:	429d      	cmp	r5, r3
 8006414:	d926      	bls.n	8006464 <_dtoa_r+0x2b4>
 8006416:	6041      	str	r1, [r0, #4]
 8006418:	4648      	mov	r0, r9
 800641a:	f000 fd9b 	bl	8006f54 <_Balloc>
 800641e:	4682      	mov	sl, r0
 8006420:	2800      	cmp	r0, #0
 8006422:	d143      	bne.n	80064ac <_dtoa_r+0x2fc>
 8006424:	4602      	mov	r2, r0
 8006426:	f240 11af 	movw	r1, #431	@ 0x1af
 800642a:	4b1f      	ldr	r3, [pc, #124]	@ (80064a8 <_dtoa_r+0x2f8>)
 800642c:	e6d4      	b.n	80061d8 <_dtoa_r+0x28>
 800642e:	2300      	movs	r3, #0
 8006430:	e7e3      	b.n	80063fa <_dtoa_r+0x24a>
 8006432:	2300      	movs	r3, #0
 8006434:	e7d5      	b.n	80063e2 <_dtoa_r+0x232>
 8006436:	2401      	movs	r4, #1
 8006438:	2300      	movs	r3, #0
 800643a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800643c:	9320      	str	r3, [sp, #128]	@ 0x80
 800643e:	f04f 3bff 	mov.w	fp, #4294967295
 8006442:	2200      	movs	r2, #0
 8006444:	2312      	movs	r3, #18
 8006446:	f8cd b020 	str.w	fp, [sp, #32]
 800644a:	9221      	str	r2, [sp, #132]	@ 0x84
 800644c:	e7db      	b.n	8006406 <_dtoa_r+0x256>
 800644e:	2301      	movs	r3, #1
 8006450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006452:	e7f4      	b.n	800643e <_dtoa_r+0x28e>
 8006454:	f04f 0b01 	mov.w	fp, #1
 8006458:	465b      	mov	r3, fp
 800645a:	f8cd b020 	str.w	fp, [sp, #32]
 800645e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006462:	e7d0      	b.n	8006406 <_dtoa_r+0x256>
 8006464:	3101      	adds	r1, #1
 8006466:	0052      	lsls	r2, r2, #1
 8006468:	e7d1      	b.n	800640e <_dtoa_r+0x25e>
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w
 8006470:	636f4361 	.word	0x636f4361
 8006474:	3fd287a7 	.word	0x3fd287a7
 8006478:	8b60c8b3 	.word	0x8b60c8b3
 800647c:	3fc68a28 	.word	0x3fc68a28
 8006480:	509f79fb 	.word	0x509f79fb
 8006484:	3fd34413 	.word	0x3fd34413
 8006488:	08009848 	.word	0x08009848
 800648c:	0800985f 	.word	0x0800985f
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	08009844 	.word	0x08009844
 8006498:	08009813 	.word	0x08009813
 800649c:	08009812 	.word	0x08009812
 80064a0:	3ff80000 	.word	0x3ff80000
 80064a4:	08009a10 	.word	0x08009a10
 80064a8:	080098b7 	.word	0x080098b7
 80064ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064b0:	6018      	str	r0, [r3, #0]
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	2b0e      	cmp	r3, #14
 80064b6:	f200 80a1 	bhi.w	80065fc <_dtoa_r+0x44c>
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	f000 809e 	beq.w	80065fc <_dtoa_r+0x44c>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	dd33      	ble.n	800652c <_dtoa_r+0x37c>
 80064c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006738 <_dtoa_r+0x588>)
 80064c6:	f007 020f 	and.w	r2, r7, #15
 80064ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ce:	05f8      	lsls	r0, r7, #23
 80064d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80064d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064dc:	d516      	bpl.n	800650c <_dtoa_r+0x35c>
 80064de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e2:	4b96      	ldr	r3, [pc, #600]	@ (800673c <_dtoa_r+0x58c>)
 80064e4:	2603      	movs	r6, #3
 80064e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064ea:	f7fa f91f 	bl	800072c <__aeabi_ddiv>
 80064ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064f2:	f004 040f 	and.w	r4, r4, #15
 80064f6:	4d91      	ldr	r5, [pc, #580]	@ (800673c <_dtoa_r+0x58c>)
 80064f8:	b954      	cbnz	r4, 8006510 <_dtoa_r+0x360>
 80064fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006502:	f7fa f913 	bl	800072c <__aeabi_ddiv>
 8006506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800650a:	e028      	b.n	800655e <_dtoa_r+0x3ae>
 800650c:	2602      	movs	r6, #2
 800650e:	e7f2      	b.n	80064f6 <_dtoa_r+0x346>
 8006510:	07e1      	lsls	r1, r4, #31
 8006512:	d508      	bpl.n	8006526 <_dtoa_r+0x376>
 8006514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800651c:	f7f9 ffdc 	bl	80004d8 <__aeabi_dmul>
 8006520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006524:	3601      	adds	r6, #1
 8006526:	1064      	asrs	r4, r4, #1
 8006528:	3508      	adds	r5, #8
 800652a:	e7e5      	b.n	80064f8 <_dtoa_r+0x348>
 800652c:	f000 80af 	beq.w	800668e <_dtoa_r+0x4de>
 8006530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006534:	427c      	negs	r4, r7
 8006536:	4b80      	ldr	r3, [pc, #512]	@ (8006738 <_dtoa_r+0x588>)
 8006538:	f004 020f 	and.w	r2, r4, #15
 800653c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	2602      	movs	r6, #2
 800654a:	2300      	movs	r3, #0
 800654c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006550:	4d7a      	ldr	r5, [pc, #488]	@ (800673c <_dtoa_r+0x58c>)
 8006552:	1124      	asrs	r4, r4, #4
 8006554:	2c00      	cmp	r4, #0
 8006556:	f040 808f 	bne.w	8006678 <_dtoa_r+0x4c8>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d3      	bne.n	8006506 <_dtoa_r+0x356>
 800655e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8094 	beq.w	8006692 <_dtoa_r+0x4e2>
 800656a:	2200      	movs	r2, #0
 800656c:	4620      	mov	r0, r4
 800656e:	4629      	mov	r1, r5
 8006570:	4b73      	ldr	r3, [pc, #460]	@ (8006740 <_dtoa_r+0x590>)
 8006572:	f7fa fa23 	bl	80009bc <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	f000 808b 	beq.w	8006692 <_dtoa_r+0x4e2>
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8087 	beq.w	8006692 <_dtoa_r+0x4e2>
 8006584:	f1bb 0f00 	cmp.w	fp, #0
 8006588:	dd34      	ble.n	80065f4 <_dtoa_r+0x444>
 800658a:	4620      	mov	r0, r4
 800658c:	2200      	movs	r2, #0
 800658e:	4629      	mov	r1, r5
 8006590:	4b6c      	ldr	r3, [pc, #432]	@ (8006744 <_dtoa_r+0x594>)
 8006592:	f7f9 ffa1 	bl	80004d8 <__aeabi_dmul>
 8006596:	465c      	mov	r4, fp
 8006598:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800659c:	f107 38ff 	add.w	r8, r7, #4294967295
 80065a0:	3601      	adds	r6, #1
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7f9 ff2e 	bl	8000404 <__aeabi_i2d>
 80065a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	2200      	movs	r2, #0
 80065b2:	4b65      	ldr	r3, [pc, #404]	@ (8006748 <_dtoa_r+0x598>)
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	4605      	mov	r5, r0
 80065ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065be:	2c00      	cmp	r4, #0
 80065c0:	d16a      	bne.n	8006698 <_dtoa_r+0x4e8>
 80065c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c6:	2200      	movs	r2, #0
 80065c8:	4b60      	ldr	r3, [pc, #384]	@ (800674c <_dtoa_r+0x59c>)
 80065ca:	f7f9 fdcd 	bl	8000168 <__aeabi_dsub>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4633      	mov	r3, r6
 80065da:	f7fa fa0d 	bl	80009f8 <__aeabi_dcmpgt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f040 8298 	bne.w	8006b14 <_dtoa_r+0x964>
 80065e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e8:	462a      	mov	r2, r5
 80065ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065ee:	f7fa f9e5 	bl	80009bc <__aeabi_dcmplt>
 80065f2:	bb38      	cbnz	r0, 8006644 <_dtoa_r+0x494>
 80065f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f2c0 8157 	blt.w	80068b2 <_dtoa_r+0x702>
 8006604:	2f0e      	cmp	r7, #14
 8006606:	f300 8154 	bgt.w	80068b2 <_dtoa_r+0x702>
 800660a:	4b4b      	ldr	r3, [pc, #300]	@ (8006738 <_dtoa_r+0x588>)
 800660c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006614:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800661a:	2b00      	cmp	r3, #0
 800661c:	f280 80e5 	bge.w	80067ea <_dtoa_r+0x63a>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f300 80e1 	bgt.w	80067ea <_dtoa_r+0x63a>
 8006628:	d10c      	bne.n	8006644 <_dtoa_r+0x494>
 800662a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662e:	2200      	movs	r2, #0
 8006630:	4b46      	ldr	r3, [pc, #280]	@ (800674c <_dtoa_r+0x59c>)
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800663a:	f7fa f9d3 	bl	80009e4 <__aeabi_dcmpge>
 800663e:	2800      	cmp	r0, #0
 8006640:	f000 8266 	beq.w	8006b10 <_dtoa_r+0x960>
 8006644:	2400      	movs	r4, #0
 8006646:	4625      	mov	r5, r4
 8006648:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800664a:	4656      	mov	r6, sl
 800664c:	ea6f 0803 	mvn.w	r8, r3
 8006650:	2700      	movs	r7, #0
 8006652:	4621      	mov	r1, r4
 8006654:	4648      	mov	r0, r9
 8006656:	f000 fcbd 	bl	8006fd4 <_Bfree>
 800665a:	2d00      	cmp	r5, #0
 800665c:	f000 80bd 	beq.w	80067da <_dtoa_r+0x62a>
 8006660:	b12f      	cbz	r7, 800666e <_dtoa_r+0x4be>
 8006662:	42af      	cmp	r7, r5
 8006664:	d003      	beq.n	800666e <_dtoa_r+0x4be>
 8006666:	4639      	mov	r1, r7
 8006668:	4648      	mov	r0, r9
 800666a:	f000 fcb3 	bl	8006fd4 <_Bfree>
 800666e:	4629      	mov	r1, r5
 8006670:	4648      	mov	r0, r9
 8006672:	f000 fcaf 	bl	8006fd4 <_Bfree>
 8006676:	e0b0      	b.n	80067da <_dtoa_r+0x62a>
 8006678:	07e2      	lsls	r2, r4, #31
 800667a:	d505      	bpl.n	8006688 <_dtoa_r+0x4d8>
 800667c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	2301      	movs	r3, #1
 8006686:	3601      	adds	r6, #1
 8006688:	1064      	asrs	r4, r4, #1
 800668a:	3508      	adds	r5, #8
 800668c:	e762      	b.n	8006554 <_dtoa_r+0x3a4>
 800668e:	2602      	movs	r6, #2
 8006690:	e765      	b.n	800655e <_dtoa_r+0x3ae>
 8006692:	46b8      	mov	r8, r7
 8006694:	9c08      	ldr	r4, [sp, #32]
 8006696:	e784      	b.n	80065a2 <_dtoa_r+0x3f2>
 8006698:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <_dtoa_r+0x588>)
 800669a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800669c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066a4:	4454      	add	r4, sl
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d054      	beq.n	8006754 <_dtoa_r+0x5a4>
 80066aa:	2000      	movs	r0, #0
 80066ac:	4928      	ldr	r1, [pc, #160]	@ (8006750 <_dtoa_r+0x5a0>)
 80066ae:	f7fa f83d 	bl	800072c <__aeabi_ddiv>
 80066b2:	4633      	mov	r3, r6
 80066b4:	462a      	mov	r2, r5
 80066b6:	f7f9 fd57 	bl	8000168 <__aeabi_dsub>
 80066ba:	4656      	mov	r6, sl
 80066bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c4:	f7fa f9b8 	bl	8000a38 <__aeabi_d2iz>
 80066c8:	4605      	mov	r5, r0
 80066ca:	f7f9 fe9b 	bl	8000404 <__aeabi_i2d>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d6:	f7f9 fd47 	bl	8000168 <__aeabi_dsub>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	3530      	adds	r5, #48	@ 0x30
 80066e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066e8:	f806 5b01 	strb.w	r5, [r6], #1
 80066ec:	f7fa f966 	bl	80009bc <__aeabi_dcmplt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d172      	bne.n	80067da <_dtoa_r+0x62a>
 80066f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066f8:	2000      	movs	r0, #0
 80066fa:	4911      	ldr	r1, [pc, #68]	@ (8006740 <_dtoa_r+0x590>)
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006704:	f7fa f95a 	bl	80009bc <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	f040 80b4 	bne.w	8006876 <_dtoa_r+0x6c6>
 800670e:	42a6      	cmp	r6, r4
 8006710:	f43f af70 	beq.w	80065f4 <_dtoa_r+0x444>
 8006714:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006718:	2200      	movs	r2, #0
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <_dtoa_r+0x594>)
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	2200      	movs	r2, #0
 8006722:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <_dtoa_r+0x594>)
 800672c:	f7f9 fed4 	bl	80004d8 <__aeabi_dmul>
 8006730:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006734:	e7c4      	b.n	80066c0 <_dtoa_r+0x510>
 8006736:	bf00      	nop
 8006738:	08009a10 	.word	0x08009a10
 800673c:	080099e8 	.word	0x080099e8
 8006740:	3ff00000 	.word	0x3ff00000
 8006744:	40240000 	.word	0x40240000
 8006748:	401c0000 	.word	0x401c0000
 800674c:	40140000 	.word	0x40140000
 8006750:	3fe00000 	.word	0x3fe00000
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 febe 	bl	80004d8 <__aeabi_dmul>
 800675c:	4656      	mov	r6, sl
 800675e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006762:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006768:	f7fa f966 	bl	8000a38 <__aeabi_d2iz>
 800676c:	4605      	mov	r5, r0
 800676e:	f7f9 fe49 	bl	8000404 <__aeabi_i2d>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677a:	f7f9 fcf5 	bl	8000168 <__aeabi_dsub>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	3530      	adds	r5, #48	@ 0x30
 8006784:	f806 5b01 	strb.w	r5, [r6], #1
 8006788:	42a6      	cmp	r6, r4
 800678a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	d124      	bne.n	80067de <_dtoa_r+0x62e>
 8006794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006798:	4bae      	ldr	r3, [pc, #696]	@ (8006a54 <_dtoa_r+0x8a4>)
 800679a:	f7f9 fce7 	bl	800016c <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a6:	f7fa f927 	bl	80009f8 <__aeabi_dcmpgt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d163      	bne.n	8006876 <_dtoa_r+0x6c6>
 80067ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067b2:	2000      	movs	r0, #0
 80067b4:	49a7      	ldr	r1, [pc, #668]	@ (8006a54 <_dtoa_r+0x8a4>)
 80067b6:	f7f9 fcd7 	bl	8000168 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c2:	f7fa f8fb 	bl	80009bc <__aeabi_dcmplt>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f af14 	beq.w	80065f4 <_dtoa_r+0x444>
 80067cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067ce:	1e73      	subs	r3, r6, #1
 80067d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d6:	2b30      	cmp	r3, #48	@ 0x30
 80067d8:	d0f8      	beq.n	80067cc <_dtoa_r+0x61c>
 80067da:	4647      	mov	r7, r8
 80067dc:	e03b      	b.n	8006856 <_dtoa_r+0x6a6>
 80067de:	4b9e      	ldr	r3, [pc, #632]	@ (8006a58 <_dtoa_r+0x8a8>)
 80067e0:	f7f9 fe7a 	bl	80004d8 <__aeabi_dmul>
 80067e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067e8:	e7bc      	b.n	8006764 <_dtoa_r+0x5b4>
 80067ea:	4656      	mov	r6, sl
 80067ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80067f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 ff98 	bl	800072c <__aeabi_ddiv>
 80067fc:	f7fa f91c 	bl	8000a38 <__aeabi_d2iz>
 8006800:	4680      	mov	r8, r0
 8006802:	f7f9 fdff 	bl	8000404 <__aeabi_i2d>
 8006806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680a:	f7f9 fe65 	bl	80004d8 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4620      	mov	r0, r4
 8006814:	4629      	mov	r1, r5
 8006816:	f7f9 fca7 	bl	8000168 <__aeabi_dsub>
 800681a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800681e:	9d08      	ldr	r5, [sp, #32]
 8006820:	f806 4b01 	strb.w	r4, [r6], #1
 8006824:	eba6 040a 	sub.w	r4, r6, sl
 8006828:	42a5      	cmp	r5, r4
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	d133      	bne.n	8006898 <_dtoa_r+0x6e8>
 8006830:	f7f9 fc9c 	bl	800016c <__adddf3>
 8006834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	f7fa f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 8006840:	b9c0      	cbnz	r0, 8006874 <_dtoa_r+0x6c4>
 8006842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800684e:	b110      	cbz	r0, 8006856 <_dtoa_r+0x6a6>
 8006850:	f018 0f01 	tst.w	r8, #1
 8006854:	d10e      	bne.n	8006874 <_dtoa_r+0x6c4>
 8006856:	4648      	mov	r0, r9
 8006858:	9903      	ldr	r1, [sp, #12]
 800685a:	f000 fbbb 	bl	8006fd4 <_Bfree>
 800685e:	2300      	movs	r3, #0
 8006860:	7033      	strb	r3, [r6, #0]
 8006862:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006864:	3701      	adds	r7, #1
 8006866:	601f      	str	r7, [r3, #0]
 8006868:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 824b 	beq.w	8006d06 <_dtoa_r+0xb56>
 8006870:	601e      	str	r6, [r3, #0]
 8006872:	e248      	b.n	8006d06 <_dtoa_r+0xb56>
 8006874:	46b8      	mov	r8, r7
 8006876:	4633      	mov	r3, r6
 8006878:	461e      	mov	r6, r3
 800687a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687e:	2a39      	cmp	r2, #57	@ 0x39
 8006880:	d106      	bne.n	8006890 <_dtoa_r+0x6e0>
 8006882:	459a      	cmp	sl, r3
 8006884:	d1f8      	bne.n	8006878 <_dtoa_r+0x6c8>
 8006886:	2230      	movs	r2, #48	@ 0x30
 8006888:	f108 0801 	add.w	r8, r8, #1
 800688c:	f88a 2000 	strb.w	r2, [sl]
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	3201      	adds	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e7a0      	b.n	80067da <_dtoa_r+0x62a>
 8006898:	2200      	movs	r2, #0
 800689a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a58 <_dtoa_r+0x8a8>)
 800689c:	f7f9 fe1c 	bl	80004d8 <__aeabi_dmul>
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4604      	mov	r4, r0
 80068a6:	460d      	mov	r5, r1
 80068a8:	f7fa f87e 	bl	80009a8 <__aeabi_dcmpeq>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d09f      	beq.n	80067f0 <_dtoa_r+0x640>
 80068b0:	e7d1      	b.n	8006856 <_dtoa_r+0x6a6>
 80068b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f000 80ea 	beq.w	8006a8e <_dtoa_r+0x8de>
 80068ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068bc:	2a01      	cmp	r2, #1
 80068be:	f300 80cd 	bgt.w	8006a5c <_dtoa_r+0x8ac>
 80068c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	f000 80c1 	beq.w	8006a4c <_dtoa_r+0x89c>
 80068ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068d0:	9e04      	ldr	r6, [sp, #16]
 80068d2:	9a04      	ldr	r2, [sp, #16]
 80068d4:	2101      	movs	r1, #1
 80068d6:	441a      	add	r2, r3
 80068d8:	9204      	str	r2, [sp, #16]
 80068da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068dc:	4648      	mov	r0, r9
 80068de:	441a      	add	r2, r3
 80068e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068e2:	f000 fc75 	bl	80071d0 <__i2b>
 80068e6:	4605      	mov	r5, r0
 80068e8:	b166      	cbz	r6, 8006904 <_dtoa_r+0x754>
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dd09      	ble.n	8006904 <_dtoa_r+0x754>
 80068f0:	42b3      	cmp	r3, r6
 80068f2:	bfa8      	it	ge
 80068f4:	4633      	movge	r3, r6
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	1af6      	subs	r6, r6, r3
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	9204      	str	r2, [sp, #16]
 80068fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	9309      	str	r3, [sp, #36]	@ 0x24
 8006904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006906:	b30b      	cbz	r3, 800694c <_dtoa_r+0x79c>
 8006908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80c6 	beq.w	8006a9c <_dtoa_r+0x8ec>
 8006910:	2c00      	cmp	r4, #0
 8006912:	f000 80c0 	beq.w	8006a96 <_dtoa_r+0x8e6>
 8006916:	4629      	mov	r1, r5
 8006918:	4622      	mov	r2, r4
 800691a:	4648      	mov	r0, r9
 800691c:	f000 fd10 	bl	8007340 <__pow5mult>
 8006920:	9a03      	ldr	r2, [sp, #12]
 8006922:	4601      	mov	r1, r0
 8006924:	4605      	mov	r5, r0
 8006926:	4648      	mov	r0, r9
 8006928:	f000 fc68 	bl	80071fc <__multiply>
 800692c:	9903      	ldr	r1, [sp, #12]
 800692e:	4680      	mov	r8, r0
 8006930:	4648      	mov	r0, r9
 8006932:	f000 fb4f 	bl	8006fd4 <_Bfree>
 8006936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006938:	1b1b      	subs	r3, r3, r4
 800693a:	930a      	str	r3, [sp, #40]	@ 0x28
 800693c:	f000 80b1 	beq.w	8006aa2 <_dtoa_r+0x8f2>
 8006940:	4641      	mov	r1, r8
 8006942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006944:	4648      	mov	r0, r9
 8006946:	f000 fcfb 	bl	8007340 <__pow5mult>
 800694a:	9003      	str	r0, [sp, #12]
 800694c:	2101      	movs	r1, #1
 800694e:	4648      	mov	r0, r9
 8006950:	f000 fc3e 	bl	80071d0 <__i2b>
 8006954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006956:	4604      	mov	r4, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 81d8 	beq.w	8006d0e <_dtoa_r+0xb5e>
 800695e:	461a      	mov	r2, r3
 8006960:	4601      	mov	r1, r0
 8006962:	4648      	mov	r0, r9
 8006964:	f000 fcec 	bl	8007340 <__pow5mult>
 8006968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800696a:	4604      	mov	r4, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	f300 809f 	bgt.w	8006ab0 <_dtoa_r+0x900>
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8097 	bne.w	8006aa8 <_dtoa_r+0x8f8>
 800697a:	9b07      	ldr	r3, [sp, #28]
 800697c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 8093 	bne.w	8006aac <_dtoa_r+0x8fc>
 8006986:	9b07      	ldr	r3, [sp, #28]
 8006988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800698c:	0d1b      	lsrs	r3, r3, #20
 800698e:	051b      	lsls	r3, r3, #20
 8006990:	b133      	cbz	r3, 80069a0 <_dtoa_r+0x7f0>
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	3301      	adds	r3, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	3301      	adds	r3, #1
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	2301      	movs	r3, #1
 80069a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 81b8 	beq.w	8006d1a <_dtoa_r+0xb6a>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069b0:	6918      	ldr	r0, [r3, #16]
 80069b2:	f000 fbc1 	bl	8007138 <__hi0bits>
 80069b6:	f1c0 0020 	rsb	r0, r0, #32
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	4418      	add	r0, r3
 80069be:	f010 001f 	ands.w	r0, r0, #31
 80069c2:	f000 8082 	beq.w	8006aca <_dtoa_r+0x91a>
 80069c6:	f1c0 0320 	rsb	r3, r0, #32
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	dd73      	ble.n	8006ab6 <_dtoa_r+0x906>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	f1c0 001c 	rsb	r0, r0, #28
 80069d4:	4403      	add	r3, r0
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069da:	4406      	add	r6, r0
 80069dc:	4403      	add	r3, r0
 80069de:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dd05      	ble.n	80069f2 <_dtoa_r+0x842>
 80069e6:	461a      	mov	r2, r3
 80069e8:	4648      	mov	r0, r9
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	f000 fd02 	bl	80073f4 <__lshift>
 80069f0:	9003      	str	r0, [sp, #12]
 80069f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd05      	ble.n	8006a04 <_dtoa_r+0x854>
 80069f8:	4621      	mov	r1, r4
 80069fa:	461a      	mov	r2, r3
 80069fc:	4648      	mov	r0, r9
 80069fe:	f000 fcf9 	bl	80073f4 <__lshift>
 8006a02:	4604      	mov	r4, r0
 8006a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d061      	beq.n	8006ace <_dtoa_r+0x91e>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	9803      	ldr	r0, [sp, #12]
 8006a0e:	f000 fd5d 	bl	80074cc <__mcmp>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	da5b      	bge.n	8006ace <_dtoa_r+0x91e>
 8006a16:	2300      	movs	r3, #0
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4648      	mov	r0, r9
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	f000 fafb 	bl	8007018 <__multadd>
 8006a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a24:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a28:	9003      	str	r0, [sp, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8177 	beq.w	8006d1e <_dtoa_r+0xb6e>
 8006a30:	4629      	mov	r1, r5
 8006a32:	2300      	movs	r3, #0
 8006a34:	220a      	movs	r2, #10
 8006a36:	4648      	mov	r0, r9
 8006a38:	f000 faee 	bl	8007018 <__multadd>
 8006a3c:	f1bb 0f00 	cmp.w	fp, #0
 8006a40:	4605      	mov	r5, r0
 8006a42:	dc6f      	bgt.n	8006b24 <_dtoa_r+0x974>
 8006a44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	dc49      	bgt.n	8006ade <_dtoa_r+0x92e>
 8006a4a:	e06b      	b.n	8006b24 <_dtoa_r+0x974>
 8006a4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a52:	e73c      	b.n	80068ce <_dtoa_r+0x71e>
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	40240000 	.word	0x40240000
 8006a5c:	9b08      	ldr	r3, [sp, #32]
 8006a5e:	1e5c      	subs	r4, r3, #1
 8006a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	db09      	blt.n	8006a7a <_dtoa_r+0x8ca>
 8006a66:	1b1c      	subs	r4, r3, r4
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f6bf af30 	bge.w	80068d0 <_dtoa_r+0x720>
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	9a08      	ldr	r2, [sp, #32]
 8006a74:	1a9e      	subs	r6, r3, r2
 8006a76:	2300      	movs	r3, #0
 8006a78:	e72b      	b.n	80068d2 <_dtoa_r+0x722>
 8006a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a7e:	1ae3      	subs	r3, r4, r3
 8006a80:	441a      	add	r2, r3
 8006a82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a84:	9e04      	ldr	r6, [sp, #16]
 8006a86:	2400      	movs	r4, #0
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a8c:	e721      	b.n	80068d2 <_dtoa_r+0x722>
 8006a8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a90:	9e04      	ldr	r6, [sp, #16]
 8006a92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a94:	e728      	b.n	80068e8 <_dtoa_r+0x738>
 8006a96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a9a:	e751      	b.n	8006940 <_dtoa_r+0x790>
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a9e:	9903      	ldr	r1, [sp, #12]
 8006aa0:	e750      	b.n	8006944 <_dtoa_r+0x794>
 8006aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aa6:	e751      	b.n	800694c <_dtoa_r+0x79c>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e779      	b.n	80069a0 <_dtoa_r+0x7f0>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	e777      	b.n	80069a0 <_dtoa_r+0x7f0>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab4:	e779      	b.n	80069aa <_dtoa_r+0x7fa>
 8006ab6:	d093      	beq.n	80069e0 <_dtoa_r+0x830>
 8006ab8:	9a04      	ldr	r2, [sp, #16]
 8006aba:	331c      	adds	r3, #28
 8006abc:	441a      	add	r2, r3
 8006abe:	9204      	str	r2, [sp, #16]
 8006ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac2:	441e      	add	r6, r3
 8006ac4:	441a      	add	r2, r3
 8006ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac8:	e78a      	b.n	80069e0 <_dtoa_r+0x830>
 8006aca:	4603      	mov	r3, r0
 8006acc:	e7f4      	b.n	8006ab8 <_dtoa_r+0x908>
 8006ace:	9b08      	ldr	r3, [sp, #32]
 8006ad0:	46b8      	mov	r8, r7
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc20      	bgt.n	8006b18 <_dtoa_r+0x968>
 8006ad6:	469b      	mov	fp, r3
 8006ad8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	dd1e      	ble.n	8006b1c <_dtoa_r+0x96c>
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	f47f adb1 	bne.w	8006648 <_dtoa_r+0x498>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	465b      	mov	r3, fp
 8006aea:	2205      	movs	r2, #5
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 fa93 	bl	8007018 <__multadd>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4604      	mov	r4, r0
 8006af6:	9803      	ldr	r0, [sp, #12]
 8006af8:	f000 fce8 	bl	80074cc <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f77f ada3 	ble.w	8006648 <_dtoa_r+0x498>
 8006b02:	4656      	mov	r6, sl
 8006b04:	2331      	movs	r3, #49	@ 0x31
 8006b06:	f108 0801 	add.w	r8, r8, #1
 8006b0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006b0e:	e59f      	b.n	8006650 <_dtoa_r+0x4a0>
 8006b10:	46b8      	mov	r8, r7
 8006b12:	9c08      	ldr	r4, [sp, #32]
 8006b14:	4625      	mov	r5, r4
 8006b16:	e7f4      	b.n	8006b02 <_dtoa_r+0x952>
 8006b18:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8101 	beq.w	8006d26 <_dtoa_r+0xb76>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	dd05      	ble.n	8006b34 <_dtoa_r+0x984>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	f000 fc61 	bl	80073f4 <__lshift>
 8006b32:	4605      	mov	r5, r0
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d05c      	beq.n	8006bf4 <_dtoa_r+0xa44>
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	6869      	ldr	r1, [r5, #4]
 8006b3e:	f000 fa09 	bl	8006f54 <_Balloc>
 8006b42:	4606      	mov	r6, r0
 8006b44:	b928      	cbnz	r0, 8006b52 <_dtoa_r+0x9a2>
 8006b46:	4602      	mov	r2, r0
 8006b48:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b4c:	4b80      	ldr	r3, [pc, #512]	@ (8006d50 <_dtoa_r+0xba0>)
 8006b4e:	f7ff bb43 	b.w	80061d8 <_dtoa_r+0x28>
 8006b52:	692a      	ldr	r2, [r5, #16]
 8006b54:	f105 010c 	add.w	r1, r5, #12
 8006b58:	3202      	adds	r2, #2
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	300c      	adds	r0, #12
 8006b5e:	f7ff fa8a 	bl	8006076 <memcpy>
 8006b62:	2201      	movs	r2, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4648      	mov	r0, r9
 8006b68:	f000 fc44 	bl	80073f4 <__lshift>
 8006b6c:	462f      	mov	r7, r5
 8006b6e:	4605      	mov	r5, r0
 8006b70:	f10a 0301 	add.w	r3, sl, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	eb0a 030b 	add.w	r3, sl, fp
 8006b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4621      	mov	r1, r4
 8006b88:	9803      	ldr	r0, [sp, #12]
 8006b8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b8e:	f7ff fa85 	bl	800609c <quorem>
 8006b92:	4603      	mov	r3, r0
 8006b94:	4639      	mov	r1, r7
 8006b96:	3330      	adds	r3, #48	@ 0x30
 8006b98:	9006      	str	r0, [sp, #24]
 8006b9a:	9803      	ldr	r0, [sp, #12]
 8006b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b9e:	f000 fc95 	bl	80074cc <__mcmp>
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	9008      	str	r0, [sp, #32]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4648      	mov	r0, r9
 8006baa:	f000 fcab 	bl	8007504 <__mdiff>
 8006bae:	68c2      	ldr	r2, [r0, #12]
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb4:	bb02      	cbnz	r2, 8006bf8 <_dtoa_r+0xa48>
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	9803      	ldr	r0, [sp, #12]
 8006bba:	f000 fc87 	bl	80074cc <__mcmp>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006bca:	f000 fa03 	bl	8006fd4 <_Bfree>
 8006bce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bd2:	9e04      	ldr	r6, [sp, #16]
 8006bd4:	ea42 0103 	orr.w	r1, r2, r3
 8006bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bda:	4319      	orrs	r1, r3
 8006bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bde:	d10d      	bne.n	8006bfc <_dtoa_r+0xa4c>
 8006be0:	2b39      	cmp	r3, #57	@ 0x39
 8006be2:	d027      	beq.n	8006c34 <_dtoa_r+0xa84>
 8006be4:	9a08      	ldr	r2, [sp, #32]
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	dd01      	ble.n	8006bee <_dtoa_r+0xa3e>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	3331      	adds	r3, #49	@ 0x31
 8006bee:	f88b 3000 	strb.w	r3, [fp]
 8006bf2:	e52e      	b.n	8006652 <_dtoa_r+0x4a2>
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	e7b9      	b.n	8006b6c <_dtoa_r+0x9bc>
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	e7e2      	b.n	8006bc2 <_dtoa_r+0xa12>
 8006bfc:	9908      	ldr	r1, [sp, #32]
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	db04      	blt.n	8006c0c <_dtoa_r+0xa5c>
 8006c02:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006c04:	4301      	orrs	r1, r0
 8006c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c08:	4301      	orrs	r1, r0
 8006c0a:	d120      	bne.n	8006c4e <_dtoa_r+0xa9e>
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	ddee      	ble.n	8006bee <_dtoa_r+0xa3e>
 8006c10:	2201      	movs	r2, #1
 8006c12:	9903      	ldr	r1, [sp, #12]
 8006c14:	4648      	mov	r0, r9
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	f000 fbec 	bl	80073f4 <__lshift>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	9003      	str	r0, [sp, #12]
 8006c20:	f000 fc54 	bl	80074cc <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	dc02      	bgt.n	8006c30 <_dtoa_r+0xa80>
 8006c2a:	d1e0      	bne.n	8006bee <_dtoa_r+0xa3e>
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	d5de      	bpl.n	8006bee <_dtoa_r+0xa3e>
 8006c30:	2b39      	cmp	r3, #57	@ 0x39
 8006c32:	d1da      	bne.n	8006bea <_dtoa_r+0xa3a>
 8006c34:	2339      	movs	r3, #57	@ 0x39
 8006c36:	f88b 3000 	strb.w	r3, [fp]
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	461e      	mov	r6, r3
 8006c3e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2a39      	cmp	r2, #57	@ 0x39
 8006c46:	d04e      	beq.n	8006ce6 <_dtoa_r+0xb36>
 8006c48:	3201      	adds	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e501      	b.n	8006652 <_dtoa_r+0x4a2>
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	dd03      	ble.n	8006c5a <_dtoa_r+0xaaa>
 8006c52:	2b39      	cmp	r3, #57	@ 0x39
 8006c54:	d0ee      	beq.n	8006c34 <_dtoa_r+0xa84>
 8006c56:	3301      	adds	r3, #1
 8006c58:	e7c9      	b.n	8006bee <_dtoa_r+0xa3e>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c62:	428a      	cmp	r2, r1
 8006c64:	d028      	beq.n	8006cb8 <_dtoa_r+0xb08>
 8006c66:	2300      	movs	r3, #0
 8006c68:	220a      	movs	r2, #10
 8006c6a:	9903      	ldr	r1, [sp, #12]
 8006c6c:	4648      	mov	r0, r9
 8006c6e:	f000 f9d3 	bl	8007018 <__multadd>
 8006c72:	42af      	cmp	r7, r5
 8006c74:	9003      	str	r0, [sp, #12]
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	f04f 020a 	mov.w	r2, #10
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4648      	mov	r0, r9
 8006c82:	d107      	bne.n	8006c94 <_dtoa_r+0xae4>
 8006c84:	f000 f9c8 	bl	8007018 <__multadd>
 8006c88:	4607      	mov	r7, r0
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	e777      	b.n	8006b84 <_dtoa_r+0x9d4>
 8006c94:	f000 f9c0 	bl	8007018 <__multadd>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	4648      	mov	r0, r9
 8006ca2:	f000 f9b9 	bl	8007018 <__multadd>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	e7f0      	b.n	8006c8c <_dtoa_r+0xadc>
 8006caa:	f1bb 0f00 	cmp.w	fp, #0
 8006cae:	bfcc      	ite	gt
 8006cb0:	465e      	movgt	r6, fp
 8006cb2:	2601      	movle	r6, #1
 8006cb4:	2700      	movs	r7, #0
 8006cb6:	4456      	add	r6, sl
 8006cb8:	2201      	movs	r2, #1
 8006cba:	9903      	ldr	r1, [sp, #12]
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	f000 fb98 	bl	80073f4 <__lshift>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	9003      	str	r0, [sp, #12]
 8006cc8:	f000 fc00 	bl	80074cc <__mcmp>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	dcb4      	bgt.n	8006c3a <_dtoa_r+0xa8a>
 8006cd0:	d102      	bne.n	8006cd8 <_dtoa_r+0xb28>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	07db      	lsls	r3, r3, #31
 8006cd6:	d4b0      	bmi.n	8006c3a <_dtoa_r+0xa8a>
 8006cd8:	4633      	mov	r3, r6
 8006cda:	461e      	mov	r6, r3
 8006cdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce0:	2a30      	cmp	r2, #48	@ 0x30
 8006ce2:	d0fa      	beq.n	8006cda <_dtoa_r+0xb2a>
 8006ce4:	e4b5      	b.n	8006652 <_dtoa_r+0x4a2>
 8006ce6:	459a      	cmp	sl, r3
 8006ce8:	d1a8      	bne.n	8006c3c <_dtoa_r+0xa8c>
 8006cea:	2331      	movs	r3, #49	@ 0x31
 8006cec:	f108 0801 	add.w	r8, r8, #1
 8006cf0:	f88a 3000 	strb.w	r3, [sl]
 8006cf4:	e4ad      	b.n	8006652 <_dtoa_r+0x4a2>
 8006cf6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d54 <_dtoa_r+0xba4>
 8006cfc:	b11b      	cbz	r3, 8006d06 <_dtoa_r+0xb56>
 8006cfe:	f10a 0308 	add.w	r3, sl, #8
 8006d02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4650      	mov	r0, sl
 8006d08:	b017      	add	sp, #92	@ 0x5c
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	f77f ae2e 	ble.w	8006972 <_dtoa_r+0x7c2>
 8006d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	e64d      	b.n	80069ba <_dtoa_r+0x80a>
 8006d1e:	f1bb 0f00 	cmp.w	fp, #0
 8006d22:	f77f aed9 	ble.w	8006ad8 <_dtoa_r+0x928>
 8006d26:	4656      	mov	r6, sl
 8006d28:	4621      	mov	r1, r4
 8006d2a:	9803      	ldr	r0, [sp, #12]
 8006d2c:	f7ff f9b6 	bl	800609c <quorem>
 8006d30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d34:	f806 3b01 	strb.w	r3, [r6], #1
 8006d38:	eba6 020a 	sub.w	r2, r6, sl
 8006d3c:	4593      	cmp	fp, r2
 8006d3e:	ddb4      	ble.n	8006caa <_dtoa_r+0xafa>
 8006d40:	2300      	movs	r3, #0
 8006d42:	220a      	movs	r2, #10
 8006d44:	4648      	mov	r0, r9
 8006d46:	9903      	ldr	r1, [sp, #12]
 8006d48:	f000 f966 	bl	8007018 <__multadd>
 8006d4c:	9003      	str	r0, [sp, #12]
 8006d4e:	e7eb      	b.n	8006d28 <_dtoa_r+0xb78>
 8006d50:	080098b7 	.word	0x080098b7
 8006d54:	0800983b 	.word	0x0800983b

08006d58 <_free_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d040      	beq.n	8006de2 <_free_r+0x8a>
 8006d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d64:	1f0c      	subs	r4, r1, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	18e4      	addlt	r4, r4, r3
 8006d6c:	f000 f8e6 	bl	8006f3c <__malloc_lock>
 8006d70:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <_free_r+0x8c>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x2c>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d80:	f000 b8e2 	b.w	8006f48 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x42>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	1821      	adds	r1, r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1809      	addeq	r1, r1, r0
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x1e>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x4c>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x42>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1850      	adds	r0, r2, r1
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x6c>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	4401      	add	r1, r0
 8006db0:	1850      	adds	r0, r2, r1
 8006db2:	4283      	cmp	r3, r0
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x22>
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4408      	add	r0, r1
 8006dbe:	6010      	str	r0, [r2, #0]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x22>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x74>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x22>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6054      	str	r4, [r2, #4]
 8006de0:	e7cb      	b.n	8006d7a <_free_r+0x22>
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20001390 	.word	0x20001390

08006de8 <malloc>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <malloc+0xc>)
 8006dea:	4601      	mov	r1, r0
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f000 b825 	b.w	8006e3c <_malloc_r>
 8006df2:	bf00      	nop
 8006df4:	2000001c 	.word	0x2000001c

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8006e38 <sbrk_aligned+0x40>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f001 fdee 	bl	80089e4 <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f001 fde9 	bl	80089e4 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d103      	bne.n	8006e1e <sbrk_aligned+0x26>
 8006e16:	f04f 34ff 	mov.w	r4, #4294967295
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	1cc4      	adds	r4, r0, #3
 8006e20:	f024 0403 	bic.w	r4, r4, #3
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d0f8      	beq.n	8006e1a <sbrk_aligned+0x22>
 8006e28:	1a21      	subs	r1, r4, r0
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f001 fdda 	bl	80089e4 <_sbrk_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d1f2      	bne.n	8006e1a <sbrk_aligned+0x22>
 8006e34:	e7ef      	b.n	8006e16 <sbrk_aligned+0x1e>
 8006e36:	bf00      	nop
 8006e38:	2000138c 	.word	0x2000138c

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4606      	mov	r6, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d904      	bls.n	8006e62 <_malloc_r+0x26>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f38 <_malloc_r+0xfc>
 8006e66:	f000 f869 	bl	8006f3c <__malloc_lock>
 8006e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6e:	461c      	mov	r4, r3
 8006e70:	bb44      	cbnz	r4, 8006ec4 <_malloc_r+0x88>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbf 	bl	8006df8 <sbrk_aligned>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d158      	bne.n	8006f32 <_malloc_r+0xf6>
 8006e80:	f8d8 4000 	ldr.w	r4, [r8]
 8006e84:	4627      	mov	r7, r4
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d143      	bne.n	8006f12 <_malloc_r+0xd6>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d04b      	beq.n	8006f26 <_malloc_r+0xea>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	eb04 0903 	add.w	r9, r4, r3
 8006e98:	f001 fda4 	bl	80089e4 <_sbrk_r>
 8006e9c:	4581      	cmp	r9, r0
 8006e9e:	d142      	bne.n	8006f26 <_malloc_r+0xea>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7ff ffa6 	bl	8006df8 <sbrk_aligned>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d03a      	beq.n	8006f26 <_malloc_r+0xea>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	bb62      	cbnz	r2, 8006f18 <_malloc_r+0xdc>
 8006ebe:	f8c8 7000 	str.w	r7, [r8]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xa8>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d420      	bmi.n	8006f0c <_malloc_r+0xd0>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xc2>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f82f 	bl	8006f48 <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	bf1c      	itt	ne
 8006ef8:	1a1b      	subne	r3, r3, r0
 8006efa:	50a3      	strne	r3, [r4, r2]
 8006efc:	e7af      	b.n	8006e5e <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	f8c8 2000 	streq.w	r2, [r8]
 8006f08:	605a      	strne	r2, [r3, #4]
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	6864      	ldr	r4, [r4, #4]
 8006f10:	e7ae      	b.n	8006e70 <_malloc_r+0x34>
 8006f12:	463c      	mov	r4, r7
 8006f14:	687f      	ldr	r7, [r7, #4]
 8006f16:	e7b6      	b.n	8006e86 <_malloc_r+0x4a>
 8006f18:	461a      	mov	r2, r3
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d1fb      	bne.n	8006f18 <_malloc_r+0xdc>
 8006f20:	2300      	movs	r3, #0
 8006f22:	6053      	str	r3, [r2, #4]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f26:	230c      	movs	r3, #12
 8006f28:	4630      	mov	r0, r6
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	f000 f80c 	bl	8006f48 <__malloc_unlock>
 8006f30:	e794      	b.n	8006e5c <_malloc_r+0x20>
 8006f32:	6005      	str	r5, [r0, #0]
 8006f34:	e7d6      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f36:	bf00      	nop
 8006f38:	20001390 	.word	0x20001390

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff b88a 	b.w	8006056 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	20001388 	.word	0x20001388

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff b885 	b.w	8006058 <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20001388 	.word	0x20001388

08006f54 <_Balloc>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Balloc+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff42 	bl	8006de8 <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e0      	str	r0, [r4, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Balloc+0x20>
 8006f6a:	216b      	movs	r1, #107	@ 0x6b
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <_Balloc+0x78>)
 8006f6e:	4818      	ldr	r0, [pc, #96]	@ (8006fd0 <_Balloc+0x7c>)
 8006f70:	f001 fd4e 	bl	8008a10 <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	69e6      	ldr	r6, [r4, #28]
 8006f7e:	68f3      	ldr	r3, [r6, #12]
 8006f80:	b183      	cbz	r3, 8006fa4 <_Balloc+0x50>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8a:	b9b8      	cbnz	r0, 8006fbc <_Balloc+0x68>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f92:	1d72      	adds	r2, r6, #5
 8006f94:	4620      	mov	r0, r4
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	f001 fd58 	bl	8008a4c <_calloc_r>
 8006f9c:	b160      	cbz	r0, 8006fb8 <_Balloc+0x64>
 8006f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa2:	e00e      	b.n	8006fc2 <_Balloc+0x6e>
 8006fa4:	2221      	movs	r2, #33	@ 0x21
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 fd4f 	bl	8008a4c <_calloc_r>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	60f0      	str	r0, [r6, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <_Balloc+0x2e>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fc8:	e7f7      	b.n	8006fba <_Balloc+0x66>
 8006fca:	bf00      	nop
 8006fcc:	08009848 	.word	0x08009848
 8006fd0:	080098c8 	.word	0x080098c8

08006fd4 <_Bfree>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Bfree+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff02 	bl	8006de8 <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e8      	str	r0, [r5, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Bfree+0x20>
 8006fea:	218f      	movs	r1, #143	@ 0x8f
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <_Bfree+0x3c>)
 8006fee:	4809      	ldr	r0, [pc, #36]	@ (8007014 <_Bfree+0x40>)
 8006ff0:	f001 fd0e 	bl	8008a10 <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	b13c      	cbz	r4, 800700e <_Bfree+0x3a>
 8006ffe:	69eb      	ldr	r3, [r5, #28]
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007008:	6021      	str	r1, [r4, #0]
 800700a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	08009848 	.word	0x08009848
 8007014:	080098c8 	.word	0x080098c8

08007018 <__multadd>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4607      	mov	r7, r0
 800701e:	460c      	mov	r4, r1
 8007020:	461e      	mov	r6, r3
 8007022:	2000      	movs	r0, #0
 8007024:	690d      	ldr	r5, [r1, #16]
 8007026:	f101 0c14 	add.w	ip, r1, #20
 800702a:	f8dc 3000 	ldr.w	r3, [ip]
 800702e:	3001      	adds	r0, #1
 8007030:	b299      	uxth	r1, r3
 8007032:	fb02 6101 	mla	r1, r2, r1, r6
 8007036:	0c1e      	lsrs	r6, r3, #16
 8007038:	0c0b      	lsrs	r3, r1, #16
 800703a:	fb02 3306 	mla	r3, r2, r6, r3
 800703e:	b289      	uxth	r1, r1
 8007040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007044:	4285      	cmp	r5, r0
 8007046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800704a:	f84c 1b04 	str.w	r1, [ip], #4
 800704e:	dcec      	bgt.n	800702a <__multadd+0x12>
 8007050:	b30e      	cbz	r6, 8007096 <__multadd+0x7e>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc19      	bgt.n	800708c <__multadd+0x74>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4638      	mov	r0, r7
 800705c:	3101      	adds	r1, #1
 800705e:	f7ff ff79 	bl	8006f54 <_Balloc>
 8007062:	4680      	mov	r8, r0
 8007064:	b928      	cbnz	r0, 8007072 <__multadd+0x5a>
 8007066:	4602      	mov	r2, r0
 8007068:	21ba      	movs	r1, #186	@ 0xba
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <__multadd+0x84>)
 800706c:	480c      	ldr	r0, [pc, #48]	@ (80070a0 <__multadd+0x88>)
 800706e:	f001 fccf 	bl	8008a10 <__assert_func>
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	f104 010c 	add.w	r1, r4, #12
 8007078:	3202      	adds	r2, #2
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f7fe fffa 	bl	8006076 <memcpy>
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <_Bfree>
 800708a:	4644      	mov	r4, r8
 800708c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007090:	3501      	adds	r5, #1
 8007092:	615e      	str	r6, [r3, #20]
 8007094:	6125      	str	r5, [r4, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	080098b7 	.word	0x080098b7
 80070a0:	080098c8 	.word	0x080098c8

080070a4 <__s2b>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4615      	mov	r5, r2
 80070aa:	2209      	movs	r2, #9
 80070ac:	461f      	mov	r7, r3
 80070ae:	3308      	adds	r3, #8
 80070b0:	460c      	mov	r4, r1
 80070b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b6:	4606      	mov	r6, r0
 80070b8:	2201      	movs	r2, #1
 80070ba:	2100      	movs	r1, #0
 80070bc:	429a      	cmp	r2, r3
 80070be:	db09      	blt.n	80070d4 <__s2b+0x30>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ff47 	bl	8006f54 <_Balloc>
 80070c6:	b940      	cbnz	r0, 80070da <__s2b+0x36>
 80070c8:	4602      	mov	r2, r0
 80070ca:	21d3      	movs	r1, #211	@ 0xd3
 80070cc:	4b18      	ldr	r3, [pc, #96]	@ (8007130 <__s2b+0x8c>)
 80070ce:	4819      	ldr	r0, [pc, #100]	@ (8007134 <__s2b+0x90>)
 80070d0:	f001 fc9e 	bl	8008a10 <__assert_func>
 80070d4:	0052      	lsls	r2, r2, #1
 80070d6:	3101      	adds	r1, #1
 80070d8:	e7f0      	b.n	80070bc <__s2b+0x18>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	2d09      	cmp	r5, #9
 80070de:	6143      	str	r3, [r0, #20]
 80070e0:	f04f 0301 	mov.w	r3, #1
 80070e4:	6103      	str	r3, [r0, #16]
 80070e6:	dd16      	ble.n	8007116 <__s2b+0x72>
 80070e8:	f104 0909 	add.w	r9, r4, #9
 80070ec:	46c8      	mov	r8, r9
 80070ee:	442c      	add	r4, r5
 80070f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070f4:	4601      	mov	r1, r0
 80070f6:	220a      	movs	r2, #10
 80070f8:	4630      	mov	r0, r6
 80070fa:	3b30      	subs	r3, #48	@ 0x30
 80070fc:	f7ff ff8c 	bl	8007018 <__multadd>
 8007100:	45a0      	cmp	r8, r4
 8007102:	d1f5      	bne.n	80070f0 <__s2b+0x4c>
 8007104:	f1a5 0408 	sub.w	r4, r5, #8
 8007108:	444c      	add	r4, r9
 800710a:	1b2d      	subs	r5, r5, r4
 800710c:	1963      	adds	r3, r4, r5
 800710e:	42bb      	cmp	r3, r7
 8007110:	db04      	blt.n	800711c <__s2b+0x78>
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	2509      	movs	r5, #9
 8007118:	340a      	adds	r4, #10
 800711a:	e7f6      	b.n	800710a <__s2b+0x66>
 800711c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007120:	4601      	mov	r1, r0
 8007122:	220a      	movs	r2, #10
 8007124:	4630      	mov	r0, r6
 8007126:	3b30      	subs	r3, #48	@ 0x30
 8007128:	f7ff ff76 	bl	8007018 <__multadd>
 800712c:	e7ee      	b.n	800710c <__s2b+0x68>
 800712e:	bf00      	nop
 8007130:	080098b7 	.word	0x080098b7
 8007134:	080098c8 	.word	0x080098c8

08007138 <__hi0bits>:
 8007138:	4603      	mov	r3, r0
 800713a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800713e:	bf3a      	itte	cc
 8007140:	0403      	lslcc	r3, r0, #16
 8007142:	2010      	movcc	r0, #16
 8007144:	2000      	movcs	r0, #0
 8007146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800714a:	bf3c      	itt	cc
 800714c:	021b      	lslcc	r3, r3, #8
 800714e:	3008      	addcc	r0, #8
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007154:	bf3c      	itt	cc
 8007156:	011b      	lslcc	r3, r3, #4
 8007158:	3004      	addcc	r0, #4
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715e:	bf3c      	itt	cc
 8007160:	009b      	lslcc	r3, r3, #2
 8007162:	3002      	addcc	r0, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	db05      	blt.n	8007174 <__hi0bits+0x3c>
 8007168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800716c:	f100 0001 	add.w	r0, r0, #1
 8007170:	bf08      	it	eq
 8007172:	2020      	moveq	r0, #32
 8007174:	4770      	bx	lr

08007176 <__lo0bits>:
 8007176:	6803      	ldr	r3, [r0, #0]
 8007178:	4602      	mov	r2, r0
 800717a:	f013 0007 	ands.w	r0, r3, #7
 800717e:	d00b      	beq.n	8007198 <__lo0bits+0x22>
 8007180:	07d9      	lsls	r1, r3, #31
 8007182:	d421      	bmi.n	80071c8 <__lo0bits+0x52>
 8007184:	0798      	lsls	r0, r3, #30
 8007186:	bf49      	itett	mi
 8007188:	085b      	lsrmi	r3, r3, #1
 800718a:	089b      	lsrpl	r3, r3, #2
 800718c:	2001      	movmi	r0, #1
 800718e:	6013      	strmi	r3, [r2, #0]
 8007190:	bf5c      	itt	pl
 8007192:	2002      	movpl	r0, #2
 8007194:	6013      	strpl	r3, [r2, #0]
 8007196:	4770      	bx	lr
 8007198:	b299      	uxth	r1, r3
 800719a:	b909      	cbnz	r1, 80071a0 <__lo0bits+0x2a>
 800719c:	2010      	movs	r0, #16
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	b909      	cbnz	r1, 80071a8 <__lo0bits+0x32>
 80071a4:	3008      	adds	r0, #8
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	0719      	lsls	r1, r3, #28
 80071aa:	bf04      	itt	eq
 80071ac:	091b      	lsreq	r3, r3, #4
 80071ae:	3004      	addeq	r0, #4
 80071b0:	0799      	lsls	r1, r3, #30
 80071b2:	bf04      	itt	eq
 80071b4:	089b      	lsreq	r3, r3, #2
 80071b6:	3002      	addeq	r0, #2
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d403      	bmi.n	80071c4 <__lo0bits+0x4e>
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	d003      	beq.n	80071cc <__lo0bits+0x56>
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	4770      	bx	lr
 80071c8:	2000      	movs	r0, #0
 80071ca:	4770      	bx	lr
 80071cc:	2020      	movs	r0, #32
 80071ce:	4770      	bx	lr

080071d0 <__i2b>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	460c      	mov	r4, r1
 80071d4:	2101      	movs	r1, #1
 80071d6:	f7ff febd 	bl	8006f54 <_Balloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__i2b+0x1a>
 80071de:	f240 1145 	movw	r1, #325	@ 0x145
 80071e2:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <__i2b+0x24>)
 80071e4:	4804      	ldr	r0, [pc, #16]	@ (80071f8 <__i2b+0x28>)
 80071e6:	f001 fc13 	bl	8008a10 <__assert_func>
 80071ea:	2301      	movs	r3, #1
 80071ec:	6144      	str	r4, [r0, #20]
 80071ee:	6103      	str	r3, [r0, #16]
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	080098b7 	.word	0x080098b7
 80071f8:	080098c8 	.word	0x080098c8

080071fc <__multiply>:
 80071fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	4617      	mov	r7, r2
 8007202:	690a      	ldr	r2, [r1, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4689      	mov	r9, r1
 8007208:	429a      	cmp	r2, r3
 800720a:	bfa2      	ittt	ge
 800720c:	463b      	movge	r3, r7
 800720e:	460f      	movge	r7, r1
 8007210:	4699      	movge	r9, r3
 8007212:	693d      	ldr	r5, [r7, #16]
 8007214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	eb05 060a 	add.w	r6, r5, sl
 8007220:	42b3      	cmp	r3, r6
 8007222:	b085      	sub	sp, #20
 8007224:	bfb8      	it	lt
 8007226:	3101      	addlt	r1, #1
 8007228:	f7ff fe94 	bl	8006f54 <_Balloc>
 800722c:	b930      	cbnz	r0, 800723c <__multiply+0x40>
 800722e:	4602      	mov	r2, r0
 8007230:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007234:	4b40      	ldr	r3, [pc, #256]	@ (8007338 <__multiply+0x13c>)
 8007236:	4841      	ldr	r0, [pc, #260]	@ (800733c <__multiply+0x140>)
 8007238:	f001 fbea 	bl	8008a10 <__assert_func>
 800723c:	f100 0414 	add.w	r4, r0, #20
 8007240:	4623      	mov	r3, r4
 8007242:	2200      	movs	r2, #0
 8007244:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007248:	4573      	cmp	r3, lr
 800724a:	d320      	bcc.n	800728e <__multiply+0x92>
 800724c:	f107 0814 	add.w	r8, r7, #20
 8007250:	f109 0114 	add.w	r1, r9, #20
 8007254:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007258:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	1beb      	subs	r3, r5, r7
 8007260:	3b15      	subs	r3, #21
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	3304      	adds	r3, #4
 8007268:	3715      	adds	r7, #21
 800726a:	42bd      	cmp	r5, r7
 800726c:	bf38      	it	cc
 800726e:	2304      	movcc	r3, #4
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	9b02      	ldr	r3, [sp, #8]
 8007274:	9103      	str	r1, [sp, #12]
 8007276:	428b      	cmp	r3, r1
 8007278:	d80c      	bhi.n	8007294 <__multiply+0x98>
 800727a:	2e00      	cmp	r6, #0
 800727c:	dd03      	ble.n	8007286 <__multiply+0x8a>
 800727e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007282:	2b00      	cmp	r3, #0
 8007284:	d055      	beq.n	8007332 <__multiply+0x136>
 8007286:	6106      	str	r6, [r0, #16]
 8007288:	b005      	add	sp, #20
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	f843 2b04 	str.w	r2, [r3], #4
 8007292:	e7d9      	b.n	8007248 <__multiply+0x4c>
 8007294:	f8b1 a000 	ldrh.w	sl, [r1]
 8007298:	f1ba 0f00 	cmp.w	sl, #0
 800729c:	d01f      	beq.n	80072de <__multiply+0xe2>
 800729e:	46c4      	mov	ip, r8
 80072a0:	46a1      	mov	r9, r4
 80072a2:	2700      	movs	r7, #0
 80072a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072a8:	f8d9 3000 	ldr.w	r3, [r9]
 80072ac:	fa1f fb82 	uxth.w	fp, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80072b6:	443b      	add	r3, r7
 80072b8:	f8d9 7000 	ldr.w	r7, [r9]
 80072bc:	0c12      	lsrs	r2, r2, #16
 80072be:	0c3f      	lsrs	r7, r7, #16
 80072c0:	fb0a 7202 	mla	r2, sl, r2, r7
 80072c4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ce:	4565      	cmp	r5, ip
 80072d0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80072d4:	f849 3b04 	str.w	r3, [r9], #4
 80072d8:	d8e4      	bhi.n	80072a4 <__multiply+0xa8>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	50e7      	str	r7, [r4, r3]
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	3104      	adds	r1, #4
 80072e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d020      	beq.n	800732e <__multiply+0x132>
 80072ec:	4647      	mov	r7, r8
 80072ee:	46a4      	mov	ip, r4
 80072f0:	f04f 0a00 	mov.w	sl, #0
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f8b7 b000 	ldrh.w	fp, [r7]
 80072fa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4452      	add	r2, sl
 8007306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730a:	f84c 3b04 	str.w	r3, [ip], #4
 800730e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007316:	f8bc 3000 	ldrh.w	r3, [ip]
 800731a:	42bd      	cmp	r5, r7
 800731c:	fb09 330a 	mla	r3, r9, sl, r3
 8007320:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007324:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007328:	d8e5      	bhi.n	80072f6 <__multiply+0xfa>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	50a3      	str	r3, [r4, r2]
 800732e:	3404      	adds	r4, #4
 8007330:	e79f      	b.n	8007272 <__multiply+0x76>
 8007332:	3e01      	subs	r6, #1
 8007334:	e7a1      	b.n	800727a <__multiply+0x7e>
 8007336:	bf00      	nop
 8007338:	080098b7 	.word	0x080098b7
 800733c:	080098c8 	.word	0x080098c8

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4607      	mov	r7, r0
 800734c:	460e      	mov	r6, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	@ (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe5d 	bl	8007018 <__multadd>
 800735e:	4606      	mov	r6, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	69fc      	ldr	r4, [r7, #28]
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fd3d 	bl	8006de8 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	61f8      	str	r0, [r7, #28]
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007378:	4b1c      	ldr	r3, [pc, #112]	@ (80073ec <__pow5mult+0xac>)
 800737a:	481d      	ldr	r0, [pc, #116]	@ (80073f0 <__pow5mult+0xb0>)
 800737c:	f001 fb48 	bl	8008a10 <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	@ 0x271
 8007396:	4638      	mov	r0, r7
 8007398:	f7ff ff1a 	bl	80071d0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4631      	mov	r1, r6
 80073b0:	4622      	mov	r2, r4
 80073b2:	4638      	mov	r0, r7
 80073b4:	f7ff ff22 	bl	80071fc <__multiply>
 80073b8:	4680      	mov	r8, r0
 80073ba:	4631      	mov	r1, r6
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff fe09 	bl	8006fd4 <_Bfree>
 80073c2:	4646      	mov	r6, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff13 	bl	80071fc <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4630      	mov	r0, r6
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	080099d8 	.word	0x080099d8
 80073ec:	08009848 	.word	0x08009848
 80073f0:	080098c8 	.word	0x080098c8

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	4607      	mov	r7, r0
 80073fc:	4691      	mov	r9, r2
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6849      	ldr	r1, [r1, #4]
 8007402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fd9d 	bl	8006f54 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007424:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <__lshift+0xd0>)
 8007426:	4828      	ldr	r0, [pc, #160]	@ (80074c8 <__lshift+0xd4>)
 8007428:	f001 faf2 	bl	8008a10 <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db33      	blt.n	80074aa <__lshift+0xb6>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007458:	d02b      	beq.n	80074b2 <__lshift+0xbe>
 800745a:	468a      	mov	sl, r1
 800745c:	2200      	movs	r2, #0
 800745e:	f1c9 0e20 	rsb	lr, r9, #32
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	fa00 f009 	lsl.w	r0, r0, r9
 8007468:	4310      	orrs	r0, r2
 800746a:	f84a 0b04 	str.w	r0, [sl], #4
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	459c      	cmp	ip, r3
 8007474:	fa22 f20e 	lsr.w	r2, r2, lr
 8007478:	d8f3      	bhi.n	8007462 <__lshift+0x6e>
 800747a:	ebac 0304 	sub.w	r3, ip, r4
 800747e:	3b15      	subs	r3, #21
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	3304      	adds	r3, #4
 8007486:	f104 0015 	add.w	r0, r4, #21
 800748a:	4560      	cmp	r0, ip
 800748c:	bf88      	it	hi
 800748e:	2304      	movhi	r3, #4
 8007490:	50ca      	str	r2, [r1, r3]
 8007492:	b10a      	cbz	r2, 8007498 <__lshift+0xa4>
 8007494:	f108 0602 	add.w	r6, r8, #2
 8007498:	3e01      	subs	r6, #1
 800749a:	4638      	mov	r0, r7
 800749c:	4621      	mov	r1, r4
 800749e:	612e      	str	r6, [r5, #16]
 80074a0:	f7ff fd98 	bl	8006fd4 <_Bfree>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7c5      	b.n	800743e <__lshift+0x4a>
 80074b2:	3904      	subs	r1, #4
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	459c      	cmp	ip, r3
 80074ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80074be:	d8f9      	bhi.n	80074b4 <__lshift+0xc0>
 80074c0:	e7ea      	b.n	8007498 <__lshift+0xa4>
 80074c2:	bf00      	nop
 80074c4:	080098b7 	.word	0x080098b7
 80074c8:	080098c8 	.word	0x080098c8

080074cc <__mcmp>:
 80074cc:	4603      	mov	r3, r0
 80074ce:	690a      	ldr	r2, [r1, #16]
 80074d0:	6900      	ldr	r0, [r0, #16]
 80074d2:	b530      	push	{r4, r5, lr}
 80074d4:	1a80      	subs	r0, r0, r2
 80074d6:	d10e      	bne.n	80074f6 <__mcmp+0x2a>
 80074d8:	3314      	adds	r3, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074ec:	4295      	cmp	r5, r2
 80074ee:	d003      	beq.n	80074f8 <__mcmp+0x2c>
 80074f0:	d205      	bcs.n	80074fe <__mcmp+0x32>
 80074f2:	f04f 30ff 	mov.w	r0, #4294967295
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d3f3      	bcc.n	80074e4 <__mcmp+0x18>
 80074fc:	e7fb      	b.n	80074f6 <__mcmp+0x2a>
 80074fe:	2001      	movs	r0, #1
 8007500:	e7f9      	b.n	80074f6 <__mcmp+0x2a>
	...

08007504 <__mdiff>:
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4689      	mov	r9, r1
 800750a:	4606      	mov	r6, r0
 800750c:	4611      	mov	r1, r2
 800750e:	4648      	mov	r0, r9
 8007510:	4614      	mov	r4, r2
 8007512:	f7ff ffdb 	bl	80074cc <__mcmp>
 8007516:	1e05      	subs	r5, r0, #0
 8007518:	d112      	bne.n	8007540 <__mdiff+0x3c>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fd19 	bl	8006f54 <_Balloc>
 8007522:	4602      	mov	r2, r0
 8007524:	b928      	cbnz	r0, 8007532 <__mdiff+0x2e>
 8007526:	f240 2137 	movw	r1, #567	@ 0x237
 800752a:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <__mdiff+0x120>)
 800752c:	483e      	ldr	r0, [pc, #248]	@ (8007628 <__mdiff+0x124>)
 800752e:	f001 fa6f 	bl	8008a10 <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007538:	4610      	mov	r0, r2
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	bfbc      	itt	lt
 8007542:	464b      	movlt	r3, r9
 8007544:	46a1      	movlt	r9, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800754c:	bfba      	itte	lt
 800754e:	461c      	movlt	r4, r3
 8007550:	2501      	movlt	r5, #1
 8007552:	2500      	movge	r5, #0
 8007554:	f7ff fcfe 	bl	8006f54 <_Balloc>
 8007558:	4602      	mov	r2, r0
 800755a:	b918      	cbnz	r0, 8007564 <__mdiff+0x60>
 800755c:	f240 2145 	movw	r1, #581	@ 0x245
 8007560:	4b30      	ldr	r3, [pc, #192]	@ (8007624 <__mdiff+0x120>)
 8007562:	e7e3      	b.n	800752c <__mdiff+0x28>
 8007564:	f100 0b14 	add.w	fp, r0, #20
 8007568:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800756c:	f109 0310 	add.w	r3, r9, #16
 8007570:	60c5      	str	r5, [r0, #12]
 8007572:	f04f 0c00 	mov.w	ip, #0
 8007576:	f109 0514 	add.w	r5, r9, #20
 800757a:	46d9      	mov	r9, fp
 800757c:	6926      	ldr	r6, [r4, #16]
 800757e:	f104 0e14 	add.w	lr, r4, #20
 8007582:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007586:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007592:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007596:	b281      	uxth	r1, r0
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	fa1f f38a 	uxth.w	r3, sl
 800759e:	1a5b      	subs	r3, r3, r1
 80075a0:	0c00      	lsrs	r0, r0, #16
 80075a2:	4463      	add	r3, ip
 80075a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075b2:	4576      	cmp	r6, lr
 80075b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b8:	f849 3b04 	str.w	r3, [r9], #4
 80075bc:	d8e6      	bhi.n	800758c <__mdiff+0x88>
 80075be:	1b33      	subs	r3, r6, r4
 80075c0:	3b15      	subs	r3, #21
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	3415      	adds	r4, #21
 80075c8:	3304      	adds	r3, #4
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	bf38      	it	cc
 80075ce:	2304      	movcc	r3, #4
 80075d0:	441d      	add	r5, r3
 80075d2:	445b      	add	r3, fp
 80075d4:	461e      	mov	r6, r3
 80075d6:	462c      	mov	r4, r5
 80075d8:	4544      	cmp	r4, r8
 80075da:	d30e      	bcc.n	80075fa <__mdiff+0xf6>
 80075dc:	f108 0103 	add.w	r1, r8, #3
 80075e0:	1b49      	subs	r1, r1, r5
 80075e2:	f021 0103 	bic.w	r1, r1, #3
 80075e6:	3d03      	subs	r5, #3
 80075e8:	45a8      	cmp	r8, r5
 80075ea:	bf38      	it	cc
 80075ec:	2100      	movcc	r1, #0
 80075ee:	440b      	add	r3, r1
 80075f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075f4:	b199      	cbz	r1, 800761e <__mdiff+0x11a>
 80075f6:	6117      	str	r7, [r2, #16]
 80075f8:	e79e      	b.n	8007538 <__mdiff+0x34>
 80075fa:	46e6      	mov	lr, ip
 80075fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007600:	fa1f fc81 	uxth.w	ip, r1
 8007604:	44f4      	add	ip, lr
 8007606:	0c08      	lsrs	r0, r1, #16
 8007608:	4471      	add	r1, lr
 800760a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800760e:	b289      	uxth	r1, r1
 8007610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007614:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007618:	f846 1b04 	str.w	r1, [r6], #4
 800761c:	e7dc      	b.n	80075d8 <__mdiff+0xd4>
 800761e:	3f01      	subs	r7, #1
 8007620:	e7e6      	b.n	80075f0 <__mdiff+0xec>
 8007622:	bf00      	nop
 8007624:	080098b7 	.word	0x080098b7
 8007628:	080098c8 	.word	0x080098c8

0800762c <__ulp>:
 800762c:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <__ulp+0x3c>)
 800762e:	400b      	ands	r3, r1
 8007630:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc08      	bgt.n	800764a <__ulp+0x1e>
 8007638:	425b      	negs	r3, r3
 800763a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800763e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007642:	da04      	bge.n	800764e <__ulp+0x22>
 8007644:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007648:	4113      	asrs	r3, r2
 800764a:	2200      	movs	r2, #0
 800764c:	e008      	b.n	8007660 <__ulp+0x34>
 800764e:	f1a2 0314 	sub.w	r3, r2, #20
 8007652:	2b1e      	cmp	r3, #30
 8007654:	bfd6      	itet	le
 8007656:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800765a:	2201      	movgt	r2, #1
 800765c:	40da      	lsrle	r2, r3
 800765e:	2300      	movs	r3, #0
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	7ff00000 	.word	0x7ff00000

0800766c <__b2d>:
 800766c:	6902      	ldr	r2, [r0, #16]
 800766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007670:	f100 0614 	add.w	r6, r0, #20
 8007674:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007678:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800767c:	4f1e      	ldr	r7, [pc, #120]	@ (80076f8 <__b2d+0x8c>)
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fd5a 	bl	8007138 <__hi0bits>
 8007684:	4603      	mov	r3, r0
 8007686:	f1c0 0020 	rsb	r0, r0, #32
 800768a:	2b0a      	cmp	r3, #10
 800768c:	f1a2 0504 	sub.w	r5, r2, #4
 8007690:	6008      	str	r0, [r1, #0]
 8007692:	dc12      	bgt.n	80076ba <__b2d+0x4e>
 8007694:	42ae      	cmp	r6, r5
 8007696:	bf2c      	ite	cs
 8007698:	2200      	movcs	r2, #0
 800769a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800769e:	f1c3 0c0b 	rsb	ip, r3, #11
 80076a2:	3315      	adds	r3, #21
 80076a4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80076a8:	fa04 f303 	lsl.w	r3, r4, r3
 80076ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80076b0:	ea4e 0107 	orr.w	r1, lr, r7
 80076b4:	431a      	orrs	r2, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ba:	42ae      	cmp	r6, r5
 80076bc:	bf36      	itet	cc
 80076be:	f1a2 0508 	subcc.w	r5, r2, #8
 80076c2:	2200      	movcs	r2, #0
 80076c4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80076c8:	3b0b      	subs	r3, #11
 80076ca:	d012      	beq.n	80076f2 <__b2d+0x86>
 80076cc:	f1c3 0720 	rsb	r7, r3, #32
 80076d0:	fa22 f107 	lsr.w	r1, r2, r7
 80076d4:	409c      	lsls	r4, r3
 80076d6:	430c      	orrs	r4, r1
 80076d8:	42b5      	cmp	r5, r6
 80076da:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80076de:	bf94      	ite	ls
 80076e0:	2400      	movls	r4, #0
 80076e2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80076e6:	409a      	lsls	r2, r3
 80076e8:	40fc      	lsrs	r4, r7
 80076ea:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80076ee:	4322      	orrs	r2, r4
 80076f0:	e7e1      	b.n	80076b6 <__b2d+0x4a>
 80076f2:	ea44 0107 	orr.w	r1, r4, r7
 80076f6:	e7de      	b.n	80076b6 <__b2d+0x4a>
 80076f8:	3ff00000 	.word	0x3ff00000

080076fc <__d2b>:
 80076fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007700:	2101      	movs	r1, #1
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	9e08      	ldr	r6, [sp, #32]
 8007708:	f7ff fc24 	bl	8006f54 <_Balloc>
 800770c:	4604      	mov	r4, r0
 800770e:	b930      	cbnz	r0, 800771e <__d2b+0x22>
 8007710:	4602      	mov	r2, r0
 8007712:	f240 310f 	movw	r1, #783	@ 0x30f
 8007716:	4b23      	ldr	r3, [pc, #140]	@ (80077a4 <__d2b+0xa8>)
 8007718:	4823      	ldr	r0, [pc, #140]	@ (80077a8 <__d2b+0xac>)
 800771a:	f001 f979 	bl	8008a10 <__assert_func>
 800771e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007726:	b10d      	cbz	r5, 800772c <__d2b+0x30>
 8007728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	f1b8 0300 	subs.w	r3, r8, #0
 8007732:	d024      	beq.n	800777e <__d2b+0x82>
 8007734:	4668      	mov	r0, sp
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f7ff fd1d 	bl	8007176 <__lo0bits>
 800773c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007740:	b1d8      	cbz	r0, 800777a <__d2b+0x7e>
 8007742:	f1c0 0320 	rsb	r3, r0, #32
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	430b      	orrs	r3, r1
 800774c:	40c2      	lsrs	r2, r0
 800774e:	6163      	str	r3, [r4, #20]
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2201      	moveq	r2, #1
 800775a:	2202      	movne	r2, #2
 800775c:	61a3      	str	r3, [r4, #24]
 800775e:	6122      	str	r2, [r4, #16]
 8007760:	b1ad      	cbz	r5, 800778e <__d2b+0x92>
 8007762:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007766:	4405      	add	r5, r0
 8007768:	6035      	str	r5, [r6, #0]
 800776a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	4620      	mov	r0, r4
 8007774:	b002      	add	sp, #8
 8007776:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800777a:	6161      	str	r1, [r4, #20]
 800777c:	e7e9      	b.n	8007752 <__d2b+0x56>
 800777e:	a801      	add	r0, sp, #4
 8007780:	f7ff fcf9 	bl	8007176 <__lo0bits>
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	6163      	str	r3, [r4, #20]
 800778a:	3020      	adds	r0, #32
 800778c:	e7e7      	b.n	800775e <__d2b+0x62>
 800778e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007792:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007796:	6030      	str	r0, [r6, #0]
 8007798:	6918      	ldr	r0, [r3, #16]
 800779a:	f7ff fccd 	bl	8007138 <__hi0bits>
 800779e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a2:	e7e4      	b.n	800776e <__d2b+0x72>
 80077a4:	080098b7 	.word	0x080098b7
 80077a8:	080098c8 	.word	0x080098c8

080077ac <__ratio>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	b085      	sub	sp, #20
 80077b2:	e9cd 1000 	strd	r1, r0, [sp]
 80077b6:	a902      	add	r1, sp, #8
 80077b8:	f7ff ff58 	bl	800766c <__b2d>
 80077bc:	468b      	mov	fp, r1
 80077be:	4606      	mov	r6, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	9800      	ldr	r0, [sp, #0]
 80077c4:	a903      	add	r1, sp, #12
 80077c6:	f7ff ff51 	bl	800766c <__b2d>
 80077ca:	460d      	mov	r5, r1
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	4689      	mov	r9, r1
 80077d0:	6919      	ldr	r1, [r3, #16]
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	4604      	mov	r4, r0
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	4630      	mov	r0, r6
 80077da:	1ac9      	subs	r1, r1, r3
 80077dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfcd      	iteet	gt
 80077ea:	463a      	movgt	r2, r7
 80077ec:	462a      	movle	r2, r5
 80077ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077f2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80077f6:	bfd8      	it	le
 80077f8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80077fc:	464b      	mov	r3, r9
 80077fe:	4622      	mov	r2, r4
 8007800:	4659      	mov	r1, fp
 8007802:	f7f8 ff93 	bl	800072c <__aeabi_ddiv>
 8007806:	b005      	add	sp, #20
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800780c <__copybits>:
 800780c:	3901      	subs	r1, #1
 800780e:	b570      	push	{r4, r5, r6, lr}
 8007810:	1149      	asrs	r1, r1, #5
 8007812:	6914      	ldr	r4, [r2, #16]
 8007814:	3101      	adds	r1, #1
 8007816:	f102 0314 	add.w	r3, r2, #20
 800781a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800781e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007822:	1f05      	subs	r5, r0, #4
 8007824:	42a3      	cmp	r3, r4
 8007826:	d30c      	bcc.n	8007842 <__copybits+0x36>
 8007828:	1aa3      	subs	r3, r4, r2
 800782a:	3b11      	subs	r3, #17
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	3211      	adds	r2, #17
 8007832:	42a2      	cmp	r2, r4
 8007834:	bf88      	it	hi
 8007836:	2300      	movhi	r3, #0
 8007838:	4418      	add	r0, r3
 800783a:	2300      	movs	r3, #0
 800783c:	4288      	cmp	r0, r1
 800783e:	d305      	bcc.n	800784c <__copybits+0x40>
 8007840:	bd70      	pop	{r4, r5, r6, pc}
 8007842:	f853 6b04 	ldr.w	r6, [r3], #4
 8007846:	f845 6f04 	str.w	r6, [r5, #4]!
 800784a:	e7eb      	b.n	8007824 <__copybits+0x18>
 800784c:	f840 3b04 	str.w	r3, [r0], #4
 8007850:	e7f4      	b.n	800783c <__copybits+0x30>

08007852 <__any_on>:
 8007852:	f100 0214 	add.w	r2, r0, #20
 8007856:	6900      	ldr	r0, [r0, #16]
 8007858:	114b      	asrs	r3, r1, #5
 800785a:	4298      	cmp	r0, r3
 800785c:	b510      	push	{r4, lr}
 800785e:	db11      	blt.n	8007884 <__any_on+0x32>
 8007860:	dd0a      	ble.n	8007878 <__any_on+0x26>
 8007862:	f011 011f 	ands.w	r1, r1, #31
 8007866:	d007      	beq.n	8007878 <__any_on+0x26>
 8007868:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800786c:	fa24 f001 	lsr.w	r0, r4, r1
 8007870:	fa00 f101 	lsl.w	r1, r0, r1
 8007874:	428c      	cmp	r4, r1
 8007876:	d10b      	bne.n	8007890 <__any_on+0x3e>
 8007878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800787c:	4293      	cmp	r3, r2
 800787e:	d803      	bhi.n	8007888 <__any_on+0x36>
 8007880:	2000      	movs	r0, #0
 8007882:	bd10      	pop	{r4, pc}
 8007884:	4603      	mov	r3, r0
 8007886:	e7f7      	b.n	8007878 <__any_on+0x26>
 8007888:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800788c:	2900      	cmp	r1, #0
 800788e:	d0f5      	beq.n	800787c <__any_on+0x2a>
 8007890:	2001      	movs	r0, #1
 8007892:	e7f6      	b.n	8007882 <__any_on+0x30>

08007894 <sulp>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	460f      	mov	r7, r1
 800789a:	4690      	mov	r8, r2
 800789c:	f7ff fec6 	bl	800762c <__ulp>
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	f1b8 0f00 	cmp.w	r8, #0
 80078a8:	d011      	beq.n	80078ce <sulp+0x3a>
 80078aa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80078ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dd0b      	ble.n	80078ce <sulp+0x3a>
 80078b6:	2400      	movs	r4, #0
 80078b8:	051b      	lsls	r3, r3, #20
 80078ba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	f7f8 fe07 	bl	80004d8 <__aeabi_dmul>
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080078d8 <_strtod_l>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b09f      	sub	sp, #124	@ 0x7c
 80078de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078e0:	2200      	movs	r2, #0
 80078e2:	460c      	mov	r4, r1
 80078e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80078e6:	f04f 0a00 	mov.w	sl, #0
 80078ea:	f04f 0b00 	mov.w	fp, #0
 80078ee:	460a      	mov	r2, r1
 80078f0:	9005      	str	r0, [sp, #20]
 80078f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078f4:	7811      	ldrb	r1, [r2, #0]
 80078f6:	292b      	cmp	r1, #43	@ 0x2b
 80078f8:	d048      	beq.n	800798c <_strtod_l+0xb4>
 80078fa:	d836      	bhi.n	800796a <_strtod_l+0x92>
 80078fc:	290d      	cmp	r1, #13
 80078fe:	d830      	bhi.n	8007962 <_strtod_l+0x8a>
 8007900:	2908      	cmp	r1, #8
 8007902:	d830      	bhi.n	8007966 <_strtod_l+0x8e>
 8007904:	2900      	cmp	r1, #0
 8007906:	d039      	beq.n	800797c <_strtod_l+0xa4>
 8007908:	2200      	movs	r2, #0
 800790a:	920e      	str	r2, [sp, #56]	@ 0x38
 800790c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800790e:	782a      	ldrb	r2, [r5, #0]
 8007910:	2a30      	cmp	r2, #48	@ 0x30
 8007912:	f040 80b0 	bne.w	8007a76 <_strtod_l+0x19e>
 8007916:	786a      	ldrb	r2, [r5, #1]
 8007918:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791c:	2a58      	cmp	r2, #88	@ 0x58
 800791e:	d16c      	bne.n	80079fa <_strtod_l+0x122>
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007924:	4a8f      	ldr	r2, [pc, #572]	@ (8007b64 <_strtod_l+0x28c>)
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	ab1a      	add	r3, sp, #104	@ 0x68
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007930:	a919      	add	r1, sp, #100	@ 0x64
 8007932:	f001 f907 	bl	8008b44 <__gethex>
 8007936:	f010 060f 	ands.w	r6, r0, #15
 800793a:	4604      	mov	r4, r0
 800793c:	d005      	beq.n	800794a <_strtod_l+0x72>
 800793e:	2e06      	cmp	r6, #6
 8007940:	d126      	bne.n	8007990 <_strtod_l+0xb8>
 8007942:	2300      	movs	r3, #0
 8007944:	3501      	adds	r5, #1
 8007946:	9519      	str	r5, [sp, #100]	@ 0x64
 8007948:	930e      	str	r3, [sp, #56]	@ 0x38
 800794a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8582 	bne.w	8008456 <_strtod_l+0xb7e>
 8007952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007954:	b1bb      	cbz	r3, 8007986 <_strtod_l+0xae>
 8007956:	4650      	mov	r0, sl
 8007958:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800795c:	b01f      	add	sp, #124	@ 0x7c
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	2920      	cmp	r1, #32
 8007964:	d1d0      	bne.n	8007908 <_strtod_l+0x30>
 8007966:	3201      	adds	r2, #1
 8007968:	e7c3      	b.n	80078f2 <_strtod_l+0x1a>
 800796a:	292d      	cmp	r1, #45	@ 0x2d
 800796c:	d1cc      	bne.n	8007908 <_strtod_l+0x30>
 800796e:	2101      	movs	r1, #1
 8007970:	910e      	str	r1, [sp, #56]	@ 0x38
 8007972:	1c51      	adds	r1, r2, #1
 8007974:	9119      	str	r1, [sp, #100]	@ 0x64
 8007976:	7852      	ldrb	r2, [r2, #1]
 8007978:	2a00      	cmp	r2, #0
 800797a:	d1c7      	bne.n	800790c <_strtod_l+0x34>
 800797c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800797e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8566 	bne.w	8008452 <_strtod_l+0xb7a>
 8007986:	4650      	mov	r0, sl
 8007988:	4659      	mov	r1, fp
 800798a:	e7e7      	b.n	800795c <_strtod_l+0x84>
 800798c:	2100      	movs	r1, #0
 800798e:	e7ef      	b.n	8007970 <_strtod_l+0x98>
 8007990:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007992:	b13a      	cbz	r2, 80079a4 <_strtod_l+0xcc>
 8007994:	2135      	movs	r1, #53	@ 0x35
 8007996:	a81c      	add	r0, sp, #112	@ 0x70
 8007998:	f7ff ff38 	bl	800780c <__copybits>
 800799c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	f7ff fb18 	bl	8006fd4 <_Bfree>
 80079a4:	3e01      	subs	r6, #1
 80079a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079a8:	2e04      	cmp	r6, #4
 80079aa:	d806      	bhi.n	80079ba <_strtod_l+0xe2>
 80079ac:	e8df f006 	tbb	[pc, r6]
 80079b0:	201d0314 	.word	0x201d0314
 80079b4:	14          	.byte	0x14
 80079b5:	00          	.byte	0x00
 80079b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079ba:	05e1      	lsls	r1, r4, #23
 80079bc:	bf48      	it	mi
 80079be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079c6:	0d1b      	lsrs	r3, r3, #20
 80079c8:	051b      	lsls	r3, r3, #20
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1bd      	bne.n	800794a <_strtod_l+0x72>
 80079ce:	f7fe fb17 	bl	8006000 <__errno>
 80079d2:	2322      	movs	r3, #34	@ 0x22
 80079d4:	6003      	str	r3, [r0, #0]
 80079d6:	e7b8      	b.n	800794a <_strtod_l+0x72>
 80079d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079e8:	e7e7      	b.n	80079ba <_strtod_l+0xe2>
 80079ea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b68 <_strtod_l+0x290>
 80079ee:	e7e4      	b.n	80079ba <_strtod_l+0xe2>
 80079f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079f4:	f04f 3aff 	mov.w	sl, #4294967295
 80079f8:	e7df      	b.n	80079ba <_strtod_l+0xe2>
 80079fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b30      	cmp	r3, #48	@ 0x30
 8007a04:	d0f9      	beq.n	80079fa <_strtod_l+0x122>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d09f      	beq.n	800794a <_strtod_l+0x72>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	2700      	movs	r7, #0
 8007a0e:	220a      	movs	r2, #10
 8007a10:	46b9      	mov	r9, r7
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a16:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007a18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a1a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a1c:	7805      	ldrb	r5, [r0, #0]
 8007a1e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a22:	b2d9      	uxtb	r1, r3
 8007a24:	2909      	cmp	r1, #9
 8007a26:	d928      	bls.n	8007a7a <_strtod_l+0x1a2>
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4950      	ldr	r1, [pc, #320]	@ (8007b6c <_strtod_l+0x294>)
 8007a2c:	f000 ffc8 	bl	80089c0 <strncmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d032      	beq.n	8007a9a <_strtod_l+0x1c2>
 8007a34:	2000      	movs	r0, #0
 8007a36:	462a      	mov	r2, r5
 8007a38:	4603      	mov	r3, r0
 8007a3a:	464d      	mov	r5, r9
 8007a3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a3e:	2a65      	cmp	r2, #101	@ 0x65
 8007a40:	d001      	beq.n	8007a46 <_strtod_l+0x16e>
 8007a42:	2a45      	cmp	r2, #69	@ 0x45
 8007a44:	d114      	bne.n	8007a70 <_strtod_l+0x198>
 8007a46:	b91d      	cbnz	r5, 8007a50 <_strtod_l+0x178>
 8007a48:	9a08      	ldr	r2, [sp, #32]
 8007a4a:	4302      	orrs	r2, r0
 8007a4c:	d096      	beq.n	800797c <_strtod_l+0xa4>
 8007a4e:	2500      	movs	r5, #0
 8007a50:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a52:	1c62      	adds	r2, r4, #1
 8007a54:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a56:	7862      	ldrb	r2, [r4, #1]
 8007a58:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a5a:	d07a      	beq.n	8007b52 <_strtod_l+0x27a>
 8007a5c:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a5e:	d07e      	beq.n	8007b5e <_strtod_l+0x286>
 8007a60:	f04f 0c00 	mov.w	ip, #0
 8007a64:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a68:	2909      	cmp	r1, #9
 8007a6a:	f240 8085 	bls.w	8007b78 <_strtod_l+0x2a0>
 8007a6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	e0a5      	b.n	8007bc2 <_strtod_l+0x2ea>
 8007a76:	2300      	movs	r3, #0
 8007a78:	e7c8      	b.n	8007a0c <_strtod_l+0x134>
 8007a7a:	f1b9 0f08 	cmp.w	r9, #8
 8007a7e:	bfd8      	it	le
 8007a80:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007a82:	f100 0001 	add.w	r0, r0, #1
 8007a86:	bfd6      	itet	le
 8007a88:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a8c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007a90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007a92:	f109 0901 	add.w	r9, r9, #1
 8007a96:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a98:	e7bf      	b.n	8007a1a <_strtod_l+0x142>
 8007a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aa0:	785a      	ldrb	r2, [r3, #1]
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	d03b      	beq.n	8007b20 <_strtod_l+0x248>
 8007aa8:	464d      	mov	r5, r9
 8007aaa:	900a      	str	r0, [sp, #40]	@ 0x28
 8007aac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007ab0:	2b09      	cmp	r3, #9
 8007ab2:	d912      	bls.n	8007ada <_strtod_l+0x202>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7c2      	b.n	8007a3e <_strtod_l+0x166>
 8007ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aba:	3001      	adds	r0, #1
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac0:	785a      	ldrb	r2, [r3, #1]
 8007ac2:	2a30      	cmp	r2, #48	@ 0x30
 8007ac4:	d0f8      	beq.n	8007ab8 <_strtod_l+0x1e0>
 8007ac6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	f200 84c8 	bhi.w	8008460 <_strtod_l+0xb88>
 8007ad0:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ada:	3a30      	subs	r2, #48	@ 0x30
 8007adc:	f100 0301 	add.w	r3, r0, #1
 8007ae0:	d018      	beq.n	8007b14 <_strtod_l+0x23c>
 8007ae2:	462e      	mov	r6, r5
 8007ae4:	f04f 0e0a 	mov.w	lr, #10
 8007ae8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aea:	4419      	add	r1, r3
 8007aec:	910a      	str	r1, [sp, #40]	@ 0x28
 8007aee:	1c71      	adds	r1, r6, #1
 8007af0:	eba1 0c05 	sub.w	ip, r1, r5
 8007af4:	4563      	cmp	r3, ip
 8007af6:	dc15      	bgt.n	8007b24 <_strtod_l+0x24c>
 8007af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007afc:	182b      	adds	r3, r5, r0
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	f105 0501 	add.w	r5, r5, #1
 8007b04:	4405      	add	r5, r0
 8007b06:	dc1a      	bgt.n	8007b3e <_strtod_l+0x266>
 8007b08:	230a      	movs	r3, #10
 8007b0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b0c:	fb03 2301 	mla	r3, r3, r1, r2
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	2300      	movs	r3, #0
 8007b14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b16:	4618      	mov	r0, r3
 8007b18:	1c51      	adds	r1, r2, #1
 8007b1a:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b1c:	7852      	ldrb	r2, [r2, #1]
 8007b1e:	e7c5      	b.n	8007aac <_strtod_l+0x1d4>
 8007b20:	4648      	mov	r0, r9
 8007b22:	e7ce      	b.n	8007ac2 <_strtod_l+0x1ea>
 8007b24:	2e08      	cmp	r6, #8
 8007b26:	dc05      	bgt.n	8007b34 <_strtod_l+0x25c>
 8007b28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b2a:	fb0e f606 	mul.w	r6, lr, r6
 8007b2e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007b30:	460e      	mov	r6, r1
 8007b32:	e7dc      	b.n	8007aee <_strtod_l+0x216>
 8007b34:	2910      	cmp	r1, #16
 8007b36:	bfd8      	it	le
 8007b38:	fb0e f707 	mulle.w	r7, lr, r7
 8007b3c:	e7f8      	b.n	8007b30 <_strtod_l+0x258>
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	bfdc      	itt	le
 8007b42:	230a      	movle	r3, #10
 8007b44:	fb03 2707 	mlale	r7, r3, r7, r2
 8007b48:	e7e3      	b.n	8007b12 <_strtod_l+0x23a>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e77a      	b.n	8007a48 <_strtod_l+0x170>
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	1ca2      	adds	r2, r4, #2
 8007b58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b5a:	78a2      	ldrb	r2, [r4, #2]
 8007b5c:	e782      	b.n	8007a64 <_strtod_l+0x18c>
 8007b5e:	f04f 0c01 	mov.w	ip, #1
 8007b62:	e7f8      	b.n	8007b56 <_strtod_l+0x27e>
 8007b64:	08009aec 	.word	0x08009aec
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	08009921 	.word	0x08009921
 8007b70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b72:	1c51      	adds	r1, r2, #1
 8007b74:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b76:	7852      	ldrb	r2, [r2, #1]
 8007b78:	2a30      	cmp	r2, #48	@ 0x30
 8007b7a:	d0f9      	beq.n	8007b70 <_strtod_l+0x298>
 8007b7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b80:	2908      	cmp	r1, #8
 8007b82:	f63f af75 	bhi.w	8007a70 <_strtod_l+0x198>
 8007b86:	f04f 080a 	mov.w	r8, #10
 8007b8a:	3a30      	subs	r2, #48	@ 0x30
 8007b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b94:	1c56      	adds	r6, r2, #1
 8007b96:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b98:	7852      	ldrb	r2, [r2, #1]
 8007b9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b9e:	f1be 0f09 	cmp.w	lr, #9
 8007ba2:	d939      	bls.n	8007c18 <_strtod_l+0x340>
 8007ba4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ba6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007baa:	1a76      	subs	r6, r6, r1
 8007bac:	2e08      	cmp	r6, #8
 8007bae:	dc03      	bgt.n	8007bb8 <_strtod_l+0x2e0>
 8007bb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bb2:	4588      	cmp	r8, r1
 8007bb4:	bfa8      	it	ge
 8007bb6:	4688      	movge	r8, r1
 8007bb8:	f1bc 0f00 	cmp.w	ip, #0
 8007bbc:	d001      	beq.n	8007bc2 <_strtod_l+0x2ea>
 8007bbe:	f1c8 0800 	rsb	r8, r8, #0
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	d14e      	bne.n	8007c64 <_strtod_l+0x38c>
 8007bc6:	9908      	ldr	r1, [sp, #32]
 8007bc8:	4308      	orrs	r0, r1
 8007bca:	f47f aebe 	bne.w	800794a <_strtod_l+0x72>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f47f aed4 	bne.w	800797c <_strtod_l+0xa4>
 8007bd4:	2a69      	cmp	r2, #105	@ 0x69
 8007bd6:	d028      	beq.n	8007c2a <_strtod_l+0x352>
 8007bd8:	dc25      	bgt.n	8007c26 <_strtod_l+0x34e>
 8007bda:	2a49      	cmp	r2, #73	@ 0x49
 8007bdc:	d025      	beq.n	8007c2a <_strtod_l+0x352>
 8007bde:	2a4e      	cmp	r2, #78	@ 0x4e
 8007be0:	f47f aecc 	bne.w	800797c <_strtod_l+0xa4>
 8007be4:	4999      	ldr	r1, [pc, #612]	@ (8007e4c <_strtod_l+0x574>)
 8007be6:	a819      	add	r0, sp, #100	@ 0x64
 8007be8:	f001 f9ce 	bl	8008f88 <__match>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f aec5 	beq.w	800797c <_strtod_l+0xa4>
 8007bf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b28      	cmp	r3, #40	@ 0x28
 8007bf8:	d12e      	bne.n	8007c58 <_strtod_l+0x380>
 8007bfa:	4995      	ldr	r1, [pc, #596]	@ (8007e50 <_strtod_l+0x578>)
 8007bfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bfe:	a819      	add	r0, sp, #100	@ 0x64
 8007c00:	f001 f9d6 	bl	8008fb0 <__hexnan>
 8007c04:	2805      	cmp	r0, #5
 8007c06:	d127      	bne.n	8007c58 <_strtod_l+0x380>
 8007c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c16:	e698      	b.n	800794a <_strtod_l+0x72>
 8007c18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c1a:	fb08 2101 	mla	r1, r8, r1, r2
 8007c1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c24:	e7b5      	b.n	8007b92 <_strtod_l+0x2ba>
 8007c26:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c28:	e7da      	b.n	8007be0 <_strtod_l+0x308>
 8007c2a:	498a      	ldr	r1, [pc, #552]	@ (8007e54 <_strtod_l+0x57c>)
 8007c2c:	a819      	add	r0, sp, #100	@ 0x64
 8007c2e:	f001 f9ab 	bl	8008f88 <__match>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f43f aea2 	beq.w	800797c <_strtod_l+0xa4>
 8007c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3a:	4987      	ldr	r1, [pc, #540]	@ (8007e58 <_strtod_l+0x580>)
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	a819      	add	r0, sp, #100	@ 0x64
 8007c40:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c42:	f001 f9a1 	bl	8008f88 <__match>
 8007c46:	b910      	cbnz	r0, 8007c4e <_strtod_l+0x376>
 8007c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c4e:	f04f 0a00 	mov.w	sl, #0
 8007c52:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007e5c <_strtod_l+0x584>
 8007c56:	e678      	b.n	800794a <_strtod_l+0x72>
 8007c58:	4881      	ldr	r0, [pc, #516]	@ (8007e60 <_strtod_l+0x588>)
 8007c5a:	f000 fed3 	bl	8008a04 <nan>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	468b      	mov	fp, r1
 8007c62:	e672      	b.n	800794a <_strtod_l+0x72>
 8007c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	46a9      	moveq	r9, r5
 8007c6e:	eba8 0303 	sub.w	r3, r8, r3
 8007c72:	2d10      	cmp	r5, #16
 8007c74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007c76:	462c      	mov	r4, r5
 8007c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7a:	bfa8      	it	ge
 8007c7c:	2410      	movge	r4, #16
 8007c7e:	f7f8 fbb1 	bl	80003e4 <__aeabi_ui2d>
 8007c82:	2d09      	cmp	r5, #9
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	dc11      	bgt.n	8007cae <_strtod_l+0x3d6>
 8007c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f ae5c 	beq.w	800794a <_strtod_l+0x72>
 8007c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c94:	dd76      	ble.n	8007d84 <_strtod_l+0x4ac>
 8007c96:	2b16      	cmp	r3, #22
 8007c98:	dc5d      	bgt.n	8007d56 <_strtod_l+0x47e>
 8007c9a:	4972      	ldr	r1, [pc, #456]	@ (8007e64 <_strtod_l+0x58c>)
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca8:	f7f8 fc16 	bl	80004d8 <__aeabi_dmul>
 8007cac:	e7d7      	b.n	8007c5e <_strtod_l+0x386>
 8007cae:	4b6d      	ldr	r3, [pc, #436]	@ (8007e64 <_strtod_l+0x58c>)
 8007cb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	468b      	mov	fp, r1
 8007cc2:	f7f8 fb8f 	bl	80003e4 <__aeabi_ui2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fa4d 	bl	800016c <__adddf3>
 8007cd2:	2d0f      	cmp	r5, #15
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	ddd7      	ble.n	8007c8a <_strtod_l+0x3b2>
 8007cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cdc:	1b2c      	subs	r4, r5, r4
 8007cde:	441c      	add	r4, r3
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	f340 8093 	ble.w	8007e0c <_strtod_l+0x534>
 8007ce6:	f014 030f 	ands.w	r3, r4, #15
 8007cea:	d00a      	beq.n	8007d02 <_strtod_l+0x42a>
 8007cec:	495d      	ldr	r1, [pc, #372]	@ (8007e64 <_strtod_l+0x58c>)
 8007cee:	4652      	mov	r2, sl
 8007cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf8:	465b      	mov	r3, fp
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	f034 040f 	bics.w	r4, r4, #15
 8007d06:	d073      	beq.n	8007df0 <_strtod_l+0x518>
 8007d08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d0c:	dd49      	ble.n	8007da2 <_strtod_l+0x4ca>
 8007d0e:	2400      	movs	r4, #0
 8007d10:	46a0      	mov	r8, r4
 8007d12:	46a1      	mov	r9, r4
 8007d14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d16:	2322      	movs	r3, #34	@ 0x22
 8007d18:	f04f 0a00 	mov.w	sl, #0
 8007d1c:	9a05      	ldr	r2, [sp, #20]
 8007d1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007e5c <_strtod_l+0x584>
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f43f ae0f 	beq.w	800794a <_strtod_l+0x72>
 8007d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	f7ff f950 	bl	8006fd4 <_Bfree>
 8007d34:	4649      	mov	r1, r9
 8007d36:	9805      	ldr	r0, [sp, #20]
 8007d38:	f7ff f94c 	bl	8006fd4 <_Bfree>
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	f7ff f948 	bl	8006fd4 <_Bfree>
 8007d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	f7ff f944 	bl	8006fd4 <_Bfree>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	f7ff f940 	bl	8006fd4 <_Bfree>
 8007d54:	e5f9      	b.n	800794a <_strtod_l+0x72>
 8007d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	dbbc      	blt.n	8007cda <_strtod_l+0x402>
 8007d60:	4c40      	ldr	r4, [pc, #256]	@ (8007e64 <_strtod_l+0x58c>)
 8007d62:	f1c5 050f 	rsb	r5, r5, #15
 8007d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d70:	465b      	mov	r3, fp
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	1b5d      	subs	r5, r3, r5
 8007d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d82:	e791      	b.n	8007ca8 <_strtod_l+0x3d0>
 8007d84:	3316      	adds	r3, #22
 8007d86:	dba8      	blt.n	8007cda <_strtod_l+0x402>
 8007d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	eba3 0808 	sub.w	r8, r3, r8
 8007d90:	4b34      	ldr	r3, [pc, #208]	@ (8007e64 <_strtod_l+0x58c>)
 8007d92:	4659      	mov	r1, fp
 8007d94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d9c:	f7f8 fcc6 	bl	800072c <__aeabi_ddiv>
 8007da0:	e75d      	b.n	8007c5e <_strtod_l+0x386>
 8007da2:	2300      	movs	r3, #0
 8007da4:	4650      	mov	r0, sl
 8007da6:	4659      	mov	r1, fp
 8007da8:	461e      	mov	r6, r3
 8007daa:	4f2f      	ldr	r7, [pc, #188]	@ (8007e68 <_strtod_l+0x590>)
 8007dac:	1124      	asrs	r4, r4, #4
 8007dae:	2c01      	cmp	r4, #1
 8007db0:	dc21      	bgt.n	8007df6 <_strtod_l+0x51e>
 8007db2:	b10b      	cbz	r3, 8007db8 <_strtod_l+0x4e0>
 8007db4:	4682      	mov	sl, r0
 8007db6:	468b      	mov	fp, r1
 8007db8:	492b      	ldr	r1, [pc, #172]	@ (8007e68 <_strtod_l+0x590>)
 8007dba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007dbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc8:	465b      	mov	r3, fp
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	4b23      	ldr	r3, [pc, #140]	@ (8007e5c <_strtod_l+0x584>)
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	4925      	ldr	r1, [pc, #148]	@ (8007e6c <_strtod_l+0x594>)
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	d898      	bhi.n	8007d0e <_strtod_l+0x436>
 8007ddc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf86      	itte	hi
 8007de4:	f04f 3aff 	movhi.w	sl, #4294967295
 8007de8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007e70 <_strtod_l+0x598>
 8007dec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007df0:	2300      	movs	r3, #0
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	e076      	b.n	8007ee4 <_strtod_l+0x60c>
 8007df6:	07e2      	lsls	r2, r4, #31
 8007df8:	d504      	bpl.n	8007e04 <_strtod_l+0x52c>
 8007dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfe:	f7f8 fb6b 	bl	80004d8 <__aeabi_dmul>
 8007e02:	2301      	movs	r3, #1
 8007e04:	3601      	adds	r6, #1
 8007e06:	1064      	asrs	r4, r4, #1
 8007e08:	3708      	adds	r7, #8
 8007e0a:	e7d0      	b.n	8007dae <_strtod_l+0x4d6>
 8007e0c:	d0f0      	beq.n	8007df0 <_strtod_l+0x518>
 8007e0e:	4264      	negs	r4, r4
 8007e10:	f014 020f 	ands.w	r2, r4, #15
 8007e14:	d00a      	beq.n	8007e2c <_strtod_l+0x554>
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <_strtod_l+0x58c>)
 8007e18:	4650      	mov	r0, sl
 8007e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1e:	4659      	mov	r1, fp
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fc82 	bl	800072c <__aeabi_ddiv>
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	1124      	asrs	r4, r4, #4
 8007e2e:	d0df      	beq.n	8007df0 <_strtod_l+0x518>
 8007e30:	2c1f      	cmp	r4, #31
 8007e32:	dd1f      	ble.n	8007e74 <_strtod_l+0x59c>
 8007e34:	2400      	movs	r4, #0
 8007e36:	46a0      	mov	r8, r4
 8007e38:	46a1      	mov	r9, r4
 8007e3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e3c:	2322      	movs	r3, #34	@ 0x22
 8007e3e:	9a05      	ldr	r2, [sp, #20]
 8007e40:	f04f 0a00 	mov.w	sl, #0
 8007e44:	f04f 0b00 	mov.w	fp, #0
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	e76b      	b.n	8007d24 <_strtod_l+0x44c>
 8007e4c:	0800980f 	.word	0x0800980f
 8007e50:	08009ad8 	.word	0x08009ad8
 8007e54:	08009807 	.word	0x08009807
 8007e58:	0800983e 	.word	0x0800983e
 8007e5c:	7ff00000 	.word	0x7ff00000
 8007e60:	08009977 	.word	0x08009977
 8007e64:	08009a10 	.word	0x08009a10
 8007e68:	080099e8 	.word	0x080099e8
 8007e6c:	7ca00000 	.word	0x7ca00000
 8007e70:	7fefffff 	.word	0x7fefffff
 8007e74:	f014 0310 	ands.w	r3, r4, #16
 8007e78:	bf18      	it	ne
 8007e7a:	236a      	movne	r3, #106	@ 0x6a
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	9308      	str	r3, [sp, #32]
 8007e80:	4659      	mov	r1, fp
 8007e82:	2300      	movs	r3, #0
 8007e84:	4e77      	ldr	r6, [pc, #476]	@ (8008064 <_strtod_l+0x78c>)
 8007e86:	07e7      	lsls	r7, r4, #31
 8007e88:	d504      	bpl.n	8007e94 <_strtod_l+0x5bc>
 8007e8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e8e:	f7f8 fb23 	bl	80004d8 <__aeabi_dmul>
 8007e92:	2301      	movs	r3, #1
 8007e94:	1064      	asrs	r4, r4, #1
 8007e96:	f106 0608 	add.w	r6, r6, #8
 8007e9a:	d1f4      	bne.n	8007e86 <_strtod_l+0x5ae>
 8007e9c:	b10b      	cbz	r3, 8007ea2 <_strtod_l+0x5ca>
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	b1b3      	cbz	r3, 8007ed4 <_strtod_l+0x5fc>
 8007ea6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	dd0f      	ble.n	8007ed4 <_strtod_l+0x5fc>
 8007eb4:	2b1f      	cmp	r3, #31
 8007eb6:	dd58      	ble.n	8007f6a <_strtod_l+0x692>
 8007eb8:	2b34      	cmp	r3, #52	@ 0x34
 8007eba:	bfd8      	it	le
 8007ebc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ec0:	f04f 0a00 	mov.w	sl, #0
 8007ec4:	bfcf      	iteee	gt
 8007ec6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007eca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ece:	4093      	lslle	r3, r2
 8007ed0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	f7f8 fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1a7      	bne.n	8007e34 <_strtod_l+0x55c>
 8007ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007eec:	462b      	mov	r3, r5
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f7ff f8d8 	bl	80070a4 <__s2b>
 8007ef4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f af09 	beq.w	8007d0e <_strtod_l+0x436>
 8007efc:	2400      	movs	r4, #0
 8007efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	eba3 0308 	sub.w	r3, r3, r8
 8007f08:	bfa8      	it	ge
 8007f0a:	2300      	movge	r3, #0
 8007f0c:	46a0      	mov	r8, r4
 8007f0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f14:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f18:	9805      	ldr	r0, [sp, #20]
 8007f1a:	6859      	ldr	r1, [r3, #4]
 8007f1c:	f7ff f81a 	bl	8006f54 <_Balloc>
 8007f20:	4681      	mov	r9, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f43f aef7 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2a:	300c      	adds	r0, #12
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	f103 010c 	add.w	r1, r3, #12
 8007f32:	3202      	adds	r2, #2
 8007f34:	0092      	lsls	r2, r2, #2
 8007f36:	f7fe f89e 	bl	8006076 <memcpy>
 8007f3a:	ab1c      	add	r3, sp, #112	@ 0x70
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f4c:	f7ff fbd6 	bl	80076fc <__d2b>
 8007f50:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f aedf 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f58:	2101      	movs	r1, #1
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	f7ff f938 	bl	80071d0 <__i2b>
 8007f60:	4680      	mov	r8, r0
 8007f62:	b948      	cbnz	r0, 8007f78 <_strtod_l+0x6a0>
 8007f64:	f04f 0800 	mov.w	r8, #0
 8007f68:	e6d5      	b.n	8007d16 <_strtod_l+0x43e>
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	ea03 0a0a 	and.w	sl, r3, sl
 8007f76:	e7ad      	b.n	8007ed4 <_strtod_l+0x5fc>
 8007f78:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	bfab      	itete	ge
 8007f80:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f82:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f84:	18ef      	addge	r7, r5, r3
 8007f86:	1b5e      	sublt	r6, r3, r5
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	bfa8      	it	ge
 8007f8c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f8e:	eba5 0503 	sub.w	r5, r5, r3
 8007f92:	4415      	add	r5, r2
 8007f94:	4b34      	ldr	r3, [pc, #208]	@ (8008068 <_strtod_l+0x790>)
 8007f96:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f9a:	bfb8      	it	lt
 8007f9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fa4:	da50      	bge.n	8008048 <_strtod_l+0x770>
 8007fa6:	1b5b      	subs	r3, r3, r5
 8007fa8:	2b1f      	cmp	r3, #31
 8007faa:	f04f 0101 	mov.w	r1, #1
 8007fae:	eba2 0203 	sub.w	r2, r2, r3
 8007fb2:	dc3d      	bgt.n	8008030 <_strtod_l+0x758>
 8007fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fbe:	18bd      	adds	r5, r7, r2
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	42af      	cmp	r7, r5
 8007fc4:	4416      	add	r6, r2
 8007fc6:	441e      	add	r6, r3
 8007fc8:	463b      	mov	r3, r7
 8007fca:	bfa8      	it	ge
 8007fcc:	462b      	movge	r3, r5
 8007fce:	42b3      	cmp	r3, r6
 8007fd0:	bfa8      	it	ge
 8007fd2:	4633      	movge	r3, r6
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bfc2      	ittt	gt
 8007fd8:	1aed      	subgt	r5, r5, r3
 8007fda:	1af6      	subgt	r6, r6, r3
 8007fdc:	1aff      	subgt	r7, r7, r3
 8007fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd16      	ble.n	8008012 <_strtod_l+0x73a>
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	9805      	ldr	r0, [sp, #20]
 8007fea:	f7ff f9a9 	bl	8007340 <__pow5mult>
 8007fee:	4680      	mov	r8, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0b7      	beq.n	8007f64 <_strtod_l+0x68c>
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ff8:	9805      	ldr	r0, [sp, #20]
 8007ffa:	f7ff f8ff 	bl	80071fc <__multiply>
 8007ffe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008000:	2800      	cmp	r0, #0
 8008002:	f43f ae88 	beq.w	8007d16 <_strtod_l+0x43e>
 8008006:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008008:	9805      	ldr	r0, [sp, #20]
 800800a:	f7fe ffe3 	bl	8006fd4 <_Bfree>
 800800e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008010:	931a      	str	r3, [sp, #104]	@ 0x68
 8008012:	2d00      	cmp	r5, #0
 8008014:	dc1d      	bgt.n	8008052 <_strtod_l+0x77a>
 8008016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	dd27      	ble.n	800806c <_strtod_l+0x794>
 800801c:	4649      	mov	r1, r9
 800801e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008020:	9805      	ldr	r0, [sp, #20]
 8008022:	f7ff f98d 	bl	8007340 <__pow5mult>
 8008026:	4681      	mov	r9, r0
 8008028:	bb00      	cbnz	r0, 800806c <_strtod_l+0x794>
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	e672      	b.n	8007d16 <_strtod_l+0x43e>
 8008030:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008034:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008038:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800803c:	35e2      	adds	r5, #226	@ 0xe2
 800803e:	fa01 f305 	lsl.w	r3, r1, r5
 8008042:	9310      	str	r3, [sp, #64]	@ 0x40
 8008044:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008046:	e7ba      	b.n	8007fbe <_strtod_l+0x6e6>
 8008048:	2300      	movs	r3, #0
 800804a:	9310      	str	r3, [sp, #64]	@ 0x40
 800804c:	2301      	movs	r3, #1
 800804e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008050:	e7b5      	b.n	8007fbe <_strtod_l+0x6e6>
 8008052:	462a      	mov	r2, r5
 8008054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008056:	9805      	ldr	r0, [sp, #20]
 8008058:	f7ff f9cc 	bl	80073f4 <__lshift>
 800805c:	901a      	str	r0, [sp, #104]	@ 0x68
 800805e:	2800      	cmp	r0, #0
 8008060:	d1d9      	bne.n	8008016 <_strtod_l+0x73e>
 8008062:	e658      	b.n	8007d16 <_strtod_l+0x43e>
 8008064:	08009b00 	.word	0x08009b00
 8008068:	fffffc02 	.word	0xfffffc02
 800806c:	2e00      	cmp	r6, #0
 800806e:	dd07      	ble.n	8008080 <_strtod_l+0x7a8>
 8008070:	4649      	mov	r1, r9
 8008072:	4632      	mov	r2, r6
 8008074:	9805      	ldr	r0, [sp, #20]
 8008076:	f7ff f9bd 	bl	80073f4 <__lshift>
 800807a:	4681      	mov	r9, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d0d4      	beq.n	800802a <_strtod_l+0x752>
 8008080:	2f00      	cmp	r7, #0
 8008082:	dd08      	ble.n	8008096 <_strtod_l+0x7be>
 8008084:	4641      	mov	r1, r8
 8008086:	463a      	mov	r2, r7
 8008088:	9805      	ldr	r0, [sp, #20]
 800808a:	f7ff f9b3 	bl	80073f4 <__lshift>
 800808e:	4680      	mov	r8, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	f43f ae40 	beq.w	8007d16 <_strtod_l+0x43e>
 8008096:	464a      	mov	r2, r9
 8008098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800809a:	9805      	ldr	r0, [sp, #20]
 800809c:	f7ff fa32 	bl	8007504 <__mdiff>
 80080a0:	4604      	mov	r4, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f ae37 	beq.w	8007d16 <_strtod_l+0x43e>
 80080a8:	68c3      	ldr	r3, [r0, #12]
 80080aa:	4641      	mov	r1, r8
 80080ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080ae:	2300      	movs	r3, #0
 80080b0:	60c3      	str	r3, [r0, #12]
 80080b2:	f7ff fa0b 	bl	80074cc <__mcmp>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	da3d      	bge.n	8008136 <_strtod_l+0x85e>
 80080ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080bc:	ea53 030a 	orrs.w	r3, r3, sl
 80080c0:	d163      	bne.n	800818a <_strtod_l+0x8b2>
 80080c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d15f      	bne.n	800818a <_strtod_l+0x8b2>
 80080ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080d6:	d958      	bls.n	800818a <_strtod_l+0x8b2>
 80080d8:	6963      	ldr	r3, [r4, #20]
 80080da:	b913      	cbnz	r3, 80080e2 <_strtod_l+0x80a>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	dd53      	ble.n	800818a <_strtod_l+0x8b2>
 80080e2:	4621      	mov	r1, r4
 80080e4:	2201      	movs	r2, #1
 80080e6:	9805      	ldr	r0, [sp, #20]
 80080e8:	f7ff f984 	bl	80073f4 <__lshift>
 80080ec:	4641      	mov	r1, r8
 80080ee:	4604      	mov	r4, r0
 80080f0:	f7ff f9ec 	bl	80074cc <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dd48      	ble.n	800818a <_strtod_l+0x8b2>
 80080f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080fc:	9a08      	ldr	r2, [sp, #32]
 80080fe:	0d1b      	lsrs	r3, r3, #20
 8008100:	051b      	lsls	r3, r3, #20
 8008102:	2a00      	cmp	r2, #0
 8008104:	d062      	beq.n	80081cc <_strtod_l+0x8f4>
 8008106:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800810a:	d85f      	bhi.n	80081cc <_strtod_l+0x8f4>
 800810c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008110:	f67f ae94 	bls.w	8007e3c <_strtod_l+0x564>
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	4ba3      	ldr	r3, [pc, #652]	@ (80083a8 <_strtod_l+0xad0>)
 800811a:	2200      	movs	r2, #0
 800811c:	f7f8 f9dc 	bl	80004d8 <__aeabi_dmul>
 8008120:	4ba2      	ldr	r3, [pc, #648]	@ (80083ac <_strtod_l+0xad4>)
 8008122:	4682      	mov	sl, r0
 8008124:	400b      	ands	r3, r1
 8008126:	468b      	mov	fp, r1
 8008128:	2b00      	cmp	r3, #0
 800812a:	f47f adff 	bne.w	8007d2c <_strtod_l+0x454>
 800812e:	2322      	movs	r3, #34	@ 0x22
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e5fa      	b.n	8007d2c <_strtod_l+0x454>
 8008136:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800813a:	d165      	bne.n	8008208 <_strtod_l+0x930>
 800813c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800813e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008142:	b35a      	cbz	r2, 800819c <_strtod_l+0x8c4>
 8008144:	4a9a      	ldr	r2, [pc, #616]	@ (80083b0 <_strtod_l+0xad8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d12b      	bne.n	80081a2 <_strtod_l+0x8ca>
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	4651      	mov	r1, sl
 800814e:	b303      	cbz	r3, 8008192 <_strtod_l+0x8ba>
 8008150:	465a      	mov	r2, fp
 8008152:	4b96      	ldr	r3, [pc, #600]	@ (80083ac <_strtod_l+0xad4>)
 8008154:	4013      	ands	r3, r2
 8008156:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	d81b      	bhi.n	8008198 <_strtod_l+0x8c0>
 8008160:	0d1b      	lsrs	r3, r3, #20
 8008162:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	4299      	cmp	r1, r3
 800816c:	d119      	bne.n	80081a2 <_strtod_l+0x8ca>
 800816e:	4b91      	ldr	r3, [pc, #580]	@ (80083b4 <_strtod_l+0xadc>)
 8008170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008172:	429a      	cmp	r2, r3
 8008174:	d102      	bne.n	800817c <_strtod_l+0x8a4>
 8008176:	3101      	adds	r1, #1
 8008178:	f43f adcd 	beq.w	8007d16 <_strtod_l+0x43e>
 800817c:	f04f 0a00 	mov.w	sl, #0
 8008180:	4b8a      	ldr	r3, [pc, #552]	@ (80083ac <_strtod_l+0xad4>)
 8008182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008184:	401a      	ands	r2, r3
 8008186:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1c1      	bne.n	8008114 <_strtod_l+0x83c>
 8008190:	e5cc      	b.n	8007d2c <_strtod_l+0x454>
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
 8008196:	e7e8      	b.n	800816a <_strtod_l+0x892>
 8008198:	4613      	mov	r3, r2
 800819a:	e7e6      	b.n	800816a <_strtod_l+0x892>
 800819c:	ea53 030a 	orrs.w	r3, r3, sl
 80081a0:	d0aa      	beq.n	80080f8 <_strtod_l+0x820>
 80081a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081a4:	b1db      	cbz	r3, 80081de <_strtod_l+0x906>
 80081a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081a8:	4213      	tst	r3, r2
 80081aa:	d0ee      	beq.n	800818a <_strtod_l+0x8b2>
 80081ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ae:	4650      	mov	r0, sl
 80081b0:	4659      	mov	r1, fp
 80081b2:	9a08      	ldr	r2, [sp, #32]
 80081b4:	b1bb      	cbz	r3, 80081e6 <_strtod_l+0x90e>
 80081b6:	f7ff fb6d 	bl	8007894 <sulp>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c2:	f7f7 ffd3 	bl	800016c <__adddf3>
 80081c6:	4682      	mov	sl, r0
 80081c8:	468b      	mov	fp, r1
 80081ca:	e7de      	b.n	800818a <_strtod_l+0x8b2>
 80081cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081d0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081d4:	f04f 3aff 	mov.w	sl, #4294967295
 80081d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081dc:	e7d5      	b.n	800818a <_strtod_l+0x8b2>
 80081de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081e0:	ea13 0f0a 	tst.w	r3, sl
 80081e4:	e7e1      	b.n	80081aa <_strtod_l+0x8d2>
 80081e6:	f7ff fb55 	bl	8007894 <sulp>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081f2:	f7f7 ffb9 	bl	8000168 <__aeabi_dsub>
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	4682      	mov	sl, r0
 80081fc:	468b      	mov	fp, r1
 80081fe:	f7f8 fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 8008202:	2800      	cmp	r0, #0
 8008204:	d0c1      	beq.n	800818a <_strtod_l+0x8b2>
 8008206:	e619      	b.n	8007e3c <_strtod_l+0x564>
 8008208:	4641      	mov	r1, r8
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff face 	bl	80077ac <__ratio>
 8008210:	2200      	movs	r2, #0
 8008212:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
 800821a:	f7f8 fbd9 	bl	80009d0 <__aeabi_dcmple>
 800821e:	2800      	cmp	r0, #0
 8008220:	d06d      	beq.n	80082fe <_strtod_l+0xa26>
 8008222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d178      	bne.n	800831a <_strtod_l+0xa42>
 8008228:	f1ba 0f00 	cmp.w	sl, #0
 800822c:	d156      	bne.n	80082dc <_strtod_l+0xa04>
 800822e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008234:	2b00      	cmp	r3, #0
 8008236:	d158      	bne.n	80082ea <_strtod_l+0xa12>
 8008238:	2200      	movs	r2, #0
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	4b5e      	ldr	r3, [pc, #376]	@ (80083b8 <_strtod_l+0xae0>)
 8008240:	f7f8 fbbc 	bl	80009bc <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	d157      	bne.n	80082f8 <_strtod_l+0xa20>
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	2200      	movs	r2, #0
 800824e:	4b5b      	ldr	r3, [pc, #364]	@ (80083bc <_strtod_l+0xae4>)
 8008250:	f7f8 f942 	bl	80004d8 <__aeabi_dmul>
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800825c:	9606      	str	r6, [sp, #24]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008264:	4d51      	ldr	r5, [pc, #324]	@ (80083ac <_strtod_l+0xad4>)
 8008266:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800826a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826c:	401d      	ands	r5, r3
 800826e:	4b54      	ldr	r3, [pc, #336]	@ (80083c0 <_strtod_l+0xae8>)
 8008270:	429d      	cmp	r5, r3
 8008272:	f040 80ab 	bne.w	80083cc <_strtod_l+0xaf4>
 8008276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008278:	4650      	mov	r0, sl
 800827a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800827e:	4659      	mov	r1, fp
 8008280:	f7ff f9d4 	bl	800762c <__ulp>
 8008284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	f7f7 ff6c 	bl	800016c <__adddf3>
 8008294:	460b      	mov	r3, r1
 8008296:	4945      	ldr	r1, [pc, #276]	@ (80083ac <_strtod_l+0xad4>)
 8008298:	4a4a      	ldr	r2, [pc, #296]	@ (80083c4 <_strtod_l+0xaec>)
 800829a:	4019      	ands	r1, r3
 800829c:	4291      	cmp	r1, r2
 800829e:	4682      	mov	sl, r0
 80082a0:	d942      	bls.n	8008328 <_strtod_l+0xa50>
 80082a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082a4:	4b43      	ldr	r3, [pc, #268]	@ (80083b4 <_strtod_l+0xadc>)
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d103      	bne.n	80082b2 <_strtod_l+0x9da>
 80082aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ac:	3301      	adds	r3, #1
 80082ae:	f43f ad32 	beq.w	8007d16 <_strtod_l+0x43e>
 80082b2:	f04f 3aff 	mov.w	sl, #4294967295
 80082b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80083b4 <_strtod_l+0xadc>
 80082ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082bc:	9805      	ldr	r0, [sp, #20]
 80082be:	f7fe fe89 	bl	8006fd4 <_Bfree>
 80082c2:	4649      	mov	r1, r9
 80082c4:	9805      	ldr	r0, [sp, #20]
 80082c6:	f7fe fe85 	bl	8006fd4 <_Bfree>
 80082ca:	4641      	mov	r1, r8
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	f7fe fe81 	bl	8006fd4 <_Bfree>
 80082d2:	4621      	mov	r1, r4
 80082d4:	9805      	ldr	r0, [sp, #20]
 80082d6:	f7fe fe7d 	bl	8006fd4 <_Bfree>
 80082da:	e61c      	b.n	8007f16 <_strtod_l+0x63e>
 80082dc:	f1ba 0f01 	cmp.w	sl, #1
 80082e0:	d103      	bne.n	80082ea <_strtod_l+0xa12>
 80082e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f43f ada9 	beq.w	8007e3c <_strtod_l+0x564>
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b36      	ldr	r3, [pc, #216]	@ (80083c8 <_strtod_l+0xaf0>)
 80082ee:	2600      	movs	r6, #0
 80082f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082f4:	4f30      	ldr	r7, [pc, #192]	@ (80083b8 <_strtod_l+0xae0>)
 80082f6:	e7b3      	b.n	8008260 <_strtod_l+0x988>
 80082f8:	2600      	movs	r6, #0
 80082fa:	4f30      	ldr	r7, [pc, #192]	@ (80083bc <_strtod_l+0xae4>)
 80082fc:	e7ac      	b.n	8008258 <_strtod_l+0x980>
 80082fe:	4630      	mov	r0, r6
 8008300:	4639      	mov	r1, r7
 8008302:	4b2e      	ldr	r3, [pc, #184]	@ (80083bc <_strtod_l+0xae4>)
 8008304:	2200      	movs	r2, #0
 8008306:	f7f8 f8e7 	bl	80004d8 <__aeabi_dmul>
 800830a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0a1      	beq.n	8008258 <_strtod_l+0x980>
 8008314:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008318:	e7a2      	b.n	8008260 <_strtod_l+0x988>
 800831a:	2200      	movs	r2, #0
 800831c:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <_strtod_l+0xae0>)
 800831e:	4616      	mov	r6, r2
 8008320:	461f      	mov	r7, r3
 8008322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008326:	e79b      	b.n	8008260 <_strtod_l+0x988>
 8008328:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1c1      	bne.n	80082ba <_strtod_l+0x9e2>
 8008336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	429d      	cmp	r5, r3
 8008340:	d1bb      	bne.n	80082ba <_strtod_l+0x9e2>
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f8 fc0f 	bl	8000b68 <__aeabi_d2lz>
 800834a:	f7f8 f897 	bl	800047c <__aeabi_l2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f7 ff07 	bl	8000168 <__aeabi_dsub>
 800835a:	460b      	mov	r3, r1
 800835c:	4602      	mov	r2, r0
 800835e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008362:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008368:	ea46 060a 	orr.w	r6, r6, sl
 800836c:	431e      	orrs	r6, r3
 800836e:	d06a      	beq.n	8008446 <_strtod_l+0xb6e>
 8008370:	a309      	add	r3, pc, #36	@ (adr r3, 8008398 <_strtod_l+0xac0>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f8 fb21 	bl	80009bc <__aeabi_dcmplt>
 800837a:	2800      	cmp	r0, #0
 800837c:	f47f acd6 	bne.w	8007d2c <_strtod_l+0x454>
 8008380:	a307      	add	r3, pc, #28	@ (adr r3, 80083a0 <_strtod_l+0xac8>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800838a:	f7f8 fb35 	bl	80009f8 <__aeabi_dcmpgt>
 800838e:	2800      	cmp	r0, #0
 8008390:	d093      	beq.n	80082ba <_strtod_l+0x9e2>
 8008392:	e4cb      	b.n	8007d2c <_strtod_l+0x454>
 8008394:	f3af 8000 	nop.w
 8008398:	94a03595 	.word	0x94a03595
 800839c:	3fdfffff 	.word	0x3fdfffff
 80083a0:	35afe535 	.word	0x35afe535
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	39500000 	.word	0x39500000
 80083ac:	7ff00000 	.word	0x7ff00000
 80083b0:	000fffff 	.word	0x000fffff
 80083b4:	7fefffff 	.word	0x7fefffff
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	7fe00000 	.word	0x7fe00000
 80083c4:	7c9fffff 	.word	0x7c9fffff
 80083c8:	bff00000 	.word	0xbff00000
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	b323      	cbz	r3, 800841a <_strtod_l+0xb42>
 80083d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083d4:	d821      	bhi.n	800841a <_strtod_l+0xb42>
 80083d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008478 <_strtod_l+0xba0>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 faf6 	bl	80009d0 <__aeabi_dcmple>
 80083e4:	b1a0      	cbz	r0, 8008410 <_strtod_l+0xb38>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7f8 fb4d 	bl	8000a88 <__aeabi_d2uiz>
 80083ee:	2801      	cmp	r0, #1
 80083f0:	bf38      	it	cc
 80083f2:	2001      	movcc	r0, #1
 80083f4:	f7f7 fff6 	bl	80003e4 <__aeabi_ui2d>
 80083f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	b9fb      	cbnz	r3, 8008440 <_strtod_l+0xb68>
 8008400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008404:	9014      	str	r0, [sp, #80]	@ 0x50
 8008406:	9315      	str	r3, [sp, #84]	@ 0x54
 8008408:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800840c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008412:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008416:	1b5b      	subs	r3, r3, r5
 8008418:	9311      	str	r3, [sp, #68]	@ 0x44
 800841a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800841e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008422:	f7ff f903 	bl	800762c <__ulp>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4650      	mov	r0, sl
 800842c:	4659      	mov	r1, fp
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008436:	f7f7 fe99 	bl	800016c <__adddf3>
 800843a:	4682      	mov	sl, r0
 800843c:	468b      	mov	fp, r1
 800843e:	e775      	b.n	800832c <_strtod_l+0xa54>
 8008440:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008444:	e7e0      	b.n	8008408 <_strtod_l+0xb30>
 8008446:	a30e      	add	r3, pc, #56	@ (adr r3, 8008480 <_strtod_l+0xba8>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f8 fab6 	bl	80009bc <__aeabi_dcmplt>
 8008450:	e79d      	b.n	800838e <_strtod_l+0xab6>
 8008452:	2300      	movs	r3, #0
 8008454:	930e      	str	r3, [sp, #56]	@ 0x38
 8008456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008458:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	f7ff ba79 	b.w	8007952 <_strtod_l+0x7a>
 8008460:	2a65      	cmp	r2, #101	@ 0x65
 8008462:	f43f ab72 	beq.w	8007b4a <_strtod_l+0x272>
 8008466:	2a45      	cmp	r2, #69	@ 0x45
 8008468:	f43f ab6f 	beq.w	8007b4a <_strtod_l+0x272>
 800846c:	2301      	movs	r3, #1
 800846e:	f7ff bbaa 	b.w	8007bc6 <_strtod_l+0x2ee>
 8008472:	bf00      	nop
 8008474:	f3af 8000 	nop.w
 8008478:	ffc00000 	.word	0xffc00000
 800847c:	41dfffff 	.word	0x41dfffff
 8008480:	94a03595 	.word	0x94a03595
 8008484:	3fcfffff 	.word	0x3fcfffff

08008488 <_strtod_r>:
 8008488:	4b01      	ldr	r3, [pc, #4]	@ (8008490 <_strtod_r+0x8>)
 800848a:	f7ff ba25 	b.w	80078d8 <_strtod_l>
 800848e:	bf00      	nop
 8008490:	2000006c 	.word	0x2000006c

08008494 <_strtol_l.isra.0>:
 8008494:	2b24      	cmp	r3, #36	@ 0x24
 8008496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849a:	4686      	mov	lr, r0
 800849c:	4690      	mov	r8, r2
 800849e:	d801      	bhi.n	80084a4 <_strtol_l.isra.0+0x10>
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d106      	bne.n	80084b2 <_strtol_l.isra.0+0x1e>
 80084a4:	f7fd fdac 	bl	8006000 <__errno>
 80084a8:	2316      	movs	r3, #22
 80084aa:	6003      	str	r3, [r0, #0]
 80084ac:	2000      	movs	r0, #0
 80084ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b2:	460d      	mov	r5, r1
 80084b4:	4833      	ldr	r0, [pc, #204]	@ (8008584 <_strtol_l.isra.0+0xf0>)
 80084b6:	462a      	mov	r2, r5
 80084b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084bc:	5d06      	ldrb	r6, [r0, r4]
 80084be:	f016 0608 	ands.w	r6, r6, #8
 80084c2:	d1f8      	bne.n	80084b6 <_strtol_l.isra.0+0x22>
 80084c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80084c6:	d110      	bne.n	80084ea <_strtol_l.isra.0+0x56>
 80084c8:	2601      	movs	r6, #1
 80084ca:	782c      	ldrb	r4, [r5, #0]
 80084cc:	1c95      	adds	r5, r2, #2
 80084ce:	f033 0210 	bics.w	r2, r3, #16
 80084d2:	d115      	bne.n	8008500 <_strtol_l.isra.0+0x6c>
 80084d4:	2c30      	cmp	r4, #48	@ 0x30
 80084d6:	d10d      	bne.n	80084f4 <_strtol_l.isra.0+0x60>
 80084d8:	782a      	ldrb	r2, [r5, #0]
 80084da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084de:	2a58      	cmp	r2, #88	@ 0x58
 80084e0:	d108      	bne.n	80084f4 <_strtol_l.isra.0+0x60>
 80084e2:	786c      	ldrb	r4, [r5, #1]
 80084e4:	3502      	adds	r5, #2
 80084e6:	2310      	movs	r3, #16
 80084e8:	e00a      	b.n	8008500 <_strtol_l.isra.0+0x6c>
 80084ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80084ec:	bf04      	itt	eq
 80084ee:	782c      	ldrbeq	r4, [r5, #0]
 80084f0:	1c95      	addeq	r5, r2, #2
 80084f2:	e7ec      	b.n	80084ce <_strtol_l.isra.0+0x3a>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f6      	bne.n	80084e6 <_strtol_l.isra.0+0x52>
 80084f8:	2c30      	cmp	r4, #48	@ 0x30
 80084fa:	bf14      	ite	ne
 80084fc:	230a      	movne	r3, #10
 80084fe:	2308      	moveq	r3, #8
 8008500:	2200      	movs	r2, #0
 8008502:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008506:	f10c 3cff 	add.w	ip, ip, #4294967295
 800850a:	fbbc f9f3 	udiv	r9, ip, r3
 800850e:	4610      	mov	r0, r2
 8008510:	fb03 ca19 	mls	sl, r3, r9, ip
 8008514:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008518:	2f09      	cmp	r7, #9
 800851a:	d80f      	bhi.n	800853c <_strtol_l.isra.0+0xa8>
 800851c:	463c      	mov	r4, r7
 800851e:	42a3      	cmp	r3, r4
 8008520:	dd1b      	ble.n	800855a <_strtol_l.isra.0+0xc6>
 8008522:	1c57      	adds	r7, r2, #1
 8008524:	d007      	beq.n	8008536 <_strtol_l.isra.0+0xa2>
 8008526:	4581      	cmp	r9, r0
 8008528:	d314      	bcc.n	8008554 <_strtol_l.isra.0+0xc0>
 800852a:	d101      	bne.n	8008530 <_strtol_l.isra.0+0x9c>
 800852c:	45a2      	cmp	sl, r4
 800852e:	db11      	blt.n	8008554 <_strtol_l.isra.0+0xc0>
 8008530:	2201      	movs	r2, #1
 8008532:	fb00 4003 	mla	r0, r0, r3, r4
 8008536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853a:	e7eb      	b.n	8008514 <_strtol_l.isra.0+0x80>
 800853c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008540:	2f19      	cmp	r7, #25
 8008542:	d801      	bhi.n	8008548 <_strtol_l.isra.0+0xb4>
 8008544:	3c37      	subs	r4, #55	@ 0x37
 8008546:	e7ea      	b.n	800851e <_strtol_l.isra.0+0x8a>
 8008548:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800854c:	2f19      	cmp	r7, #25
 800854e:	d804      	bhi.n	800855a <_strtol_l.isra.0+0xc6>
 8008550:	3c57      	subs	r4, #87	@ 0x57
 8008552:	e7e4      	b.n	800851e <_strtol_l.isra.0+0x8a>
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	e7ed      	b.n	8008536 <_strtol_l.isra.0+0xa2>
 800855a:	1c53      	adds	r3, r2, #1
 800855c:	d108      	bne.n	8008570 <_strtol_l.isra.0+0xdc>
 800855e:	2322      	movs	r3, #34	@ 0x22
 8008560:	4660      	mov	r0, ip
 8008562:	f8ce 3000 	str.w	r3, [lr]
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	d0a0      	beq.n	80084ae <_strtol_l.isra.0+0x1a>
 800856c:	1e69      	subs	r1, r5, #1
 800856e:	e006      	b.n	800857e <_strtol_l.isra.0+0xea>
 8008570:	b106      	cbz	r6, 8008574 <_strtol_l.isra.0+0xe0>
 8008572:	4240      	negs	r0, r0
 8008574:	f1b8 0f00 	cmp.w	r8, #0
 8008578:	d099      	beq.n	80084ae <_strtol_l.isra.0+0x1a>
 800857a:	2a00      	cmp	r2, #0
 800857c:	d1f6      	bne.n	800856c <_strtol_l.isra.0+0xd8>
 800857e:	f8c8 1000 	str.w	r1, [r8]
 8008582:	e794      	b.n	80084ae <_strtol_l.isra.0+0x1a>
 8008584:	08009b29 	.word	0x08009b29

08008588 <_strtol_r>:
 8008588:	f7ff bf84 	b.w	8008494 <_strtol_l.isra.0>

0800858c <__ssputs_r>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	461f      	mov	r7, r3
 8008592:	688e      	ldr	r6, [r1, #8]
 8008594:	4682      	mov	sl, r0
 8008596:	42be      	cmp	r6, r7
 8008598:	460c      	mov	r4, r1
 800859a:	4690      	mov	r8, r2
 800859c:	680b      	ldr	r3, [r1, #0]
 800859e:	d82d      	bhi.n	80085fc <__ssputs_r+0x70>
 80085a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085a8:	d026      	beq.n	80085f8 <__ssputs_r+0x6c>
 80085aa:	6965      	ldr	r5, [r4, #20]
 80085ac:	6909      	ldr	r1, [r1, #16]
 80085ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085b2:	eba3 0901 	sub.w	r9, r3, r1
 80085b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ba:	1c7b      	adds	r3, r7, #1
 80085bc:	444b      	add	r3, r9
 80085be:	106d      	asrs	r5, r5, #1
 80085c0:	429d      	cmp	r5, r3
 80085c2:	bf38      	it	cc
 80085c4:	461d      	movcc	r5, r3
 80085c6:	0553      	lsls	r3, r2, #21
 80085c8:	d527      	bpl.n	800861a <__ssputs_r+0x8e>
 80085ca:	4629      	mov	r1, r5
 80085cc:	f7fe fc36 	bl	8006e3c <_malloc_r>
 80085d0:	4606      	mov	r6, r0
 80085d2:	b360      	cbz	r0, 800862e <__ssputs_r+0xa2>
 80085d4:	464a      	mov	r2, r9
 80085d6:	6921      	ldr	r1, [r4, #16]
 80085d8:	f7fd fd4d 	bl	8006076 <memcpy>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	6126      	str	r6, [r4, #16]
 80085ea:	444e      	add	r6, r9
 80085ec:	6026      	str	r6, [r4, #0]
 80085ee:	463e      	mov	r6, r7
 80085f0:	6165      	str	r5, [r4, #20]
 80085f2:	eba5 0509 	sub.w	r5, r5, r9
 80085f6:	60a5      	str	r5, [r4, #8]
 80085f8:	42be      	cmp	r6, r7
 80085fa:	d900      	bls.n	80085fe <__ssputs_r+0x72>
 80085fc:	463e      	mov	r6, r7
 80085fe:	4632      	mov	r2, r6
 8008600:	4641      	mov	r1, r8
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	f000 f9c2 	bl	800898c <memmove>
 8008608:	2000      	movs	r0, #0
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	60a3      	str	r3, [r4, #8]
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	4433      	add	r3, r6
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861a:	462a      	mov	r2, r5
 800861c:	f000 fd75 	bl	800910a <_realloc_r>
 8008620:	4606      	mov	r6, r0
 8008622:	2800      	cmp	r0, #0
 8008624:	d1e0      	bne.n	80085e8 <__ssputs_r+0x5c>
 8008626:	4650      	mov	r0, sl
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	f7fe fb95 	bl	8006d58 <_free_r>
 800862e:	230c      	movs	r3, #12
 8008630:	f8ca 3000 	str.w	r3, [sl]
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	f04f 30ff 	mov.w	r0, #4294967295
 800863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	e7e9      	b.n	8008616 <__ssputs_r+0x8a>
	...

08008644 <_svfiprintf_r>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	4698      	mov	r8, r3
 800864a:	898b      	ldrh	r3, [r1, #12]
 800864c:	4607      	mov	r7, r0
 800864e:	061b      	lsls	r3, r3, #24
 8008650:	460d      	mov	r5, r1
 8008652:	4614      	mov	r4, r2
 8008654:	b09d      	sub	sp, #116	@ 0x74
 8008656:	d510      	bpl.n	800867a <_svfiprintf_r+0x36>
 8008658:	690b      	ldr	r3, [r1, #16]
 800865a:	b973      	cbnz	r3, 800867a <_svfiprintf_r+0x36>
 800865c:	2140      	movs	r1, #64	@ 0x40
 800865e:	f7fe fbed 	bl	8006e3c <_malloc_r>
 8008662:	6028      	str	r0, [r5, #0]
 8008664:	6128      	str	r0, [r5, #16]
 8008666:	b930      	cbnz	r0, 8008676 <_svfiprintf_r+0x32>
 8008668:	230c      	movs	r3, #12
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	b01d      	add	sp, #116	@ 0x74
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	2340      	movs	r3, #64	@ 0x40
 8008678:	616b      	str	r3, [r5, #20]
 800867a:	2300      	movs	r3, #0
 800867c:	9309      	str	r3, [sp, #36]	@ 0x24
 800867e:	2320      	movs	r3, #32
 8008680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008684:	2330      	movs	r3, #48	@ 0x30
 8008686:	f04f 0901 	mov.w	r9, #1
 800868a:	f8cd 800c 	str.w	r8, [sp, #12]
 800868e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008828 <_svfiprintf_r+0x1e4>
 8008692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008696:	4623      	mov	r3, r4
 8008698:	469a      	mov	sl, r3
 800869a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800869e:	b10a      	cbz	r2, 80086a4 <_svfiprintf_r+0x60>
 80086a0:	2a25      	cmp	r2, #37	@ 0x25
 80086a2:	d1f9      	bne.n	8008698 <_svfiprintf_r+0x54>
 80086a4:	ebba 0b04 	subs.w	fp, sl, r4
 80086a8:	d00b      	beq.n	80086c2 <_svfiprintf_r+0x7e>
 80086aa:	465b      	mov	r3, fp
 80086ac:	4622      	mov	r2, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ff6b 	bl	800858c <__ssputs_r>
 80086b6:	3001      	adds	r0, #1
 80086b8:	f000 80a7 	beq.w	800880a <_svfiprintf_r+0x1c6>
 80086bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086be:	445a      	add	r2, fp
 80086c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 809f 	beq.w	800880a <_svfiprintf_r+0x1c6>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d6:	f10a 0a01 	add.w	sl, sl, #1
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	9307      	str	r3, [sp, #28]
 80086de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086e4:	4654      	mov	r4, sl
 80086e6:	2205      	movs	r2, #5
 80086e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ec:	484e      	ldr	r0, [pc, #312]	@ (8008828 <_svfiprintf_r+0x1e4>)
 80086ee:	f7fd fcb4 	bl	800605a <memchr>
 80086f2:	9a04      	ldr	r2, [sp, #16]
 80086f4:	b9d8      	cbnz	r0, 800872e <_svfiprintf_r+0xea>
 80086f6:	06d0      	lsls	r0, r2, #27
 80086f8:	bf44      	itt	mi
 80086fa:	2320      	movmi	r3, #32
 80086fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008700:	0711      	lsls	r1, r2, #28
 8008702:	bf44      	itt	mi
 8008704:	232b      	movmi	r3, #43	@ 0x2b
 8008706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800870a:	f89a 3000 	ldrb.w	r3, [sl]
 800870e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008710:	d015      	beq.n	800873e <_svfiprintf_r+0xfa>
 8008712:	4654      	mov	r4, sl
 8008714:	2000      	movs	r0, #0
 8008716:	f04f 0c0a 	mov.w	ip, #10
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	4621      	mov	r1, r4
 800871e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008722:	3b30      	subs	r3, #48	@ 0x30
 8008724:	2b09      	cmp	r3, #9
 8008726:	d94b      	bls.n	80087c0 <_svfiprintf_r+0x17c>
 8008728:	b1b0      	cbz	r0, 8008758 <_svfiprintf_r+0x114>
 800872a:	9207      	str	r2, [sp, #28]
 800872c:	e014      	b.n	8008758 <_svfiprintf_r+0x114>
 800872e:	eba0 0308 	sub.w	r3, r0, r8
 8008732:	fa09 f303 	lsl.w	r3, r9, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	46a2      	mov	sl, r4
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	e7d2      	b.n	80086e4 <_svfiprintf_r+0xa0>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	1d19      	adds	r1, r3, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	9103      	str	r1, [sp, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	bfbb      	ittet	lt
 800874a:	425b      	neglt	r3, r3
 800874c:	f042 0202 	orrlt.w	r2, r2, #2
 8008750:	9307      	strge	r3, [sp, #28]
 8008752:	9307      	strlt	r3, [sp, #28]
 8008754:	bfb8      	it	lt
 8008756:	9204      	strlt	r2, [sp, #16]
 8008758:	7823      	ldrb	r3, [r4, #0]
 800875a:	2b2e      	cmp	r3, #46	@ 0x2e
 800875c:	d10a      	bne.n	8008774 <_svfiprintf_r+0x130>
 800875e:	7863      	ldrb	r3, [r4, #1]
 8008760:	2b2a      	cmp	r3, #42	@ 0x2a
 8008762:	d132      	bne.n	80087ca <_svfiprintf_r+0x186>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3402      	adds	r4, #2
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	9203      	str	r2, [sp, #12]
 800876e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800882c <_svfiprintf_r+0x1e8>
 8008778:	2203      	movs	r2, #3
 800877a:	4650      	mov	r0, sl
 800877c:	7821      	ldrb	r1, [r4, #0]
 800877e:	f7fd fc6c 	bl	800605a <memchr>
 8008782:	b138      	cbz	r0, 8008794 <_svfiprintf_r+0x150>
 8008784:	2240      	movs	r2, #64	@ 0x40
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	eba0 000a 	sub.w	r0, r0, sl
 800878c:	4082      	lsls	r2, r0
 800878e:	4313      	orrs	r3, r2
 8008790:	3401      	adds	r4, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008798:	2206      	movs	r2, #6
 800879a:	4825      	ldr	r0, [pc, #148]	@ (8008830 <_svfiprintf_r+0x1ec>)
 800879c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087a0:	f7fd fc5b 	bl	800605a <memchr>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d036      	beq.n	8008816 <_svfiprintf_r+0x1d2>
 80087a8:	4b22      	ldr	r3, [pc, #136]	@ (8008834 <_svfiprintf_r+0x1f0>)
 80087aa:	bb1b      	cbnz	r3, 80087f4 <_svfiprintf_r+0x1b0>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	3307      	adds	r3, #7
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ba:	4433      	add	r3, r6
 80087bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087be:	e76a      	b.n	8008696 <_svfiprintf_r+0x52>
 80087c0:	460c      	mov	r4, r1
 80087c2:	2001      	movs	r0, #1
 80087c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c8:	e7a8      	b.n	800871c <_svfiprintf_r+0xd8>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 0c0a 	mov.w	ip, #10
 80087d0:	4619      	mov	r1, r3
 80087d2:	3401      	adds	r4, #1
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087dc:	3a30      	subs	r2, #48	@ 0x30
 80087de:	2a09      	cmp	r2, #9
 80087e0:	d903      	bls.n	80087ea <_svfiprintf_r+0x1a6>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0c6      	beq.n	8008774 <_svfiprintf_r+0x130>
 80087e6:	9105      	str	r1, [sp, #20]
 80087e8:	e7c4      	b.n	8008774 <_svfiprintf_r+0x130>
 80087ea:	4604      	mov	r4, r0
 80087ec:	2301      	movs	r3, #1
 80087ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f2:	e7f0      	b.n	80087d6 <_svfiprintf_r+0x192>
 80087f4:	ab03      	add	r3, sp, #12
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4638      	mov	r0, r7
 80087fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <_svfiprintf_r+0x1f4>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	f7fc fc88 	bl	8005114 <_printf_float>
 8008804:	1c42      	adds	r2, r0, #1
 8008806:	4606      	mov	r6, r0
 8008808:	d1d6      	bne.n	80087b8 <_svfiprintf_r+0x174>
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	065b      	lsls	r3, r3, #25
 800880e:	f53f af2d 	bmi.w	800866c <_svfiprintf_r+0x28>
 8008812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008814:	e72c      	b.n	8008670 <_svfiprintf_r+0x2c>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4638      	mov	r0, r7
 800881e:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <_svfiprintf_r+0x1f4>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	f7fc ff15 	bl	8005650 <_printf_i>
 8008826:	e7ed      	b.n	8008804 <_svfiprintf_r+0x1c0>
 8008828:	08009923 	.word	0x08009923
 800882c:	08009929 	.word	0x08009929
 8008830:	0800992d 	.word	0x0800992d
 8008834:	08005115 	.word	0x08005115
 8008838:	0800858d 	.word	0x0800858d

0800883c <__sflush_r>:
 800883c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	0716      	lsls	r6, r2, #28
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	d454      	bmi.n	80088f4 <__sflush_r+0xb8>
 800884a:	684b      	ldr	r3, [r1, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dc02      	bgt.n	8008856 <__sflush_r+0x1a>
 8008850:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd48      	ble.n	80088e8 <__sflush_r+0xac>
 8008856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008858:	2e00      	cmp	r6, #0
 800885a:	d045      	beq.n	80088e8 <__sflush_r+0xac>
 800885c:	2300      	movs	r3, #0
 800885e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008862:	682f      	ldr	r7, [r5, #0]
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	d030      	beq.n	80088cc <__sflush_r+0x90>
 800886a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	0759      	lsls	r1, r3, #29
 8008870:	d505      	bpl.n	800887e <__sflush_r+0x42>
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	1ad2      	subs	r2, r2, r3
 8008876:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008878:	b10b      	cbz	r3, 800887e <__sflush_r+0x42>
 800887a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800887c:	1ad2      	subs	r2, r2, r3
 800887e:	2300      	movs	r3, #0
 8008880:	4628      	mov	r0, r5
 8008882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008884:	6a21      	ldr	r1, [r4, #32]
 8008886:	47b0      	blx	r6
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	d106      	bne.n	800889c <__sflush_r+0x60>
 800888e:	6829      	ldr	r1, [r5, #0]
 8008890:	291d      	cmp	r1, #29
 8008892:	d82b      	bhi.n	80088ec <__sflush_r+0xb0>
 8008894:	4a28      	ldr	r2, [pc, #160]	@ (8008938 <__sflush_r+0xfc>)
 8008896:	40ca      	lsrs	r2, r1
 8008898:	07d6      	lsls	r6, r2, #31
 800889a:	d527      	bpl.n	80088ec <__sflush_r+0xb0>
 800889c:	2200      	movs	r2, #0
 800889e:	6062      	str	r2, [r4, #4]
 80088a0:	6922      	ldr	r2, [r4, #16]
 80088a2:	04d9      	lsls	r1, r3, #19
 80088a4:	6022      	str	r2, [r4, #0]
 80088a6:	d504      	bpl.n	80088b2 <__sflush_r+0x76>
 80088a8:	1c42      	adds	r2, r0, #1
 80088aa:	d101      	bne.n	80088b0 <__sflush_r+0x74>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b903      	cbnz	r3, 80088b2 <__sflush_r+0x76>
 80088b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80088b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088b4:	602f      	str	r7, [r5, #0]
 80088b6:	b1b9      	cbz	r1, 80088e8 <__sflush_r+0xac>
 80088b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <__sflush_r+0x8a>
 80088c0:	4628      	mov	r0, r5
 80088c2:	f7fe fa49 	bl	8006d58 <_free_r>
 80088c6:	2300      	movs	r3, #0
 80088c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ca:	e00d      	b.n	80088e8 <__sflush_r+0xac>
 80088cc:	2301      	movs	r3, #1
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b0      	blx	r6
 80088d2:	4602      	mov	r2, r0
 80088d4:	1c50      	adds	r0, r2, #1
 80088d6:	d1c9      	bne.n	800886c <__sflush_r+0x30>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0c6      	beq.n	800886c <__sflush_r+0x30>
 80088de:	2b1d      	cmp	r3, #29
 80088e0:	d001      	beq.n	80088e6 <__sflush_r+0xaa>
 80088e2:	2b16      	cmp	r3, #22
 80088e4:	d11d      	bne.n	8008922 <__sflush_r+0xe6>
 80088e6:	602f      	str	r7, [r5, #0]
 80088e8:	2000      	movs	r0, #0
 80088ea:	e021      	b.n	8008930 <__sflush_r+0xf4>
 80088ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f0:	b21b      	sxth	r3, r3
 80088f2:	e01a      	b.n	800892a <__sflush_r+0xee>
 80088f4:	690f      	ldr	r7, [r1, #16]
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d0f6      	beq.n	80088e8 <__sflush_r+0xac>
 80088fa:	0793      	lsls	r3, r2, #30
 80088fc:	bf18      	it	ne
 80088fe:	2300      	movne	r3, #0
 8008900:	680e      	ldr	r6, [r1, #0]
 8008902:	bf08      	it	eq
 8008904:	694b      	ldreq	r3, [r1, #20]
 8008906:	1bf6      	subs	r6, r6, r7
 8008908:	600f      	str	r7, [r1, #0]
 800890a:	608b      	str	r3, [r1, #8]
 800890c:	2e00      	cmp	r6, #0
 800890e:	ddeb      	ble.n	80088e8 <__sflush_r+0xac>
 8008910:	4633      	mov	r3, r6
 8008912:	463a      	mov	r2, r7
 8008914:	4628      	mov	r0, r5
 8008916:	6a21      	ldr	r1, [r4, #32]
 8008918:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800891c:	47e0      	blx	ip
 800891e:	2800      	cmp	r0, #0
 8008920:	dc07      	bgt.n	8008932 <__sflush_r+0xf6>
 8008922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008932:	4407      	add	r7, r0
 8008934:	1a36      	subs	r6, r6, r0
 8008936:	e7e9      	b.n	800890c <__sflush_r+0xd0>
 8008938:	20400001 	.word	0x20400001

0800893c <_fflush_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	690b      	ldr	r3, [r1, #16]
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b913      	cbnz	r3, 800894c <_fflush_r+0x10>
 8008946:	2500      	movs	r5, #0
 8008948:	4628      	mov	r0, r5
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	b118      	cbz	r0, 8008956 <_fflush_r+0x1a>
 800894e:	6a03      	ldr	r3, [r0, #32]
 8008950:	b90b      	cbnz	r3, 8008956 <_fflush_r+0x1a>
 8008952:	f7fd fa31 	bl	8005db8 <__sinit>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0f3      	beq.n	8008946 <_fflush_r+0xa>
 800895e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008960:	07d0      	lsls	r0, r2, #31
 8008962:	d404      	bmi.n	800896e <_fflush_r+0x32>
 8008964:	0599      	lsls	r1, r3, #22
 8008966:	d402      	bmi.n	800896e <_fflush_r+0x32>
 8008968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800896a:	f7fd fb74 	bl	8006056 <__retarget_lock_acquire_recursive>
 800896e:	4628      	mov	r0, r5
 8008970:	4621      	mov	r1, r4
 8008972:	f7ff ff63 	bl	800883c <__sflush_r>
 8008976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008978:	4605      	mov	r5, r0
 800897a:	07da      	lsls	r2, r3, #31
 800897c:	d4e4      	bmi.n	8008948 <_fflush_r+0xc>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	059b      	lsls	r3, r3, #22
 8008982:	d4e1      	bmi.n	8008948 <_fflush_r+0xc>
 8008984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008986:	f7fd fb67 	bl	8006058 <__retarget_lock_release_recursive>
 800898a:	e7dd      	b.n	8008948 <_fflush_r+0xc>

0800898c <memmove>:
 800898c:	4288      	cmp	r0, r1
 800898e:	b510      	push	{r4, lr}
 8008990:	eb01 0402 	add.w	r4, r1, r2
 8008994:	d902      	bls.n	800899c <memmove+0x10>
 8008996:	4284      	cmp	r4, r0
 8008998:	4623      	mov	r3, r4
 800899a:	d807      	bhi.n	80089ac <memmove+0x20>
 800899c:	1e43      	subs	r3, r0, #1
 800899e:	42a1      	cmp	r1, r4
 80089a0:	d008      	beq.n	80089b4 <memmove+0x28>
 80089a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089aa:	e7f8      	b.n	800899e <memmove+0x12>
 80089ac:	4601      	mov	r1, r0
 80089ae:	4402      	add	r2, r0
 80089b0:	428a      	cmp	r2, r1
 80089b2:	d100      	bne.n	80089b6 <memmove+0x2a>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089be:	e7f7      	b.n	80089b0 <memmove+0x24>

080089c0 <strncmp>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	b16a      	cbz	r2, 80089e0 <strncmp+0x20>
 80089c4:	3901      	subs	r1, #1
 80089c6:	1884      	adds	r4, r0, r2
 80089c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d103      	bne.n	80089dc <strncmp+0x1c>
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d001      	beq.n	80089dc <strncmp+0x1c>
 80089d8:	2a00      	cmp	r2, #0
 80089da:	d1f5      	bne.n	80089c8 <strncmp+0x8>
 80089dc:	1ad0      	subs	r0, r2, r3
 80089de:	bd10      	pop	{r4, pc}
 80089e0:	4610      	mov	r0, r2
 80089e2:	e7fc      	b.n	80089de <strncmp+0x1e>

080089e4 <_sbrk_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	2300      	movs	r3, #0
 80089e8:	4d05      	ldr	r5, [pc, #20]	@ (8008a00 <_sbrk_r+0x1c>)
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	602b      	str	r3, [r5, #0]
 80089f0:	f7f8 fc4a 	bl	8001288 <_sbrk>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_sbrk_r+0x1a>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_sbrk_r+0x1a>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	20001384 	.word	0x20001384

08008a04 <nan>:
 8008a04:	2000      	movs	r0, #0
 8008a06:	4901      	ldr	r1, [pc, #4]	@ (8008a0c <nan+0x8>)
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	7ff80000 	.word	0x7ff80000

08008a10 <__assert_func>:
 8008a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a12:	4614      	mov	r4, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <__assert_func+0x2c>)
 8008a18:	4605      	mov	r5, r0
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68d8      	ldr	r0, [r3, #12]
 8008a1e:	b14c      	cbz	r4, 8008a34 <__assert_func+0x24>
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <__assert_func+0x30>)
 8008a22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a26:	9100      	str	r1, [sp, #0]
 8008a28:	462b      	mov	r3, r5
 8008a2a:	4906      	ldr	r1, [pc, #24]	@ (8008a44 <__assert_func+0x34>)
 8008a2c:	f000 fba8 	bl	8009180 <fiprintf>
 8008a30:	f000 fbb8 	bl	80091a4 <abort>
 8008a34:	4b04      	ldr	r3, [pc, #16]	@ (8008a48 <__assert_func+0x38>)
 8008a36:	461c      	mov	r4, r3
 8008a38:	e7f3      	b.n	8008a22 <__assert_func+0x12>
 8008a3a:	bf00      	nop
 8008a3c:	2000001c 	.word	0x2000001c
 8008a40:	0800993c 	.word	0x0800993c
 8008a44:	08009949 	.word	0x08009949
 8008a48:	08009977 	.word	0x08009977

08008a4c <_calloc_r>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a52:	b934      	cbnz	r4, 8008a62 <_calloc_r+0x16>
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7fe f9f1 	bl	8006e3c <_malloc_r>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	b928      	cbnz	r0, 8008a6a <_calloc_r+0x1e>
 8008a5e:	4630      	mov	r0, r6
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	220c      	movs	r2, #12
 8008a64:	2600      	movs	r6, #0
 8008a66:	6002      	str	r2, [r0, #0]
 8008a68:	e7f9      	b.n	8008a5e <_calloc_r+0x12>
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f7fd fa74 	bl	8005f5a <memset>
 8008a72:	e7f4      	b.n	8008a5e <_calloc_r+0x12>

08008a74 <rshift>:
 8008a74:	6903      	ldr	r3, [r0, #16]
 8008a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a7e:	f100 0414 	add.w	r4, r0, #20
 8008a82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a86:	dd46      	ble.n	8008b16 <rshift+0xa2>
 8008a88:	f011 011f 	ands.w	r1, r1, #31
 8008a8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a94:	d10c      	bne.n	8008ab0 <rshift+0x3c>
 8008a96:	4629      	mov	r1, r5
 8008a98:	f100 0710 	add.w	r7, r0, #16
 8008a9c:	42b1      	cmp	r1, r6
 8008a9e:	d335      	bcc.n	8008b0c <rshift+0x98>
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	1eea      	subs	r2, r5, #3
 8008aa6:	4296      	cmp	r6, r2
 8008aa8:	bf38      	it	cc
 8008aaa:	2300      	movcc	r3, #0
 8008aac:	4423      	add	r3, r4
 8008aae:	e015      	b.n	8008adc <rshift+0x68>
 8008ab0:	46a1      	mov	r9, r4
 8008ab2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ab6:	f1c1 0820 	rsb	r8, r1, #32
 8008aba:	40cf      	lsrs	r7, r1
 8008abc:	f105 0e04 	add.w	lr, r5, #4
 8008ac0:	4576      	cmp	r6, lr
 8008ac2:	46f4      	mov	ip, lr
 8008ac4:	d816      	bhi.n	8008af4 <rshift+0x80>
 8008ac6:	1a9a      	subs	r2, r3, r2
 8008ac8:	0092      	lsls	r2, r2, #2
 8008aca:	3a04      	subs	r2, #4
 8008acc:	3501      	adds	r5, #1
 8008ace:	42ae      	cmp	r6, r5
 8008ad0:	bf38      	it	cc
 8008ad2:	2200      	movcc	r2, #0
 8008ad4:	18a3      	adds	r3, r4, r2
 8008ad6:	50a7      	str	r7, [r4, r2]
 8008ad8:	b107      	cbz	r7, 8008adc <rshift+0x68>
 8008ada:	3304      	adds	r3, #4
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	eba3 0204 	sub.w	r2, r3, r4
 8008ae2:	bf08      	it	eq
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008aea:	6102      	str	r2, [r0, #16]
 8008aec:	bf08      	it	eq
 8008aee:	6143      	streq	r3, [r0, #20]
 8008af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af4:	f8dc c000 	ldr.w	ip, [ip]
 8008af8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008afc:	ea4c 0707 	orr.w	r7, ip, r7
 8008b00:	f849 7b04 	str.w	r7, [r9], #4
 8008b04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b08:	40cf      	lsrs	r7, r1
 8008b0a:	e7d9      	b.n	8008ac0 <rshift+0x4c>
 8008b0c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b10:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b14:	e7c2      	b.n	8008a9c <rshift+0x28>
 8008b16:	4623      	mov	r3, r4
 8008b18:	e7e0      	b.n	8008adc <rshift+0x68>

08008b1a <__hexdig_fun>:
 8008b1a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d802      	bhi.n	8008b28 <__hexdig_fun+0xe>
 8008b22:	3820      	subs	r0, #32
 8008b24:	b2c0      	uxtb	r0, r0
 8008b26:	4770      	bx	lr
 8008b28:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b2c:	2b05      	cmp	r3, #5
 8008b2e:	d801      	bhi.n	8008b34 <__hexdig_fun+0x1a>
 8008b30:	3847      	subs	r0, #71	@ 0x47
 8008b32:	e7f7      	b.n	8008b24 <__hexdig_fun+0xa>
 8008b34:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b38:	2b05      	cmp	r3, #5
 8008b3a:	d801      	bhi.n	8008b40 <__hexdig_fun+0x26>
 8008b3c:	3827      	subs	r0, #39	@ 0x27
 8008b3e:	e7f1      	b.n	8008b24 <__hexdig_fun+0xa>
 8008b40:	2000      	movs	r0, #0
 8008b42:	4770      	bx	lr

08008b44 <__gethex>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	468a      	mov	sl, r1
 8008b4a:	4690      	mov	r8, r2
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	680b      	ldr	r3, [r1, #0]
 8008b52:	9001      	str	r0, [sp, #4]
 8008b54:	1c9c      	adds	r4, r3, #2
 8008b56:	46a1      	mov	r9, r4
 8008b58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b5c:	2830      	cmp	r0, #48	@ 0x30
 8008b5e:	d0fa      	beq.n	8008b56 <__gethex+0x12>
 8008b60:	eba9 0303 	sub.w	r3, r9, r3
 8008b64:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b68:	f7ff ffd7 	bl	8008b1a <__hexdig_fun>
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d168      	bne.n	8008c44 <__gethex+0x100>
 8008b72:	2201      	movs	r2, #1
 8008b74:	4648      	mov	r0, r9
 8008b76:	499f      	ldr	r1, [pc, #636]	@ (8008df4 <__gethex+0x2b0>)
 8008b78:	f7ff ff22 	bl	80089c0 <strncmp>
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d167      	bne.n	8008c52 <__gethex+0x10e>
 8008b82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b86:	4626      	mov	r6, r4
 8008b88:	f7ff ffc7 	bl	8008b1a <__hexdig_fun>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d062      	beq.n	8008c56 <__gethex+0x112>
 8008b90:	4623      	mov	r3, r4
 8008b92:	7818      	ldrb	r0, [r3, #0]
 8008b94:	4699      	mov	r9, r3
 8008b96:	2830      	cmp	r0, #48	@ 0x30
 8008b98:	f103 0301 	add.w	r3, r3, #1
 8008b9c:	d0f9      	beq.n	8008b92 <__gethex+0x4e>
 8008b9e:	f7ff ffbc 	bl	8008b1a <__hexdig_fun>
 8008ba2:	fab0 f580 	clz	r5, r0
 8008ba6:	f04f 0b01 	mov.w	fp, #1
 8008baa:	096d      	lsrs	r5, r5, #5
 8008bac:	464a      	mov	r2, r9
 8008bae:	4616      	mov	r6, r2
 8008bb0:	7830      	ldrb	r0, [r6, #0]
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	f7ff ffb1 	bl	8008b1a <__hexdig_fun>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1f8      	bne.n	8008bae <__gethex+0x6a>
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	498c      	ldr	r1, [pc, #560]	@ (8008df4 <__gethex+0x2b0>)
 8008bc2:	f7ff fefd 	bl	80089c0 <strncmp>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d13f      	bne.n	8008c4a <__gethex+0x106>
 8008bca:	b944      	cbnz	r4, 8008bde <__gethex+0x9a>
 8008bcc:	1c74      	adds	r4, r6, #1
 8008bce:	4622      	mov	r2, r4
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	7830      	ldrb	r0, [r6, #0]
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	f7ff ffa0 	bl	8008b1a <__hexdig_fun>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1f8      	bne.n	8008bd0 <__gethex+0x8c>
 8008bde:	1ba4      	subs	r4, r4, r6
 8008be0:	00a7      	lsls	r7, r4, #2
 8008be2:	7833      	ldrb	r3, [r6, #0]
 8008be4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008be8:	2b50      	cmp	r3, #80	@ 0x50
 8008bea:	d13e      	bne.n	8008c6a <__gethex+0x126>
 8008bec:	7873      	ldrb	r3, [r6, #1]
 8008bee:	2b2b      	cmp	r3, #43	@ 0x2b
 8008bf0:	d033      	beq.n	8008c5a <__gethex+0x116>
 8008bf2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008bf4:	d034      	beq.n	8008c60 <__gethex+0x11c>
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	1c71      	adds	r1, r6, #1
 8008bfa:	7808      	ldrb	r0, [r1, #0]
 8008bfc:	f7ff ff8d 	bl	8008b1a <__hexdig_fun>
 8008c00:	1e43      	subs	r3, r0, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b18      	cmp	r3, #24
 8008c06:	d830      	bhi.n	8008c6a <__gethex+0x126>
 8008c08:	f1a0 0210 	sub.w	r2, r0, #16
 8008c0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c10:	f7ff ff83 	bl	8008b1a <__hexdig_fun>
 8008c14:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c18:	fa5f fc8c 	uxtb.w	ip, ip
 8008c1c:	f1bc 0f18 	cmp.w	ip, #24
 8008c20:	f04f 030a 	mov.w	r3, #10
 8008c24:	d91e      	bls.n	8008c64 <__gethex+0x120>
 8008c26:	b104      	cbz	r4, 8008c2a <__gethex+0xe6>
 8008c28:	4252      	negs	r2, r2
 8008c2a:	4417      	add	r7, r2
 8008c2c:	f8ca 1000 	str.w	r1, [sl]
 8008c30:	b1ed      	cbz	r5, 8008c6e <__gethex+0x12a>
 8008c32:	f1bb 0f00 	cmp.w	fp, #0
 8008c36:	bf0c      	ite	eq
 8008c38:	2506      	moveq	r5, #6
 8008c3a:	2500      	movne	r5, #0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	b005      	add	sp, #20
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	2500      	movs	r5, #0
 8008c46:	462c      	mov	r4, r5
 8008c48:	e7b0      	b.n	8008bac <__gethex+0x68>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d1c7      	bne.n	8008bde <__gethex+0x9a>
 8008c4e:	4627      	mov	r7, r4
 8008c50:	e7c7      	b.n	8008be2 <__gethex+0x9e>
 8008c52:	464e      	mov	r6, r9
 8008c54:	462f      	mov	r7, r5
 8008c56:	2501      	movs	r5, #1
 8008c58:	e7c3      	b.n	8008be2 <__gethex+0x9e>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	1cb1      	adds	r1, r6, #2
 8008c5e:	e7cc      	b.n	8008bfa <__gethex+0xb6>
 8008c60:	2401      	movs	r4, #1
 8008c62:	e7fb      	b.n	8008c5c <__gethex+0x118>
 8008c64:	fb03 0002 	mla	r0, r3, r2, r0
 8008c68:	e7ce      	b.n	8008c08 <__gethex+0xc4>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	e7de      	b.n	8008c2c <__gethex+0xe8>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	eba6 0309 	sub.w	r3, r6, r9
 8008c74:	3b01      	subs	r3, #1
 8008c76:	2b07      	cmp	r3, #7
 8008c78:	dc0a      	bgt.n	8008c90 <__gethex+0x14c>
 8008c7a:	9801      	ldr	r0, [sp, #4]
 8008c7c:	f7fe f96a 	bl	8006f54 <_Balloc>
 8008c80:	4604      	mov	r4, r0
 8008c82:	b940      	cbnz	r0, 8008c96 <__gethex+0x152>
 8008c84:	4602      	mov	r2, r0
 8008c86:	21e4      	movs	r1, #228	@ 0xe4
 8008c88:	4b5b      	ldr	r3, [pc, #364]	@ (8008df8 <__gethex+0x2b4>)
 8008c8a:	485c      	ldr	r0, [pc, #368]	@ (8008dfc <__gethex+0x2b8>)
 8008c8c:	f7ff fec0 	bl	8008a10 <__assert_func>
 8008c90:	3101      	adds	r1, #1
 8008c92:	105b      	asrs	r3, r3, #1
 8008c94:	e7ef      	b.n	8008c76 <__gethex+0x132>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f100 0a14 	add.w	sl, r0, #20
 8008c9c:	4655      	mov	r5, sl
 8008c9e:	469b      	mov	fp, r3
 8008ca0:	45b1      	cmp	r9, r6
 8008ca2:	d337      	bcc.n	8008d14 <__gethex+0x1d0>
 8008ca4:	f845 bb04 	str.w	fp, [r5], #4
 8008ca8:	eba5 050a 	sub.w	r5, r5, sl
 8008cac:	10ad      	asrs	r5, r5, #2
 8008cae:	6125      	str	r5, [r4, #16]
 8008cb0:	4658      	mov	r0, fp
 8008cb2:	f7fe fa41 	bl	8007138 <__hi0bits>
 8008cb6:	016d      	lsls	r5, r5, #5
 8008cb8:	f8d8 6000 	ldr.w	r6, [r8]
 8008cbc:	1a2d      	subs	r5, r5, r0
 8008cbe:	42b5      	cmp	r5, r6
 8008cc0:	dd54      	ble.n	8008d6c <__gethex+0x228>
 8008cc2:	1bad      	subs	r5, r5, r6
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7fe fdc3 	bl	8007852 <__any_on>
 8008ccc:	4681      	mov	r9, r0
 8008cce:	b178      	cbz	r0, 8008cf0 <__gethex+0x1ac>
 8008cd0:	f04f 0901 	mov.w	r9, #1
 8008cd4:	1e6b      	subs	r3, r5, #1
 8008cd6:	1159      	asrs	r1, r3, #5
 8008cd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008cdc:	f003 021f 	and.w	r2, r3, #31
 8008ce0:	fa09 f202 	lsl.w	r2, r9, r2
 8008ce4:	420a      	tst	r2, r1
 8008ce6:	d003      	beq.n	8008cf0 <__gethex+0x1ac>
 8008ce8:	454b      	cmp	r3, r9
 8008cea:	dc36      	bgt.n	8008d5a <__gethex+0x216>
 8008cec:	f04f 0902 	mov.w	r9, #2
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7ff febe 	bl	8008a74 <rshift>
 8008cf8:	442f      	add	r7, r5
 8008cfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cfe:	42bb      	cmp	r3, r7
 8008d00:	da42      	bge.n	8008d88 <__gethex+0x244>
 8008d02:	4621      	mov	r1, r4
 8008d04:	9801      	ldr	r0, [sp, #4]
 8008d06:	f7fe f965 	bl	8006fd4 <_Bfree>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d0e:	25a3      	movs	r5, #163	@ 0xa3
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	e793      	b.n	8008c3c <__gethex+0xf8>
 8008d14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d18:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d1a:	d012      	beq.n	8008d42 <__gethex+0x1fe>
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d104      	bne.n	8008d2a <__gethex+0x1e6>
 8008d20:	f845 bb04 	str.w	fp, [r5], #4
 8008d24:	f04f 0b00 	mov.w	fp, #0
 8008d28:	465b      	mov	r3, fp
 8008d2a:	7830      	ldrb	r0, [r6, #0]
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	f7ff fef4 	bl	8008b1a <__hexdig_fun>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f000 000f 	and.w	r0, r0, #15
 8008d38:	4098      	lsls	r0, r3
 8008d3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d3e:	3304      	adds	r3, #4
 8008d40:	e7ae      	b.n	8008ca0 <__gethex+0x15c>
 8008d42:	45b1      	cmp	r9, r6
 8008d44:	d8ea      	bhi.n	8008d1c <__gethex+0x1d8>
 8008d46:	2201      	movs	r2, #1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	492a      	ldr	r1, [pc, #168]	@ (8008df4 <__gethex+0x2b0>)
 8008d4c:	9303      	str	r3, [sp, #12]
 8008d4e:	f7ff fe37 	bl	80089c0 <strncmp>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d1e1      	bne.n	8008d1c <__gethex+0x1d8>
 8008d58:	e7a2      	b.n	8008ca0 <__gethex+0x15c>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	1ea9      	subs	r1, r5, #2
 8008d5e:	f7fe fd78 	bl	8007852 <__any_on>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0c2      	beq.n	8008cec <__gethex+0x1a8>
 8008d66:	f04f 0903 	mov.w	r9, #3
 8008d6a:	e7c1      	b.n	8008cf0 <__gethex+0x1ac>
 8008d6c:	da09      	bge.n	8008d82 <__gethex+0x23e>
 8008d6e:	1b75      	subs	r5, r6, r5
 8008d70:	4621      	mov	r1, r4
 8008d72:	462a      	mov	r2, r5
 8008d74:	9801      	ldr	r0, [sp, #4]
 8008d76:	f7fe fb3d 	bl	80073f4 <__lshift>
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	1b7f      	subs	r7, r7, r5
 8008d7e:	f100 0a14 	add.w	sl, r0, #20
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	e7b8      	b.n	8008cfa <__gethex+0x1b6>
 8008d88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d8c:	42bd      	cmp	r5, r7
 8008d8e:	dd6f      	ble.n	8008e70 <__gethex+0x32c>
 8008d90:	1bed      	subs	r5, r5, r7
 8008d92:	42ae      	cmp	r6, r5
 8008d94:	dc34      	bgt.n	8008e00 <__gethex+0x2bc>
 8008d96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d022      	beq.n	8008de4 <__gethex+0x2a0>
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d024      	beq.n	8008dec <__gethex+0x2a8>
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d115      	bne.n	8008dd2 <__gethex+0x28e>
 8008da6:	42ae      	cmp	r6, r5
 8008da8:	d113      	bne.n	8008dd2 <__gethex+0x28e>
 8008daa:	2e01      	cmp	r6, #1
 8008dac:	d10b      	bne.n	8008dc6 <__gethex+0x282>
 8008dae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008db2:	9a02      	ldr	r2, [sp, #8]
 8008db4:	2562      	movs	r5, #98	@ 0x62
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	2301      	movs	r3, #1
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	f8ca 3000 	str.w	r3, [sl]
 8008dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc2:	601c      	str	r4, [r3, #0]
 8008dc4:	e73a      	b.n	8008c3c <__gethex+0xf8>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	1e71      	subs	r1, r6, #1
 8008dca:	f7fe fd42 	bl	8007852 <__any_on>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1ed      	bne.n	8008dae <__gethex+0x26a>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	9801      	ldr	r0, [sp, #4]
 8008dd6:	f7fe f8fd 	bl	8006fd4 <_Bfree>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dde:	2550      	movs	r5, #80	@ 0x50
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	e72b      	b.n	8008c3c <__gethex+0xf8>
 8008de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f3      	bne.n	8008dd2 <__gethex+0x28e>
 8008dea:	e7e0      	b.n	8008dae <__gethex+0x26a>
 8008dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1dd      	bne.n	8008dae <__gethex+0x26a>
 8008df2:	e7ee      	b.n	8008dd2 <__gethex+0x28e>
 8008df4:	08009921 	.word	0x08009921
 8008df8:	080098b7 	.word	0x080098b7
 8008dfc:	08009978 	.word	0x08009978
 8008e00:	1e6f      	subs	r7, r5, #1
 8008e02:	f1b9 0f00 	cmp.w	r9, #0
 8008e06:	d130      	bne.n	8008e6a <__gethex+0x326>
 8008e08:	b127      	cbz	r7, 8008e14 <__gethex+0x2d0>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f7fe fd20 	bl	8007852 <__any_on>
 8008e12:	4681      	mov	r9, r0
 8008e14:	2301      	movs	r3, #1
 8008e16:	4629      	mov	r1, r5
 8008e18:	1b76      	subs	r6, r6, r5
 8008e1a:	2502      	movs	r5, #2
 8008e1c:	117a      	asrs	r2, r7, #5
 8008e1e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e22:	f007 071f 	and.w	r7, r7, #31
 8008e26:	40bb      	lsls	r3, r7
 8008e28:	4213      	tst	r3, r2
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	bf18      	it	ne
 8008e2e:	f049 0902 	orrne.w	r9, r9, #2
 8008e32:	f7ff fe1f 	bl	8008a74 <rshift>
 8008e36:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e3a:	f1b9 0f00 	cmp.w	r9, #0
 8008e3e:	d047      	beq.n	8008ed0 <__gethex+0x38c>
 8008e40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d015      	beq.n	8008e74 <__gethex+0x330>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d017      	beq.n	8008e7c <__gethex+0x338>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d109      	bne.n	8008e64 <__gethex+0x320>
 8008e50:	f019 0f02 	tst.w	r9, #2
 8008e54:	d006      	beq.n	8008e64 <__gethex+0x320>
 8008e56:	f8da 3000 	ldr.w	r3, [sl]
 8008e5a:	ea49 0903 	orr.w	r9, r9, r3
 8008e5e:	f019 0f01 	tst.w	r9, #1
 8008e62:	d10e      	bne.n	8008e82 <__gethex+0x33e>
 8008e64:	f045 0510 	orr.w	r5, r5, #16
 8008e68:	e032      	b.n	8008ed0 <__gethex+0x38c>
 8008e6a:	f04f 0901 	mov.w	r9, #1
 8008e6e:	e7d1      	b.n	8008e14 <__gethex+0x2d0>
 8008e70:	2501      	movs	r5, #1
 8008e72:	e7e2      	b.n	8008e3a <__gethex+0x2f6>
 8008e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e76:	f1c3 0301 	rsb	r3, r3, #1
 8008e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0f0      	beq.n	8008e64 <__gethex+0x320>
 8008e82:	f04f 0c00 	mov.w	ip, #0
 8008e86:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e8a:	f104 0314 	add.w	r3, r4, #20
 8008e8e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e92:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ea0:	d01b      	beq.n	8008eda <__gethex+0x396>
 8008ea2:	3201      	adds	r2, #1
 8008ea4:	6002      	str	r2, [r0, #0]
 8008ea6:	2d02      	cmp	r5, #2
 8008ea8:	f104 0314 	add.w	r3, r4, #20
 8008eac:	d13c      	bne.n	8008f28 <__gethex+0x3e4>
 8008eae:	f8d8 2000 	ldr.w	r2, [r8]
 8008eb2:	3a01      	subs	r2, #1
 8008eb4:	42b2      	cmp	r2, r6
 8008eb6:	d109      	bne.n	8008ecc <__gethex+0x388>
 8008eb8:	2201      	movs	r2, #1
 8008eba:	1171      	asrs	r1, r6, #5
 8008ebc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ec0:	f006 061f 	and.w	r6, r6, #31
 8008ec4:	fa02 f606 	lsl.w	r6, r2, r6
 8008ec8:	421e      	tst	r6, r3
 8008eca:	d13a      	bne.n	8008f42 <__gethex+0x3fe>
 8008ecc:	f045 0520 	orr.w	r5, r5, #32
 8008ed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed2:	601c      	str	r4, [r3, #0]
 8008ed4:	9b02      	ldr	r3, [sp, #8]
 8008ed6:	601f      	str	r7, [r3, #0]
 8008ed8:	e6b0      	b.n	8008c3c <__gethex+0xf8>
 8008eda:	4299      	cmp	r1, r3
 8008edc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ee0:	d8d9      	bhi.n	8008e96 <__gethex+0x352>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	459b      	cmp	fp, r3
 8008ee6:	db17      	blt.n	8008f18 <__gethex+0x3d4>
 8008ee8:	6861      	ldr	r1, [r4, #4]
 8008eea:	9801      	ldr	r0, [sp, #4]
 8008eec:	3101      	adds	r1, #1
 8008eee:	f7fe f831 	bl	8006f54 <_Balloc>
 8008ef2:	4681      	mov	r9, r0
 8008ef4:	b918      	cbnz	r0, 8008efe <__gethex+0x3ba>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	2184      	movs	r1, #132	@ 0x84
 8008efa:	4b19      	ldr	r3, [pc, #100]	@ (8008f60 <__gethex+0x41c>)
 8008efc:	e6c5      	b.n	8008c8a <__gethex+0x146>
 8008efe:	6922      	ldr	r2, [r4, #16]
 8008f00:	f104 010c 	add.w	r1, r4, #12
 8008f04:	3202      	adds	r2, #2
 8008f06:	0092      	lsls	r2, r2, #2
 8008f08:	300c      	adds	r0, #12
 8008f0a:	f7fd f8b4 	bl	8006076 <memcpy>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	9801      	ldr	r0, [sp, #4]
 8008f12:	f7fe f85f 	bl	8006fd4 <_Bfree>
 8008f16:	464c      	mov	r4, r9
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6122      	str	r2, [r4, #16]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f24:	615a      	str	r2, [r3, #20]
 8008f26:	e7be      	b.n	8008ea6 <__gethex+0x362>
 8008f28:	6922      	ldr	r2, [r4, #16]
 8008f2a:	455a      	cmp	r2, fp
 8008f2c:	dd0b      	ble.n	8008f46 <__gethex+0x402>
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff fd9f 	bl	8008a74 <rshift>
 8008f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f3a:	3701      	adds	r7, #1
 8008f3c:	42bb      	cmp	r3, r7
 8008f3e:	f6ff aee0 	blt.w	8008d02 <__gethex+0x1be>
 8008f42:	2501      	movs	r5, #1
 8008f44:	e7c2      	b.n	8008ecc <__gethex+0x388>
 8008f46:	f016 061f 	ands.w	r6, r6, #31
 8008f4a:	d0fa      	beq.n	8008f42 <__gethex+0x3fe>
 8008f4c:	4453      	add	r3, sl
 8008f4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f52:	f7fe f8f1 	bl	8007138 <__hi0bits>
 8008f56:	f1c6 0620 	rsb	r6, r6, #32
 8008f5a:	42b0      	cmp	r0, r6
 8008f5c:	dbe7      	blt.n	8008f2e <__gethex+0x3ea>
 8008f5e:	e7f0      	b.n	8008f42 <__gethex+0x3fe>
 8008f60:	080098b7 	.word	0x080098b7

08008f64 <L_shift>:
 8008f64:	f1c2 0208 	rsb	r2, r2, #8
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	f1c2 0620 	rsb	r6, r2, #32
 8008f70:	6843      	ldr	r3, [r0, #4]
 8008f72:	6804      	ldr	r4, [r0, #0]
 8008f74:	fa03 f506 	lsl.w	r5, r3, r6
 8008f78:	432c      	orrs	r4, r5
 8008f7a:	40d3      	lsrs	r3, r2
 8008f7c:	6004      	str	r4, [r0, #0]
 8008f7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f82:	4288      	cmp	r0, r1
 8008f84:	d3f4      	bcc.n	8008f70 <L_shift+0xc>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__match>:
 8008f88:	b530      	push	{r4, r5, lr}
 8008f8a:	6803      	ldr	r3, [r0, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f92:	b914      	cbnz	r4, 8008f9a <__match+0x12>
 8008f94:	6003      	str	r3, [r0, #0]
 8008f96:	2001      	movs	r0, #1
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fa2:	2d19      	cmp	r5, #25
 8008fa4:	bf98      	it	ls
 8008fa6:	3220      	addls	r2, #32
 8008fa8:	42a2      	cmp	r2, r4
 8008faa:	d0f0      	beq.n	8008f8e <__match+0x6>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7f3      	b.n	8008f98 <__match+0x10>

08008fb0 <__hexnan>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	680b      	ldr	r3, [r1, #0]
 8008fb8:	4682      	mov	sl, r0
 8008fba:	115e      	asrs	r6, r3, #5
 8008fbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fc0:	f013 031f 	ands.w	r3, r3, #31
 8008fc4:	bf18      	it	ne
 8008fc6:	3604      	addne	r6, #4
 8008fc8:	1f37      	subs	r7, r6, #4
 8008fca:	4690      	mov	r8, r2
 8008fcc:	46b9      	mov	r9, r7
 8008fce:	463c      	mov	r4, r7
 8008fd0:	46ab      	mov	fp, r5
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	6801      	ldr	r1, [r0, #0]
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fdc:	9502      	str	r5, [sp, #8]
 8008fde:	784a      	ldrb	r2, [r1, #1]
 8008fe0:	1c4b      	adds	r3, r1, #1
 8008fe2:	9303      	str	r3, [sp, #12]
 8008fe4:	b342      	cbz	r2, 8009038 <__hexnan+0x88>
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	9105      	str	r1, [sp, #20]
 8008fea:	9204      	str	r2, [sp, #16]
 8008fec:	f7ff fd95 	bl	8008b1a <__hexdig_fun>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d151      	bne.n	8009098 <__hexnan+0xe8>
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	9905      	ldr	r1, [sp, #20]
 8008ff8:	2a20      	cmp	r2, #32
 8008ffa:	d818      	bhi.n	800902e <__hexnan+0x7e>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	459b      	cmp	fp, r3
 8009000:	dd13      	ble.n	800902a <__hexnan+0x7a>
 8009002:	454c      	cmp	r4, r9
 8009004:	d206      	bcs.n	8009014 <__hexnan+0x64>
 8009006:	2d07      	cmp	r5, #7
 8009008:	dc04      	bgt.n	8009014 <__hexnan+0x64>
 800900a:	462a      	mov	r2, r5
 800900c:	4649      	mov	r1, r9
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff ffa8 	bl	8008f64 <L_shift>
 8009014:	4544      	cmp	r4, r8
 8009016:	d952      	bls.n	80090be <__hexnan+0x10e>
 8009018:	2300      	movs	r3, #0
 800901a:	f1a4 0904 	sub.w	r9, r4, #4
 800901e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009022:	461d      	mov	r5, r3
 8009024:	464c      	mov	r4, r9
 8009026:	f8cd b008 	str.w	fp, [sp, #8]
 800902a:	9903      	ldr	r1, [sp, #12]
 800902c:	e7d7      	b.n	8008fde <__hexnan+0x2e>
 800902e:	2a29      	cmp	r2, #41	@ 0x29
 8009030:	d157      	bne.n	80090e2 <__hexnan+0x132>
 8009032:	3102      	adds	r1, #2
 8009034:	f8ca 1000 	str.w	r1, [sl]
 8009038:	f1bb 0f00 	cmp.w	fp, #0
 800903c:	d051      	beq.n	80090e2 <__hexnan+0x132>
 800903e:	454c      	cmp	r4, r9
 8009040:	d206      	bcs.n	8009050 <__hexnan+0xa0>
 8009042:	2d07      	cmp	r5, #7
 8009044:	dc04      	bgt.n	8009050 <__hexnan+0xa0>
 8009046:	462a      	mov	r2, r5
 8009048:	4649      	mov	r1, r9
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff ff8a 	bl	8008f64 <L_shift>
 8009050:	4544      	cmp	r4, r8
 8009052:	d936      	bls.n	80090c2 <__hexnan+0x112>
 8009054:	4623      	mov	r3, r4
 8009056:	f1a8 0204 	sub.w	r2, r8, #4
 800905a:	f853 1b04 	ldr.w	r1, [r3], #4
 800905e:	429f      	cmp	r7, r3
 8009060:	f842 1f04 	str.w	r1, [r2, #4]!
 8009064:	d2f9      	bcs.n	800905a <__hexnan+0xaa>
 8009066:	1b3b      	subs	r3, r7, r4
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	3304      	adds	r3, #4
 800906e:	3401      	adds	r4, #1
 8009070:	3e03      	subs	r6, #3
 8009072:	42b4      	cmp	r4, r6
 8009074:	bf88      	it	hi
 8009076:	2304      	movhi	r3, #4
 8009078:	2200      	movs	r2, #0
 800907a:	4443      	add	r3, r8
 800907c:	f843 2b04 	str.w	r2, [r3], #4
 8009080:	429f      	cmp	r7, r3
 8009082:	d2fb      	bcs.n	800907c <__hexnan+0xcc>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	b91b      	cbnz	r3, 8009090 <__hexnan+0xe0>
 8009088:	4547      	cmp	r7, r8
 800908a:	d128      	bne.n	80090de <__hexnan+0x12e>
 800908c:	2301      	movs	r3, #1
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	2005      	movs	r0, #5
 8009092:	b007      	add	sp, #28
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	3501      	adds	r5, #1
 800909a:	2d08      	cmp	r5, #8
 800909c:	f10b 0b01 	add.w	fp, fp, #1
 80090a0:	dd06      	ble.n	80090b0 <__hexnan+0x100>
 80090a2:	4544      	cmp	r4, r8
 80090a4:	d9c1      	bls.n	800902a <__hexnan+0x7a>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2501      	movs	r5, #1
 80090aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80090ae:	3c04      	subs	r4, #4
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	f000 000f 	and.w	r0, r0, #15
 80090b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090ba:	6020      	str	r0, [r4, #0]
 80090bc:	e7b5      	b.n	800902a <__hexnan+0x7a>
 80090be:	2508      	movs	r5, #8
 80090c0:	e7b3      	b.n	800902a <__hexnan+0x7a>
 80090c2:	9b01      	ldr	r3, [sp, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0dd      	beq.n	8009084 <__hexnan+0xd4>
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295
 80090cc:	f1c3 0320 	rsb	r3, r3, #32
 80090d0:	40da      	lsrs	r2, r3
 80090d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090d6:	4013      	ands	r3, r2
 80090d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80090dc:	e7d2      	b.n	8009084 <__hexnan+0xd4>
 80090de:	3f04      	subs	r7, #4
 80090e0:	e7d0      	b.n	8009084 <__hexnan+0xd4>
 80090e2:	2004      	movs	r0, #4
 80090e4:	e7d5      	b.n	8009092 <__hexnan+0xe2>

080090e6 <__ascii_mbtowc>:
 80090e6:	b082      	sub	sp, #8
 80090e8:	b901      	cbnz	r1, 80090ec <__ascii_mbtowc+0x6>
 80090ea:	a901      	add	r1, sp, #4
 80090ec:	b142      	cbz	r2, 8009100 <__ascii_mbtowc+0x1a>
 80090ee:	b14b      	cbz	r3, 8009104 <__ascii_mbtowc+0x1e>
 80090f0:	7813      	ldrb	r3, [r2, #0]
 80090f2:	600b      	str	r3, [r1, #0]
 80090f4:	7812      	ldrb	r2, [r2, #0]
 80090f6:	1e10      	subs	r0, r2, #0
 80090f8:	bf18      	it	ne
 80090fa:	2001      	movne	r0, #1
 80090fc:	b002      	add	sp, #8
 80090fe:	4770      	bx	lr
 8009100:	4610      	mov	r0, r2
 8009102:	e7fb      	b.n	80090fc <__ascii_mbtowc+0x16>
 8009104:	f06f 0001 	mvn.w	r0, #1
 8009108:	e7f8      	b.n	80090fc <__ascii_mbtowc+0x16>

0800910a <_realloc_r>:
 800910a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	4607      	mov	r7, r0
 8009110:	4614      	mov	r4, r2
 8009112:	460d      	mov	r5, r1
 8009114:	b921      	cbnz	r1, 8009120 <_realloc_r+0x16>
 8009116:	4611      	mov	r1, r2
 8009118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800911c:	f7fd be8e 	b.w	8006e3c <_malloc_r>
 8009120:	b92a      	cbnz	r2, 800912e <_realloc_r+0x24>
 8009122:	f7fd fe19 	bl	8006d58 <_free_r>
 8009126:	4625      	mov	r5, r4
 8009128:	4628      	mov	r0, r5
 800912a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912e:	f000 f840 	bl	80091b2 <_malloc_usable_size_r>
 8009132:	4284      	cmp	r4, r0
 8009134:	4606      	mov	r6, r0
 8009136:	d802      	bhi.n	800913e <_realloc_r+0x34>
 8009138:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800913c:	d8f4      	bhi.n	8009128 <_realloc_r+0x1e>
 800913e:	4621      	mov	r1, r4
 8009140:	4638      	mov	r0, r7
 8009142:	f7fd fe7b 	bl	8006e3c <_malloc_r>
 8009146:	4680      	mov	r8, r0
 8009148:	b908      	cbnz	r0, 800914e <_realloc_r+0x44>
 800914a:	4645      	mov	r5, r8
 800914c:	e7ec      	b.n	8009128 <_realloc_r+0x1e>
 800914e:	42b4      	cmp	r4, r6
 8009150:	4622      	mov	r2, r4
 8009152:	4629      	mov	r1, r5
 8009154:	bf28      	it	cs
 8009156:	4632      	movcs	r2, r6
 8009158:	f7fc ff8d 	bl	8006076 <memcpy>
 800915c:	4629      	mov	r1, r5
 800915e:	4638      	mov	r0, r7
 8009160:	f7fd fdfa 	bl	8006d58 <_free_r>
 8009164:	e7f1      	b.n	800914a <_realloc_r+0x40>

08009166 <__ascii_wctomb>:
 8009166:	4603      	mov	r3, r0
 8009168:	4608      	mov	r0, r1
 800916a:	b141      	cbz	r1, 800917e <__ascii_wctomb+0x18>
 800916c:	2aff      	cmp	r2, #255	@ 0xff
 800916e:	d904      	bls.n	800917a <__ascii_wctomb+0x14>
 8009170:	228a      	movs	r2, #138	@ 0x8a
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	4770      	bx	lr
 800917a:	2001      	movs	r0, #1
 800917c:	700a      	strb	r2, [r1, #0]
 800917e:	4770      	bx	lr

08009180 <fiprintf>:
 8009180:	b40e      	push	{r1, r2, r3}
 8009182:	b503      	push	{r0, r1, lr}
 8009184:	4601      	mov	r1, r0
 8009186:	ab03      	add	r3, sp, #12
 8009188:	4805      	ldr	r0, [pc, #20]	@ (80091a0 <fiprintf+0x20>)
 800918a:	f853 2b04 	ldr.w	r2, [r3], #4
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	f000 f83d 	bl	8009210 <_vfiprintf_r>
 8009196:	b002      	add	sp, #8
 8009198:	f85d eb04 	ldr.w	lr, [sp], #4
 800919c:	b003      	add	sp, #12
 800919e:	4770      	bx	lr
 80091a0:	2000001c 	.word	0x2000001c

080091a4 <abort>:
 80091a4:	2006      	movs	r0, #6
 80091a6:	b508      	push	{r3, lr}
 80091a8:	f000 fa06 	bl	80095b8 <raise>
 80091ac:	2001      	movs	r0, #1
 80091ae:	f7f7 fff6 	bl	800119e <_exit>

080091b2 <_malloc_usable_size_r>:
 80091b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b6:	1f18      	subs	r0, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	580b      	ldrlt	r3, [r1, r0]
 80091be:	18c0      	addlt	r0, r0, r3
 80091c0:	4770      	bx	lr

080091c2 <__sfputc_r>:
 80091c2:	6893      	ldr	r3, [r2, #8]
 80091c4:	b410      	push	{r4}
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	6093      	str	r3, [r2, #8]
 80091cc:	da07      	bge.n	80091de <__sfputc_r+0x1c>
 80091ce:	6994      	ldr	r4, [r2, #24]
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	db01      	blt.n	80091d8 <__sfputc_r+0x16>
 80091d4:	290a      	cmp	r1, #10
 80091d6:	d102      	bne.n	80091de <__sfputc_r+0x1c>
 80091d8:	bc10      	pop	{r4}
 80091da:	f000 b931 	b.w	8009440 <__swbuf_r>
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	1c58      	adds	r0, r3, #1
 80091e2:	6010      	str	r0, [r2, #0]
 80091e4:	7019      	strb	r1, [r3, #0]
 80091e6:	4608      	mov	r0, r1
 80091e8:	bc10      	pop	{r4}
 80091ea:	4770      	bx	lr

080091ec <__sfputs_r>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	4606      	mov	r6, r0
 80091f0:	460f      	mov	r7, r1
 80091f2:	4614      	mov	r4, r2
 80091f4:	18d5      	adds	r5, r2, r3
 80091f6:	42ac      	cmp	r4, r5
 80091f8:	d101      	bne.n	80091fe <__sfputs_r+0x12>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e007      	b.n	800920e <__sfputs_r+0x22>
 80091fe:	463a      	mov	r2, r7
 8009200:	4630      	mov	r0, r6
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	f7ff ffdc 	bl	80091c2 <__sfputc_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d1f3      	bne.n	80091f6 <__sfputs_r+0xa>
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009210 <_vfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	460d      	mov	r5, r1
 8009216:	4614      	mov	r4, r2
 8009218:	4698      	mov	r8, r3
 800921a:	4606      	mov	r6, r0
 800921c:	b09d      	sub	sp, #116	@ 0x74
 800921e:	b118      	cbz	r0, 8009228 <_vfiprintf_r+0x18>
 8009220:	6a03      	ldr	r3, [r0, #32]
 8009222:	b90b      	cbnz	r3, 8009228 <_vfiprintf_r+0x18>
 8009224:	f7fc fdc8 	bl	8005db8 <__sinit>
 8009228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800922a:	07d9      	lsls	r1, r3, #31
 800922c:	d405      	bmi.n	800923a <_vfiprintf_r+0x2a>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	059a      	lsls	r2, r3, #22
 8009232:	d402      	bmi.n	800923a <_vfiprintf_r+0x2a>
 8009234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009236:	f7fc ff0e 	bl	8006056 <__retarget_lock_acquire_recursive>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	071b      	lsls	r3, r3, #28
 800923e:	d501      	bpl.n	8009244 <_vfiprintf_r+0x34>
 8009240:	692b      	ldr	r3, [r5, #16]
 8009242:	b99b      	cbnz	r3, 800926c <_vfiprintf_r+0x5c>
 8009244:	4629      	mov	r1, r5
 8009246:	4630      	mov	r0, r6
 8009248:	f000 f938 	bl	80094bc <__swsetup_r>
 800924c:	b170      	cbz	r0, 800926c <_vfiprintf_r+0x5c>
 800924e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009250:	07dc      	lsls	r4, r3, #31
 8009252:	d504      	bpl.n	800925e <_vfiprintf_r+0x4e>
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	b01d      	add	sp, #116	@ 0x74
 800925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925e:	89ab      	ldrh	r3, [r5, #12]
 8009260:	0598      	lsls	r0, r3, #22
 8009262:	d4f7      	bmi.n	8009254 <_vfiprintf_r+0x44>
 8009264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009266:	f7fc fef7 	bl	8006058 <__retarget_lock_release_recursive>
 800926a:	e7f3      	b.n	8009254 <_vfiprintf_r+0x44>
 800926c:	2300      	movs	r3, #0
 800926e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009270:	2320      	movs	r3, #32
 8009272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009276:	2330      	movs	r3, #48	@ 0x30
 8009278:	f04f 0901 	mov.w	r9, #1
 800927c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009280:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800942c <_vfiprintf_r+0x21c>
 8009284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009288:	4623      	mov	r3, r4
 800928a:	469a      	mov	sl, r3
 800928c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009290:	b10a      	cbz	r2, 8009296 <_vfiprintf_r+0x86>
 8009292:	2a25      	cmp	r2, #37	@ 0x25
 8009294:	d1f9      	bne.n	800928a <_vfiprintf_r+0x7a>
 8009296:	ebba 0b04 	subs.w	fp, sl, r4
 800929a:	d00b      	beq.n	80092b4 <_vfiprintf_r+0xa4>
 800929c:	465b      	mov	r3, fp
 800929e:	4622      	mov	r2, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffa2 	bl	80091ec <__sfputs_r>
 80092a8:	3001      	adds	r0, #1
 80092aa:	f000 80a7 	beq.w	80093fc <_vfiprintf_r+0x1ec>
 80092ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b0:	445a      	add	r2, fp
 80092b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80092b4:	f89a 3000 	ldrb.w	r3, [sl]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 809f 	beq.w	80093fc <_vfiprintf_r+0x1ec>
 80092be:	2300      	movs	r3, #0
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c8:	f10a 0a01 	add.w	sl, sl, #1
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	9307      	str	r3, [sp, #28]
 80092d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d6:	4654      	mov	r4, sl
 80092d8:	2205      	movs	r2, #5
 80092da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092de:	4853      	ldr	r0, [pc, #332]	@ (800942c <_vfiprintf_r+0x21c>)
 80092e0:	f7fc febb 	bl	800605a <memchr>
 80092e4:	9a04      	ldr	r2, [sp, #16]
 80092e6:	b9d8      	cbnz	r0, 8009320 <_vfiprintf_r+0x110>
 80092e8:	06d1      	lsls	r1, r2, #27
 80092ea:	bf44      	itt	mi
 80092ec:	2320      	movmi	r3, #32
 80092ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f2:	0713      	lsls	r3, r2, #28
 80092f4:	bf44      	itt	mi
 80092f6:	232b      	movmi	r3, #43	@ 0x2b
 80092f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009300:	2b2a      	cmp	r3, #42	@ 0x2a
 8009302:	d015      	beq.n	8009330 <_vfiprintf_r+0x120>
 8009304:	4654      	mov	r4, sl
 8009306:	2000      	movs	r0, #0
 8009308:	f04f 0c0a 	mov.w	ip, #10
 800930c:	9a07      	ldr	r2, [sp, #28]
 800930e:	4621      	mov	r1, r4
 8009310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009314:	3b30      	subs	r3, #48	@ 0x30
 8009316:	2b09      	cmp	r3, #9
 8009318:	d94b      	bls.n	80093b2 <_vfiprintf_r+0x1a2>
 800931a:	b1b0      	cbz	r0, 800934a <_vfiprintf_r+0x13a>
 800931c:	9207      	str	r2, [sp, #28]
 800931e:	e014      	b.n	800934a <_vfiprintf_r+0x13a>
 8009320:	eba0 0308 	sub.w	r3, r0, r8
 8009324:	fa09 f303 	lsl.w	r3, r9, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	46a2      	mov	sl, r4
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	e7d2      	b.n	80092d6 <_vfiprintf_r+0xc6>
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	1d19      	adds	r1, r3, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	9103      	str	r1, [sp, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	bfbb      	ittet	lt
 800933c:	425b      	neglt	r3, r3
 800933e:	f042 0202 	orrlt.w	r2, r2, #2
 8009342:	9307      	strge	r3, [sp, #28]
 8009344:	9307      	strlt	r3, [sp, #28]
 8009346:	bfb8      	it	lt
 8009348:	9204      	strlt	r2, [sp, #16]
 800934a:	7823      	ldrb	r3, [r4, #0]
 800934c:	2b2e      	cmp	r3, #46	@ 0x2e
 800934e:	d10a      	bne.n	8009366 <_vfiprintf_r+0x156>
 8009350:	7863      	ldrb	r3, [r4, #1]
 8009352:	2b2a      	cmp	r3, #42	@ 0x2a
 8009354:	d132      	bne.n	80093bc <_vfiprintf_r+0x1ac>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	3402      	adds	r4, #2
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9203      	str	r2, [sp, #12]
 8009360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009430 <_vfiprintf_r+0x220>
 800936a:	2203      	movs	r2, #3
 800936c:	4650      	mov	r0, sl
 800936e:	7821      	ldrb	r1, [r4, #0]
 8009370:	f7fc fe73 	bl	800605a <memchr>
 8009374:	b138      	cbz	r0, 8009386 <_vfiprintf_r+0x176>
 8009376:	2240      	movs	r2, #64	@ 0x40
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	eba0 000a 	sub.w	r0, r0, sl
 800937e:	4082      	lsls	r2, r0
 8009380:	4313      	orrs	r3, r2
 8009382:	3401      	adds	r4, #1
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938a:	2206      	movs	r2, #6
 800938c:	4829      	ldr	r0, [pc, #164]	@ (8009434 <_vfiprintf_r+0x224>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009392:	f7fc fe62 	bl	800605a <memchr>
 8009396:	2800      	cmp	r0, #0
 8009398:	d03f      	beq.n	800941a <_vfiprintf_r+0x20a>
 800939a:	4b27      	ldr	r3, [pc, #156]	@ (8009438 <_vfiprintf_r+0x228>)
 800939c:	bb1b      	cbnz	r3, 80093e6 <_vfiprintf_r+0x1d6>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	3308      	adds	r3, #8
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ac:	443b      	add	r3, r7
 80093ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b0:	e76a      	b.n	8009288 <_vfiprintf_r+0x78>
 80093b2:	460c      	mov	r4, r1
 80093b4:	2001      	movs	r0, #1
 80093b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ba:	e7a8      	b.n	800930e <_vfiprintf_r+0xfe>
 80093bc:	2300      	movs	r3, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4619      	mov	r1, r3
 80093c4:	3401      	adds	r4, #1
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ce:	3a30      	subs	r2, #48	@ 0x30
 80093d0:	2a09      	cmp	r2, #9
 80093d2:	d903      	bls.n	80093dc <_vfiprintf_r+0x1cc>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0c6      	beq.n	8009366 <_vfiprintf_r+0x156>
 80093d8:	9105      	str	r1, [sp, #20]
 80093da:	e7c4      	b.n	8009366 <_vfiprintf_r+0x156>
 80093dc:	4604      	mov	r4, r0
 80093de:	2301      	movs	r3, #1
 80093e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e4:	e7f0      	b.n	80093c8 <_vfiprintf_r+0x1b8>
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462a      	mov	r2, r5
 80093ec:	4630      	mov	r0, r6
 80093ee:	4b13      	ldr	r3, [pc, #76]	@ (800943c <_vfiprintf_r+0x22c>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	f7fb fe8f 	bl	8005114 <_printf_float>
 80093f6:	4607      	mov	r7, r0
 80093f8:	1c78      	adds	r0, r7, #1
 80093fa:	d1d6      	bne.n	80093aa <_vfiprintf_r+0x19a>
 80093fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d405      	bmi.n	800940e <_vfiprintf_r+0x1fe>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d402      	bmi.n	800940e <_vfiprintf_r+0x1fe>
 8009408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940a:	f7fc fe25 	bl	8006058 <__retarget_lock_release_recursive>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	065b      	lsls	r3, r3, #25
 8009412:	f53f af1f 	bmi.w	8009254 <_vfiprintf_r+0x44>
 8009416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009418:	e71e      	b.n	8009258 <_vfiprintf_r+0x48>
 800941a:	ab03      	add	r3, sp, #12
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	462a      	mov	r2, r5
 8009420:	4630      	mov	r0, r6
 8009422:	4b06      	ldr	r3, [pc, #24]	@ (800943c <_vfiprintf_r+0x22c>)
 8009424:	a904      	add	r1, sp, #16
 8009426:	f7fc f913 	bl	8005650 <_printf_i>
 800942a:	e7e4      	b.n	80093f6 <_vfiprintf_r+0x1e6>
 800942c:	08009923 	.word	0x08009923
 8009430:	08009929 	.word	0x08009929
 8009434:	0800992d 	.word	0x0800992d
 8009438:	08005115 	.word	0x08005115
 800943c:	080091ed 	.word	0x080091ed

08009440 <__swbuf_r>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	460e      	mov	r6, r1
 8009444:	4614      	mov	r4, r2
 8009446:	4605      	mov	r5, r0
 8009448:	b118      	cbz	r0, 8009452 <__swbuf_r+0x12>
 800944a:	6a03      	ldr	r3, [r0, #32]
 800944c:	b90b      	cbnz	r3, 8009452 <__swbuf_r+0x12>
 800944e:	f7fc fcb3 	bl	8005db8 <__sinit>
 8009452:	69a3      	ldr	r3, [r4, #24]
 8009454:	60a3      	str	r3, [r4, #8]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	071a      	lsls	r2, r3, #28
 800945a:	d501      	bpl.n	8009460 <__swbuf_r+0x20>
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	b943      	cbnz	r3, 8009472 <__swbuf_r+0x32>
 8009460:	4621      	mov	r1, r4
 8009462:	4628      	mov	r0, r5
 8009464:	f000 f82a 	bl	80094bc <__swsetup_r>
 8009468:	b118      	cbz	r0, 8009472 <__swbuf_r+0x32>
 800946a:	f04f 37ff 	mov.w	r7, #4294967295
 800946e:	4638      	mov	r0, r7
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	6922      	ldr	r2, [r4, #16]
 8009476:	b2f6      	uxtb	r6, r6
 8009478:	1a98      	subs	r0, r3, r2
 800947a:	6963      	ldr	r3, [r4, #20]
 800947c:	4637      	mov	r7, r6
 800947e:	4283      	cmp	r3, r0
 8009480:	dc05      	bgt.n	800948e <__swbuf_r+0x4e>
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f7ff fa59 	bl	800893c <_fflush_r>
 800948a:	2800      	cmp	r0, #0
 800948c:	d1ed      	bne.n	800946a <__swbuf_r+0x2a>
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	3b01      	subs	r3, #1
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	701e      	strb	r6, [r3, #0]
 800949c:	6962      	ldr	r2, [r4, #20]
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d004      	beq.n	80094ae <__swbuf_r+0x6e>
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	07db      	lsls	r3, r3, #31
 80094a8:	d5e1      	bpl.n	800946e <__swbuf_r+0x2e>
 80094aa:	2e0a      	cmp	r6, #10
 80094ac:	d1df      	bne.n	800946e <__swbuf_r+0x2e>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f7ff fa43 	bl	800893c <_fflush_r>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d0d9      	beq.n	800946e <__swbuf_r+0x2e>
 80094ba:	e7d6      	b.n	800946a <__swbuf_r+0x2a>

080094bc <__swsetup_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4b29      	ldr	r3, [pc, #164]	@ (8009564 <__swsetup_r+0xa8>)
 80094c0:	4605      	mov	r5, r0
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	460c      	mov	r4, r1
 80094c6:	b118      	cbz	r0, 80094d0 <__swsetup_r+0x14>
 80094c8:	6a03      	ldr	r3, [r0, #32]
 80094ca:	b90b      	cbnz	r3, 80094d0 <__swsetup_r+0x14>
 80094cc:	f7fc fc74 	bl	8005db8 <__sinit>
 80094d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d4:	0719      	lsls	r1, r3, #28
 80094d6:	d422      	bmi.n	800951e <__swsetup_r+0x62>
 80094d8:	06da      	lsls	r2, r3, #27
 80094da:	d407      	bmi.n	80094ec <__swsetup_r+0x30>
 80094dc:	2209      	movs	r2, #9
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	e033      	b.n	8009554 <__swsetup_r+0x98>
 80094ec:	0758      	lsls	r0, r3, #29
 80094ee:	d512      	bpl.n	8009516 <__swsetup_r+0x5a>
 80094f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094f2:	b141      	cbz	r1, 8009506 <__swsetup_r+0x4a>
 80094f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094f8:	4299      	cmp	r1, r3
 80094fa:	d002      	beq.n	8009502 <__swsetup_r+0x46>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7fd fc2b 	bl	8006d58 <_free_r>
 8009502:	2300      	movs	r3, #0
 8009504:	6363      	str	r3, [r4, #52]	@ 0x34
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	2300      	movs	r3, #0
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0308 	orr.w	r3, r3, #8
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	b94b      	cbnz	r3, 8009536 <__swsetup_r+0x7a>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952c:	d003      	beq.n	8009536 <__swsetup_r+0x7a>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f882 	bl	800963a <__smakebuf_r>
 8009536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953a:	f013 0201 	ands.w	r2, r3, #1
 800953e:	d00a      	beq.n	8009556 <__swsetup_r+0x9a>
 8009540:	2200      	movs	r2, #0
 8009542:	60a2      	str	r2, [r4, #8]
 8009544:	6962      	ldr	r2, [r4, #20]
 8009546:	4252      	negs	r2, r2
 8009548:	61a2      	str	r2, [r4, #24]
 800954a:	6922      	ldr	r2, [r4, #16]
 800954c:	b942      	cbnz	r2, 8009560 <__swsetup_r+0xa4>
 800954e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009552:	d1c5      	bne.n	80094e0 <__swsetup_r+0x24>
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	0799      	lsls	r1, r3, #30
 8009558:	bf58      	it	pl
 800955a:	6962      	ldrpl	r2, [r4, #20]
 800955c:	60a2      	str	r2, [r4, #8]
 800955e:	e7f4      	b.n	800954a <__swsetup_r+0x8e>
 8009560:	2000      	movs	r0, #0
 8009562:	e7f7      	b.n	8009554 <__swsetup_r+0x98>
 8009564:	2000001c 	.word	0x2000001c

08009568 <_raise_r>:
 8009568:	291f      	cmp	r1, #31
 800956a:	b538      	push	{r3, r4, r5, lr}
 800956c:	4605      	mov	r5, r0
 800956e:	460c      	mov	r4, r1
 8009570:	d904      	bls.n	800957c <_raise_r+0x14>
 8009572:	2316      	movs	r3, #22
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800957e:	b112      	cbz	r2, 8009586 <_raise_r+0x1e>
 8009580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009584:	b94b      	cbnz	r3, 800959a <_raise_r+0x32>
 8009586:	4628      	mov	r0, r5
 8009588:	f000 f830 	bl	80095ec <_getpid_r>
 800958c:	4622      	mov	r2, r4
 800958e:	4601      	mov	r1, r0
 8009590:	4628      	mov	r0, r5
 8009592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009596:	f000 b817 	b.w	80095c8 <_kill_r>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00a      	beq.n	80095b4 <_raise_r+0x4c>
 800959e:	1c59      	adds	r1, r3, #1
 80095a0:	d103      	bne.n	80095aa <_raise_r+0x42>
 80095a2:	2316      	movs	r3, #22
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	2001      	movs	r0, #1
 80095a8:	e7e7      	b.n	800957a <_raise_r+0x12>
 80095aa:	2100      	movs	r1, #0
 80095ac:	4620      	mov	r0, r4
 80095ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095b2:	4798      	blx	r3
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7e0      	b.n	800957a <_raise_r+0x12>

080095b8 <raise>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	@ (80095c4 <raise+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f7ff bfd3 	b.w	8009568 <_raise_r>
 80095c2:	bf00      	nop
 80095c4:	2000001c 	.word	0x2000001c

080095c8 <_kill_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	2300      	movs	r3, #0
 80095cc:	4d06      	ldr	r5, [pc, #24]	@ (80095e8 <_kill_r+0x20>)
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f7 fdd2 	bl	800117e <_kill>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_kill_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_kill_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	20001384 	.word	0x20001384

080095ec <_getpid_r>:
 80095ec:	f7f7 bdc0 	b.w	8001170 <_getpid>

080095f0 <__swhatbuf_r>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	460c      	mov	r4, r1
 80095f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f8:	4615      	mov	r5, r2
 80095fa:	2900      	cmp	r1, #0
 80095fc:	461e      	mov	r6, r3
 80095fe:	b096      	sub	sp, #88	@ 0x58
 8009600:	da0c      	bge.n	800961c <__swhatbuf_r+0x2c>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	2100      	movs	r1, #0
 8009606:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800960a:	bf14      	ite	ne
 800960c:	2340      	movne	r3, #64	@ 0x40
 800960e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009612:	2000      	movs	r0, #0
 8009614:	6031      	str	r1, [r6, #0]
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	b016      	add	sp, #88	@ 0x58
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	466a      	mov	r2, sp
 800961e:	f000 f849 	bl	80096b4 <_fstat_r>
 8009622:	2800      	cmp	r0, #0
 8009624:	dbed      	blt.n	8009602 <__swhatbuf_r+0x12>
 8009626:	9901      	ldr	r1, [sp, #4]
 8009628:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800962c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009630:	4259      	negs	r1, r3
 8009632:	4159      	adcs	r1, r3
 8009634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009638:	e7eb      	b.n	8009612 <__swhatbuf_r+0x22>

0800963a <__smakebuf_r>:
 800963a:	898b      	ldrh	r3, [r1, #12]
 800963c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963e:	079d      	lsls	r5, r3, #30
 8009640:	4606      	mov	r6, r0
 8009642:	460c      	mov	r4, r1
 8009644:	d507      	bpl.n	8009656 <__smakebuf_r+0x1c>
 8009646:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	2301      	movs	r3, #1
 8009650:	6163      	str	r3, [r4, #20]
 8009652:	b003      	add	sp, #12
 8009654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009656:	466a      	mov	r2, sp
 8009658:	ab01      	add	r3, sp, #4
 800965a:	f7ff ffc9 	bl	80095f0 <__swhatbuf_r>
 800965e:	9f00      	ldr	r7, [sp, #0]
 8009660:	4605      	mov	r5, r0
 8009662:	4639      	mov	r1, r7
 8009664:	4630      	mov	r0, r6
 8009666:	f7fd fbe9 	bl	8006e3c <_malloc_r>
 800966a:	b948      	cbnz	r0, 8009680 <__smakebuf_r+0x46>
 800966c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009670:	059a      	lsls	r2, r3, #22
 8009672:	d4ee      	bmi.n	8009652 <__smakebuf_r+0x18>
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	f043 0302 	orr.w	r3, r3, #2
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	e7e2      	b.n	8009646 <__smakebuf_r+0xc>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	b15b      	cbz	r3, 80096aa <__smakebuf_r+0x70>
 8009692:	4630      	mov	r0, r6
 8009694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009698:	f000 f81e 	bl	80096d8 <_isatty_r>
 800969c:	b128      	cbz	r0, 80096aa <__smakebuf_r+0x70>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	431d      	orrs	r5, r3
 80096ae:	81a5      	strh	r5, [r4, #12]
 80096b0:	e7cf      	b.n	8009652 <__smakebuf_r+0x18>
	...

080096b4 <_fstat_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	2300      	movs	r3, #0
 80096b8:	4d06      	ldr	r5, [pc, #24]	@ (80096d4 <_fstat_r+0x20>)
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f7f7 fdbb 	bl	800123c <_fstat>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d102      	bne.n	80096d0 <_fstat_r+0x1c>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	b103      	cbz	r3, 80096d0 <_fstat_r+0x1c>
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
 80096d2:	bf00      	nop
 80096d4:	20001384 	.word	0x20001384

080096d8 <_isatty_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	2300      	movs	r3, #0
 80096dc:	4d05      	ldr	r5, [pc, #20]	@ (80096f4 <_isatty_r+0x1c>)
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7f7 fdb9 	bl	800125a <_isatty>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_isatty_r+0x1a>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_isatty_r+0x1a>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20001384 	.word	0x20001384

080096f8 <_init>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr

08009704 <_fini>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr
